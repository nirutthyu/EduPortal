[
    {
        "topic": "Overview of web development technologies",
        "url": "https://www.youtube.com/watch?v=l1EssrLxt7E",
        "transcript": "Error fetching transcript for video l1EssrLxt7E: \nCould not retrieve a transcript for the video https://www.youtube.com/watch?v=l1EssrLxt7E! This is most likely caused by:\n\nNo transcripts were found for any of the requested language codes: ('en',)\n\nFor this video (l1EssrLxt7E) transcripts are available in the following languages:\n\n(MANUALLY CREATED)\nNone\n\n(GENERATED)\n - hi (\"Hindi (auto-generated)\")[TRANSLATABLE]\n\n(TRANSLATION LANGUAGES)\n - ab (\"Abkhazian\")\n - aa (\"Afar\")\n - af (\"Afrikaans\")\n - ak (\"Akan\")\n - sq (\"Albanian\")\n - am (\"Amharic\")\n - ar (\"Arabic\")\n - hy (\"Armenian\")\n - as (\"Assamese\")\n - ay (\"Aymara\")\n - az (\"Azerbaijani\")\n - bn (\"Bangla\")\n - ba (\"Bashkir\")\n - eu (\"Basque\")\n - be (\"Belarusian\")\n - bho (\"Bhojpuri\")\n - bs (\"Bosnian\")\n - br (\"Breton\")\n - bg (\"Bulgarian\")\n - my (\"Burmese\")\n - ca (\"Catalan\")\n - ceb (\"Cebuano\")\n - zh-Hans (\"Chinese (Simplified)\")\n - zh-Hant (\"Chinese (Traditional)\")\n - co (\"Corsican\")\n - hr (\"Croatian\")\n - cs (\"Czech\")\n - da (\"Danish\")\n - dv (\"Divehi\")\n - nl (\"Dutch\")\n - dz (\"Dzongkha\")\n - en (\"English\")\n - eo (\"Esperanto\")\n - et (\"Estonian\")\n - ee (\"Ewe\")\n - fo (\"Faroese\")\n - fj (\"Fijian\")\n - fil (\"Filipino\")\n - fi (\"Finnish\")\n - fr (\"French\")\n - gaa (\"Ga\")\n - gl (\"Galician\")\n - lg (\"Ganda\")\n - ka (\"Georgian\")\n - de (\"German\")\n - el (\"Greek\")\n - gn (\"Guarani\")\n - gu (\"Gujarati\")\n - ht (\"Haitian Creole\")\n - ha (\"Hausa\")\n - haw (\"Hawaiian\")\n - iw (\"Hebrew\")\n - hi (\"Hindi\")\n - hmn (\"Hmong\")\n - hu (\"Hungarian\")\n - is (\"Icelandic\")\n - ig (\"Igbo\")\n - id (\"Indonesian\")\n - iu (\"Inuktitut\")\n - ga (\"Irish\")\n - it (\"Italian\")\n - ja (\"Japanese\")\n - jv (\"Javanese\")\n - kl (\"Kalaallisut\")\n - kn (\"Kannada\")\n - kk (\"Kazakh\")\n - kha (\"Khasi\")\n - km (\"Khmer\")\n - rw (\"Kinyarwanda\")\n - ko (\"Korean\")\n - kri (\"Krio\")\n - ku (\"Kurdish\")\n - ky (\"Kyrgyz\")\n - lo (\"Lao\")\n - la (\"Latin\")\n - lv (\"Latvian\")\n - ln (\"Lingala\")\n - lt (\"Lithuanian\")\n - lua (\"Luba-Lulua\")\n - luo (\"Luo\")\n - lb (\"Luxembourgish\")\n - mk (\"Macedonian\")\n - mg (\"Malagasy\")\n - ms (\"Malay\")\n - ml (\"Malayalam\")\n - mt (\"Maltese\")\n - gv (\"Manx\")\n - mi (\"M\u0101ori\")\n - mr (\"Marathi\")\n - mn (\"Mongolian\")\n - mfe (\"Morisyen\")\n - ne (\"Nepali\")\n - new (\"Newari\")\n - nso (\"Northern Sotho\")\n - no (\"Norwegian\")\n - ny (\"Nyanja\")\n - oc (\"Occitan\")\n - or (\"Odia\")\n - om (\"Oromo\")\n - os (\"Ossetic\")\n - pam (\"Pampanga\")\n - ps (\"Pashto\")\n - fa (\"Persian\")\n - pl (\"Polish\")\n - pt (\"Portuguese\")\n - pt-PT (\"Portuguese (Portugal)\")\n - pa (\"Punjabi\")\n - qu (\"Quechua\")\n - ro (\"Romanian\")\n - rn (\"Rundi\")\n - ru (\"Russian\")\n - sm (\"Samoan\")\n - sg (\"Sango\")\n - sa (\"Sanskrit\")\n - gd (\"Scottish Gaelic\")\n - sr (\"Serbian\")\n - crs (\"Seselwa Creole French\")\n - sn (\"Shona\")\n - sd (\"Sindhi\")\n - si (\"Sinhala\")\n - sk (\"Slovak\")\n - sl (\"Slovenian\")\n - so (\"Somali\")\n - st (\"Southern Sotho\")\n - es (\"Spanish\")\n - su (\"Sundanese\")\n - sw (\"Swahili\")\n - ss (\"Swati\")\n - sv (\"Swedish\")\n - tg (\"Tajik\")\n - ta (\"Tamil\")\n - tt (\"Tatar\")\n - te (\"Telugu\")\n - th (\"Thai\")\n - bo (\"Tibetan\")\n - ti (\"Tigrinya\")\n - to (\"Tongan\")\n - ts (\"Tsonga\")\n - tn (\"Tswana\")\n - tum (\"Tumbuka\")\n - tr (\"Turkish\")\n - tk (\"Turkmen\")\n - uk (\"Ukrainian\")\n - ur (\"Urdu\")\n - ug (\"Uyghur\")\n - uz (\"Uzbek\")\n - ve (\"Venda\")\n - vi (\"Vietnamese\")\n - war (\"Waray\")\n - cy (\"Welsh\")\n - fy (\"Western Frisian\")\n - wo (\"Wolof\")\n - xh (\"Xhosa\")\n - yi (\"Yiddish\")\n - yo (\"Yoruba\")\n - zu (\"Zulu\")\n\nIf you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!"
    },
    {
        "topic": "Different types of websites and web applications",
        "url": "https://www.youtube.com/watch?v=ZliIs7jHi1s",
        "transcript": "on today's episode we're going to cover\nthe five biggest types of websites and\nwhat you should look for when you're\ndesigning them stay tuned\n[Music]\nhey everybody what's up my name is ron\nsegal welcome back to the free web\ndesign course now while we're always\ntalking in this course about web design\nis if websites are all one thing\nobviously there is different types of\nwebsite and you need to mind and look\nfor different types of things and care\nabout actually different types of\naspects when you're designing each of\nthem so in this video i want to cover\nthe five biggest ones and what you\nshould think about and let's break it\ndown with examples as always hope this\nis going to be super helpful for you by\nthe way like this video subscribe hit\nthe bell notification a lot of awesome\nvideos coming up so make sure you're\nwith us now let's get started we're\ngoing to get started talking about\necommerce website now you're probably\nsuper familiar with e-commerce website\nbecause like everybody you're shopping\nonline we're all shopping online but i\nwant to talk about what you should be\nmindful of if you got a web design\nproject an e-commerce website what you\nshould look for what you should focus on\nwhat are the goals so obviously when\nyou're\nin e-commerce the goal of the website is\nto sell a product that means that the\nfocus of\nan e-commerce website is to have you\nlook at the product so there's basically\ntwo things that are really really\nimportant in terms of design one is how\nyou showcase the product and that means\nboth\nkind of the art direction is this a\nphotography how do you shoot the the\nproduct is it on a white background is\nit when somebody's using it is it from\nall different\nangles you you as a designer need to art\ndirect and think about the whole product\nshowcase experience so that is one thing\nthat is very unique about e-commerce\nthat you as a designer need to think\nabout how are you going to present it\nhow are you going to design the product\npage to showcase you know again all the\ndifferent variation of the product if it\nhas different colors different sizes\ndifferent angles you need to make sure\nthat you show it in the best light\npossible now the next thing that you\nshould be designing with care because\nthe purpose here on this website is to\nsell this product you want to make sure\nthat the checkout experience is as well\ndesigned this is really where the money\nis so if you design a bad checkout\nprocess you know your client is going to\nbe losing money and so you want to make\nsure that you use the best practices and\nwe're going to see this in a second in\nthe example to make sure that you know\nas many as\npeople go through this process with\ntrust they understand that the process\nis secure that you know they're gonna\nthey can\nthey can feel safe buying using this\nwebsite um let's dive into an example\nand see this so here's an of the website\nof all birds this is a brand selling\nshoes this website was designed by red\nantler\nand first thing you land on the website\nboom you see shoes on people with a\ngreat image so the focus is the product\nyou scroll down and what do you see\nshoes who's in all different use cases\nscenarios and they're trying to get you\nto either shop men or shop women now\nthis is where you know you'll see and\nyou've probably seen this before\ncategories and product grids so you want\nto see all the different products\navailable\nthis is the product page and again here\nthey're trying to show you all different\nangles let you choose your size and\ncolors and then moving on to the\ncheckout by the way this is the card\nevery e-commerce website is probably\ngoing to have a card that's run down in\nthe navigation you can always drop in\nhere so this is the checkout experience\nnow this website was built on shopify so\nthis is a pretty standard shopify\ncheckout process and what you'll see\nhere is you're this is not a single page\ncheckout they've broken it down you can\nsee it on the top to kind of like three\nsteps here and the reason is they want\nyou to put your email first because not\na lot of people finish the actual\ncheckout process so they want to make\nsure that you put your email first\nprogress and if you drop on at a later\nstage before you're putting in your\ncredit card they're going to target you\nagain they're going to email you they're\ngoing to show you ads to make sure that\nyou go back and buy this so breaking\ndown the checkout process into multiple\nsteps allows for this process and it's\nvery very important because again this\nis where the money is all right let's\nmove to the next type of website which\nis the marketing and business website\nthis is the most popular kind of website\nwhy because obviously every\nbusiness in the world which there are\nmillions and millions of all of them\nneeds a website now where not all\nbusinesses around the world are selling\ntheir services and products online like\ne-commerce the purpose of this is\nto still show who they are right because\neven if you have an offline business\npeople are going to google you whether\nthey want to know who you are what's\nyour story how you're different or\nthey're just looking for the checkout\nand not check out contact information to\nreach out to you\nthey're going to do their due diligence\nby googling you and so every business in\nthe world has to have a marketing or a\nbusiness website to tell their own story\nso here are the design challenges when\nyou have this kind of website which\nagain this is the most popular\ntype of website out there so you want to\nmake sure that first there's a very\nclear description and value proposition\nand\npresentation of the benefits of you know\nwho they are what they do why would you\nuse them how are they different right so\nthis is this has to be very very clear\nand even though i'm putting this as a\ndesign challenge because how you present\nthis is a design challenge a lot of this\nis how you write this so copywriting is\nvery very important here right less so a\nlittle bit less so maybe with ecommerce\nwhere you can visually see the product\nbut here this is about storytelling\nright so the next thing here is the\nstory you want to tell a different story\nthis even if they just came here to see\nwho they are or find your your phone\nnumber you have an opportunity now to\ntell a story that would set you apart\nthat would create some kind of an\nemotional\nconnection with your potential customer\ncreate trust and so you want to use this\nopportunity to design a story for them\nnow the one more thing to create\ncredibility is using social proof and\nsocial proof means showing that other\npeople have worked with you in the past\nbecause we as people we have a bias we\nthink that if other people have already\nworked with you and done this thing in\nthe past it's probably more safe and\nsecure right so if you show other people\ni have worked with these clients this is\nwhat my other clients are saying to me\nthis is using the psychology of social\nproof to make people believe that you\nare credible and more trustworthy and\nthey're more likely to do business with\nyou all right the last thing is even if\nyou are not selling things online you\nstill want to get people or use the\nopportunity of people visiting in your\nwebsite to some kind of a call to action\nand call to action is basically us as\ndesigners telling them what to do and\nthat can be contact us it could also be\njoin our newsletter or download our\nfreebie or something like this but we\ncan use the opportunity of people\nvisiting our website to create some kind\nof a relationship or take the\nrelationship with them to the next step\nand we do this by using a call to action\nlet's check out this example so this is\na website of a pilates studio this was\ndesigned by ardence webb and you can see\nhere first of all it was very clear this\npilates you can understand this by\nreading the headline or looking at you\nknow the visuals which are very very\nclear and note the focus here is about\nstorytelling and we're here for 35 years\nthis is the social proof we talked about\nso even though they're not selling\nanything here the the call to action is\nto book a session it's not a huge that's\nprobably not the main purpose of the\nwebsite to get people to book a session\nbut they're they're using it\nand you can see that most of it is by\nbuilding credibility by showing their\nteachers their their methods and their\nclients so this is mainly a website that\nis about building trust in showcasing\ntheir story and\nbasically showcasing their quality by\nusing good quality design they're not\nactually care if you book a session here\nor\nit's not optimized to sell it's\noptimized to create trust using design\nall right let's move on into the next\ntype of website and that is blogs and\nmedia outlets so we all as people are\nwe are\nmost likely today to consume our\ninformation through the internet right\nwe do maybe watch tv still but still\nnews and general media outlet magazines\nthat kind of stuff have are are now\nsuper super popular and that's where we\nget most of our information so whether\nthese are big\nyou know new york times big media outlet\nor some people who are just blogging and\ncreating content the the way to design a\nspecific media outlet whether it's big\nor small that you still have to focus on\nthe same things and the things are first\ncontent right these types of website the\npurpose of them their goal is to get you\nto read something okay read the actual\ncontent so the design of the actual\narticle page is going to be the main\ndesign challenge when you're designing\nthese websites the other thing is you\nknow just reading text is boring you'll\nprobably want to use some kind of an\nimagery whether it is inside of the post\nor as kind of a hero to trigger people\nto get them to be curious enough to\nclick and tease them into your article\nbut you have to work out some imagery\nsystem here and the other thing as you\ngrow as you know media outlet becomes\nbigger than just a single person writing\na blog\nunderstanding what type of content you\nhave on your website the categories\nshowcasing them and using tags or\ncategories\nto organize information and how you\ncommunicate that to\nthe visitors is going to become very\nvery important so let's dive into an\nexample so this is the website of think\nglobal help this was designed by area\n17. and you can see here first of all\nall the categories are exposed at the\ntop and you can even see where the the\ngoal here is to showcase a lot of things\nright and you can see the categories\nhere and they just want to tease you\ninto the articles now here's the article\npage now note here that the focus is on\nwhat's going on in the middle right the\nfocus here and as you scroll along you\nsee everything is becoming clean there's\nnothing here but actually reading the\ntext they'll break it down with an image\nsometimes but the main main focus here\nis how do you get people to read the\ntext the type is big\nnot too long of lines so they'll be\nsuper super readable they'll sometimes\nbreak it down with some quotes to get\npeople because people are scheming these\ndays so they want to grab their\nattention um to specific areas of the\narticle and get them to read of course\nnote the sharing buttons at the top\nbecause how do\nthese\nmedia outlets you know get more traffic\nis by having their\nposts or articles shared and going viral\nso this is something that you'll need to\nfocus on how you drive traffic from the\narticles that you currently have usually\nby these social sharing buttons all\nright the next type of website this is\nnot super popular but it is one of the\nimportant ones today is educational\ncontent right we learn today a lot on\nthe internet\nsome some of you are doing this on\nyoutube there are also places for online\ncourses and there are specific websites\nthat are dedicated to teach people so\nwhether it is online courses using\nvideos or using text or using all kinds\nof different\nmedium format getting people to consume\nyour content and actually teaching\npeople online is a different task a\ndifferent challenge design challenge\nright so what are the design challenge\nwhen it comes to an educational website\nwell first of all you want to get people\nengaged the problem with most kind of\nonline courses and teachers is that\npeople are very excited at the beginning\nthey might say oh i want to learn this\nthing but then they're like ah you know\nwhat i'm bored i'm going to go do\nsomething else because people's\nattention spans are becoming very very\nshort so\none of your challenges if you're\ndesigning an educational website is how\ndo i keep people engaged what can i do\nto surprise them what can i do to do\nsomething new to make this more\nentertaining or really cool to get\npeople excited to keep on consuming the\neducational content because you at the\nend of the day you want to make sure\nthat they've actually consumed this\ncontent so that they know the thing that\nyou want to teach them\nthe next thing is as you're trying to\nteach maybe a big subject you want to\nmake sure that there's orientation as to\nhey what do we have here right where are\nyou in terms of the course or the\nlearning process can you jump into the\nnext chapter how long there is more to\nto learn you want to make sure that\npeople are understanding this so let's\ncheck out this example of um this is an\nonline course by nonprofit this is\ncalled visions for the future and\nbasically a free kind of course and\nbasically there's an intro here and then\nyou basically see the index of all the\nchapters in this online course this is\nmainly focused on on text but no they\nhave here kind of a very cool\ninteraction of a timeline of the\ninternet so that's really fun to kind of\ninteract with um versus just reading but\nthen you move into the next chapter and\nthis is as i said this is mainly text\nbased learning but they're breaking it\ndown with interviews videos and\ndifferent types of\ncontent type to get you to keep get you\nto keep engaging and learning and\nconsuming all the content right and you\nalways have this kind of an index thing\num here on the right so you can always\nsee where you are how much do you have\nleft and if you want to navigate to a\ndifferent\nchapter all right so the last thing i\nwant to talk about is the portfolio or a\npersonal website this is basically kind\nof a subset of the business website you\ncan say but this is for for people\nversus companies where they basically\nwant to showcase their work okay whether\nit is they're looking for their next\nwork or looking for client work you have\nyour own website to present basically\nwho you are and what you know how to do\nand this is super useful for us as\ndesigners but a lot of other\ncreatives and and generally people have\npersonal website where they show what\nthey have done previously in the past\nnow in terms of design challenges the\nfirst thing is you you'll need to art\ndirect your work you can't just paste\nyour work out there so you need to find\na way to visually present this in a in a\nmeaningful way now if you're a designer\nyour work might be visual but let's say\nif you're a developer or if you're you\nknow a writer you need to find a way to\npresent your work in a visual way\nbecause at the end of the day we're\nconsuming the content visually and so\nyou want that to be\nvisually appealing\nthe next thing is this is a personal\nwebsite so whether we are again trying\nto\nfind work or trying to get clients to\nhire us at the end of the day they're\nhiring us as people and so in our\npersonal website what we want to show is\nour personality who we are as people and\nthat's very very important it's not just\nthe work it's who created the work why\nwould i work with you how are you\ndifferent are you are you funny are you\nupbeat are you you know we want to\nunderstand who you are and then also\nkind of like most business website you\nmight have a call to action depending on\nif you want to close the deal if you\nwant to get hired depending on what\nyou're trying to achieve here you'll\nprobably have a call to action now i\nwant to show you this really awesome\nwebsite from zenya rin zuk i hope i'm\npronouncing her name correctly but she's\nan amazing designer and you can see\neven just by hovering\nyou can see different types of work so\nimmediately before even scrolling you\ncan see the type of work she's doing and\npersonality and you can see her even\nthough you can see her face now she's\nusing\na video to show even though most of her\ndesign is kind of static and i don't\nknow if you can hear the music but this\nis really really cool way to very\nquickly\nshow personality and the personality\ngoes through you know the the design but\nalso the sound also the you know the\nediting of this so obviously she's so\nshowing her work in a very visual and\nart directed way everything that she can\ndo and she finishes up with the call to\naction to let's make something great\ntogether and her email so this is a\nreally really great example of a\npersonal website showing both\npersonality and work ending up with a\ncall to action really really fantastic\nexample all right so these were the five\nmost popular use cases i hope you find\nthem\nhelpful let me know what kind of website\nyou're working on right now of course\nagain subscribe hit the bell\nnotification like this video all that\nkind of stuff because i'm looking\nforward to seeing you here on the next\nvideo\nciao bye"
    },
    {
        "topic": "Structure and syntax of HTML",
        "url": "https://www.youtube.com/watch?v=HcOc7P5BMi4",
        "transcript": "Error fetching transcript for video HcOc7P5BMi4: \nCould not retrieve a transcript for the video https://www.youtube.com/watch?v=HcOc7P5BMi4! This is most likely caused by:\n\nNo transcripts were found for any of the requested language codes: ('en',)\n\nFor this video (HcOc7P5BMi4) transcripts are available in the following languages:\n\n(MANUALLY CREATED)\nNone\n\n(GENERATED)\n - hi (\"Hindi (auto-generated)\")[TRANSLATABLE]\n\n(TRANSLATION LANGUAGES)\n - ab (\"Abkhazian\")\n - aa (\"Afar\")\n - af (\"Afrikaans\")\n - ak (\"Akan\")\n - sq (\"Albanian\")\n - am (\"Amharic\")\n - ar (\"Arabic\")\n - hy (\"Armenian\")\n - as (\"Assamese\")\n - ay (\"Aymara\")\n - az (\"Azerbaijani\")\n - bn (\"Bangla\")\n - ba (\"Bashkir\")\n - eu (\"Basque\")\n - be (\"Belarusian\")\n - bho (\"Bhojpuri\")\n - bs (\"Bosnian\")\n - br (\"Breton\")\n - bg (\"Bulgarian\")\n - my (\"Burmese\")\n - ca (\"Catalan\")\n - ceb (\"Cebuano\")\n - zh-Hans (\"Chinese (Simplified)\")\n - zh-Hant (\"Chinese (Traditional)\")\n - co (\"Corsican\")\n - hr (\"Croatian\")\n - cs (\"Czech\")\n - da (\"Danish\")\n - dv (\"Divehi\")\n - nl (\"Dutch\")\n - dz (\"Dzongkha\")\n - en (\"English\")\n - eo (\"Esperanto\")\n - et (\"Estonian\")\n - ee (\"Ewe\")\n - fo (\"Faroese\")\n - fj (\"Fijian\")\n - fil (\"Filipino\")\n - fi (\"Finnish\")\n - fr (\"French\")\n - gaa (\"Ga\")\n - gl (\"Galician\")\n - lg (\"Ganda\")\n - ka (\"Georgian\")\n - de (\"German\")\n - el (\"Greek\")\n - gn (\"Guarani\")\n - gu (\"Gujarati\")\n - ht (\"Haitian Creole\")\n - ha (\"Hausa\")\n - haw (\"Hawaiian\")\n - iw (\"Hebrew\")\n - hi (\"Hindi\")\n - hmn (\"Hmong\")\n - hu (\"Hungarian\")\n - is (\"Icelandic\")\n - ig (\"Igbo\")\n - id (\"Indonesian\")\n - iu (\"Inuktitut\")\n - ga (\"Irish\")\n - it (\"Italian\")\n - ja (\"Japanese\")\n - jv (\"Javanese\")\n - kl (\"Kalaallisut\")\n - kn (\"Kannada\")\n - kk (\"Kazakh\")\n - kha (\"Khasi\")\n - km (\"Khmer\")\n - rw (\"Kinyarwanda\")\n - ko (\"Korean\")\n - kri (\"Krio\")\n - ku (\"Kurdish\")\n - ky (\"Kyrgyz\")\n - lo (\"Lao\")\n - la (\"Latin\")\n - lv (\"Latvian\")\n - ln (\"Lingala\")\n - lt (\"Lithuanian\")\n - lua (\"Luba-Lulua\")\n - luo (\"Luo\")\n - lb (\"Luxembourgish\")\n - mk (\"Macedonian\")\n - mg (\"Malagasy\")\n - ms (\"Malay\")\n - ml (\"Malayalam\")\n - mt (\"Maltese\")\n - gv (\"Manx\")\n - mi (\"M\u0101ori\")\n - mr (\"Marathi\")\n - mn (\"Mongolian\")\n - mfe (\"Morisyen\")\n - ne (\"Nepali\")\n - new (\"Newari\")\n - nso (\"Northern Sotho\")\n - no (\"Norwegian\")\n - ny (\"Nyanja\")\n - oc (\"Occitan\")\n - or (\"Odia\")\n - om (\"Oromo\")\n - os (\"Ossetic\")\n - pam (\"Pampanga\")\n - ps (\"Pashto\")\n - fa (\"Persian\")\n - pl (\"Polish\")\n - pt (\"Portuguese\")\n - pt-PT (\"Portuguese (Portugal)\")\n - pa (\"Punjabi\")\n - qu (\"Quechua\")\n - ro (\"Romanian\")\n - rn (\"Rundi\")\n - ru (\"Russian\")\n - sm (\"Samoan\")\n - sg (\"Sango\")\n - sa (\"Sanskrit\")\n - gd (\"Scottish Gaelic\")\n - sr (\"Serbian\")\n - crs (\"Seselwa Creole French\")\n - sn (\"Shona\")\n - sd (\"Sindhi\")\n - si (\"Sinhala\")\n - sk (\"Slovak\")\n - sl (\"Slovenian\")\n - so (\"Somali\")\n - st (\"Southern Sotho\")\n - es (\"Spanish\")\n - su (\"Sundanese\")\n - sw (\"Swahili\")\n - ss (\"Swati\")\n - sv (\"Swedish\")\n - tg (\"Tajik\")\n - ta (\"Tamil\")\n - tt (\"Tatar\")\n - te (\"Telugu\")\n - th (\"Thai\")\n - bo (\"Tibetan\")\n - ti (\"Tigrinya\")\n - to (\"Tongan\")\n - ts (\"Tsonga\")\n - tn (\"Tswana\")\n - tum (\"Tumbuka\")\n - tr (\"Turkish\")\n - tk (\"Turkmen\")\n - uk (\"Ukrainian\")\n - ur (\"Urdu\")\n - ug (\"Uyghur\")\n - uz (\"Uzbek\")\n - ve (\"Venda\")\n - vi (\"Vietnamese\")\n - war (\"Waray\")\n - cy (\"Welsh\")\n - fy (\"Western Frisian\")\n - wo (\"Wolof\")\n - xh (\"Xhosa\")\n - yi (\"Yiddish\")\n - yo (\"Yoruba\")\n - zu (\"Zulu\")\n\nIf you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!"
    },
    {
        "topic": "Tags for creating headings, paragraphs, lists, and tables",
        "url": "https://www.youtube.com/watch?v=ulv_q6-b7uI",
        "transcript": "Guys we saw a lot of things in the last video\nAll I'm going to say to you guys here today is\nthat while accessing this playlist, just open the VS code\nand create a new file, because HTML is not a big deal.\nThat's why we are not going to waste too much time.\nBut yes, I will give you an understanding\nbecause I have promised that the course will be for beginners.\nSo here I will quickly die this exclamation mark\nAnd here you guys are watching Emmet Abbreviation,\na lot of people have said what is this Emmet\nSo here as soon as you write this excla mation mark\nand hit enter\nSo, look here it has automatically given me some auto complete\nAnd as you guys can see here\nI will tell you people here\nthat it is better to do this than to ask such questions.\nYes, do a google search\nSee, Emmet is a set of plug-ins for text editors\nthat allow for high-speed coding and editing in HTML\nSo, what is Emmet doing?\nEmmet provides help to you people\nwhenever you are writing HTML\nit provides you a medium to write fast HTML.\nJust understand this and it comes built into the VS code.\nSo, you have the VS code, then you have Emmet\nbecause the VS code people have adopted Emmet\nand Emmet comes built into the VS code.\nSo, I have put a boiler plate here\nand along with installing the boiler plate\nI will also write the title here quickly.\nSo, I write\nHeading Paragraphs and Emmet\nOk\nTo save Ctrl + S\nAnd as soon as I live server, which will click on go live\nMy live server will start as you guys see here\nAnd here i just set the title and nothing more\nAnd for the first time here\nwe are going to write something in our body\nSo, I am very excited.\nI would say you guys just write h1\nand you guys will get a suggestion\nhit enter and write in it\nwrite in it\nHarry, write my name, ok\nthen type a p and hit enter and type in\nThis is Harry, okay\nAnd you guys will say what are you getting written Harry brother\nwhat is this p letter, what is it h1\nSo, h1 is our heading tag\nAnytime I talk about tags\nthen a tag ends with an opening tag and a closing tag.\nopens with the opening tag\nh1 is the opening tag and this is the closing tag here\nAnd as soon as you see I am clicking here\nthen I am getting arrows\nSo, I would like to do h1 to h2 so it will be like this\nBut here I'll just put h1\nAnd I will show you people how my content came\nSo, under the heading I have written a few paragraphs\nNow I wrote h1, h1 is the biggest heading\nAnd we have, we have h1 as well as one we have h2,\nwe have h3,\nwe have h4,\nbasically, we always have till h6\nSo here I will show you people till h6\nand look here how the size varies\nwatch it, it gets bigger to smaller\nAnd a paragraph is a paragraph\nSo, this is our paragraph tag\nAnytime we have to write a paragraph, I will write p here\nIf I have to write a new paragraph, I'll write it here\nthis is new paragraph\nAnd here you guys see\nthis new paragraph has come by writing\nI'll just delete this paragraph, ok\nAnd here I will tell you people\nthat whenever you people are writing your HTML page,\nany website you are making.\nThere should be only one h1 text in it\nAnd it should not happen\nthat you are using headings to make the text bold\nthis is absolutely wrong.\nHeading means heading, so use it as heading\nBecause if you do not do this\nthen your search engine optimization will be bad,\nSEO will be bad.\nThat's why we'll use the heading\nwhere we actually want the heading.\nNow here from h1 to h6\nI showed you how the size varies\nI should write h6, yes, it is correct now\nSo, after doing this,\nyou guys look here\nvery well I see the size being varies from h1 to h6, okay\nNow here I want to show you the power of Emmet\nSuppose I want to produce dummy text\nNow as I want 10 lines\nEither I'll copy from the internet, or I'll do this\nAnd it's too messy to do\nBut what is in Emmet if you write such Lorem\nAnd after Lorem you guys write as if 4 and hit enter\nSo, 4 words it gave me by inserting\n1, 2, 3, 4\nAnd if I do Lorem40 and hit enter\nthen look at this it gave me 40 words inserted\nAnd to remove this horizontal bar i will go to Command Palette\ntype toggle word wrap here and hit enter\nlook this my text will not fall out now\nSo anytime you want your text not to fall out\nClicking the Gear,\nClicking the Command Palette,\nType the Toggle Word Wrap and select it\nIf it is copying then it will not come out\nand if it is not coming out then look at the text\nand you will get the horizontal scroll bar\nIts shortcut was also written their Alt + Z\nalthough I did not remember\nAnd here Alt + Z does not work then we can do like this\nI have saved here with Ctrl + S\nTo save to do Ctrl + S\nAnd look here obviously our page will be updated\nAnd look here the words that were here are here\nAnd if I do not write this here and do Lorem404\nthen 404 words will be inserted\nand look at this such a big paragraph has come here\nSo, here's Emmet's power\nRight now, I need only 4 words\nI am working with Lorem4 now\nSo, what did I do here\nPut a heading, put a paragraph, okay\nAnd as you guys see here,\ntook all the words I wanted, with the help of Emmet.\nNow suppose I want to insert 4 paragraphs\nthen what will I do\nI will write p*4 and hit enter\nSee I have got 4 paragraphs\nSo, I will then press something like first,\nsecond, then i will press tab,\n3rd, then I will press tab\n4th, so in this way\nI can bring multiple elements of the same type in this way\nSo here you can see\nfirst, second, third, fourth these are all paragraphs\nAnd with Emmet's help you guys can bring it, right\nSo, this was Emmet's power\nAt the same time, you guys see one thing\nwhenever I write p like this and i will close it\nsee automatically VS code has given a closing tag\nBecause p is a tag that needs to be closed\nSo here the vas code is so smart\nthat it understood me\nand closed the closing tag\nVery nice VS code\nAnd here I insert some more words by writing Lorem34.\nAnd look here, it looks like this right now\nand I will talk about some more tags\nLook nothing happens in HTML, only tags happen.\nAnd along with tags there is attributes as well, right?\nLike h1 is a tag,\nh2 is a tag,\ntitle is a tag,\nmeta is also a tag\ncharset is an attribute of it\nSo, this is just a collection of tags\nThere are only a few selected tags which are important\nSo, there is no need to memorize at all how many tags are there\nremember yourself as you will make a website, okay\nKeeping this point in mind, let's move on\nAnd now what we will do here is\nto see about strong tag here\nSo, if I write strong here\nOk\nstrong\nso, it suggested me\nI write this is strong inside it\nAnd I'm here to show you what effect it had\nin this is strong it will make it bold\nOk\nAnd if I put an em tag here along with strong\nem means emphasis\nSo, i write here, This is emphasized\nThat is, the one who has this portion has\nto show it in a different way.\nSee, This is emphasized\nlook, by default it's made it in italic way\nbut with CSS we can change\nWhat does the content inside our emphasis tag look like\nand what does the content inside our strong tag look like?\nFor now, it looks bold\nI zoom in to see the page a bit\nBut right now, we are not using CSS\nthat's why the pages are to be seen ugly to us.\nSo, you don't understand why the pages are appearing ugly\nPages will look ugly now, will look useless\nBut in the coming time when I will tell you CSS\nand we will decorate this page with the help of CSS\nThen this is exactly what good websites are like\nAs if taking an example of a very good website\nIt would look like this, okay\nand google.com looks fine too\nand youtube.com also looks fine too\nAnd there's a lot of examples like this, right\nAnyways,\nNow what I'll do here is\nthat I'll be back on this page\nand I'll show you next\nNow see if you have to take a line break how do you get it\nI'll show you one thing first\nI'll write here first, and I'll hit enter\nthis is a new line\nNow you guys must be thinking that this first will come first\nand this this is a new line will come in a new line\nBut if you show people here then, first this s a new line\nThere is no new line after the first, why did this happen?\nDo one thing and add new lines\nnow let's see whether it has come or not.\nstill not come\nLet's reload the page, still not come\nSo, what's wrong\nNo, there's nothing wrong\nWhat happens in HTML is\nthat whatever extra space you add,\nHTML ignores it, right?\nAnd if you need space, line break\nthen what you have to do\nYou have to use br tag\nAnd I have written this br tag here\nso, there will be a line break here.\nBut you people will say, Harry brother, br tag is written here\nbut where is its closing tag and where is its opening tag?\nSo, this is a br tag, this is a self-closing tag\nUnlike h1\nh1 is not a self-closing\nThe br is a self-closing tag\nthat's why it closes automatically, no need to close it\nJust put it where a new line is needed\nand there the line breaks\nLook, we put a br and a new one has come\nIf I will put 2-3 br more\nLook, I copy and put a lot of br\nSo, I will get the same number of lines breaks\nSee if I want so many lines, then I have applied br, br\nBut what is it that to bring line breaks by br, br\nit is not a good practice\nand I will tell this further when we will talk about the CSS.\nFor now, we can apply the br\nwhenever we have to break the line which is there.\nand start from the second line below\nthis is our br tag\nAlong with the br there is a hr\nAnd hr means horizontal rule\nAnd the horizontal rule is also a self-closing tag\nAnd what it does is make a ruler\nLook that hr I wrote it, it made a straight line here\nAnd if you want to insert lines like this then you can\nand hr helps you in that.\nNow here I would like to tell you\nthat there are bold italic tags inside HTML too, ok\nbut since HTML5 came\nIt's not recommended that you guys should use them.\nAbsolutely you can use them\nNo one can stop you from doing the thing that exists you.\nLike i write here, bold is here\nAnd you guys see here bold is here got bold\nYou guys should make it strong instead of bold\nand em tag it instead of italic\nAnd if you want to bold italic anything else, then use CSS\nBut just to let you know that bold italic tags are there.\nI am using bold italic here\nAnd I'll close it over here like this\nAnd look here italics have also come, okay\nSo, there are bold italics too, but not recommended\nTo make modern websites,\nyou should do strong, use em, okay\nNow here we have seen br, hr, they are self-closing\nAlong with that I told you here in VS Code\nthat how you guys have to create multiple instances\nof any element using Emmet\nLike here I am writing div.\nAnd or div, I haven't told you yet\nIf I will write p*34 then 34 paragraphs will come\nSo, this you guys can do\nand here you can replicate very well without copy-pasting things\nEmmet gives you a lot of power\nDuring this video i will tell you the features of Emmet\nI will keep telling you people during this series.\nAs I use the features\nI just want you guys to keep listening,\ntaking notes and practicing with me.\nAnd definitely you people will also know these techniques\nI will tell you some such techniques\nwhich you might hardly find in any book.\nNow as if you are writing something\nas if I wrote a paragraph here\nI hit enter, I write\nThis is a paragraph\nNow I don't want the mouse to use it\ni want to keep my hand on the keyboard\ni come to the new line\nSo, I'll press Ctrl + Enter\nand I'll come to the new line\nCtrl + Enter\nOk, i'll write it here\nctrl + enter to jump into the new line, Ok\nOops\nctrl + s for save\nNow here if I had made such a new line,\n then look at it, it would have broken\nI do not want my paragraph to be broken\nctrl + enter then i will come in new line\nSo, hope you guys have understood\nI have also given a link here which is what I have used\nAnd here I will also write one more time\nLorem23 for 23 words dummy text\nand write it well\ndummy text with 23 words, ok\nor here,\nfor dummy text with 23 words\nCome on, now you guys will understand here\nSo, hope everything is cleared\nIf you guys like these videos, then definitely like\nAnd make sure to access and save this playlist by clicking here\nBecause that's where I'm going to update everything.\nAnd here I will take this course very far\nI Hope You People Like This Videos\nThankyou so much guys for watching this video\nAnd i will see you next time."
    },
    {
        "topic": "Creating meaningful and accessible HTML documents",
        "url": "https://www.youtube.com/watch?v=bOUhq46fd5g",
        "transcript": "in this tutorial we'll discuss why and\nwhen to use semantic HTML elements over\ndivs alright so I just have a couple of\nexamples for you but first of all why do\nwe even want to use semantic tags\ninstead of divs well first of all it's\neasier to read and scan the HTML if it\nhas been properly structured with these\nsemantic tags and I'll show you why in a\nsecond it's also better for SEO it makes\nit easier for those search engines like\nGoogle to come to your website and\nproperly index all the contents that's\non there which in turn will make it more\nlikely that you rank higher in their\nsearch engine results right so you get\nmore traffic and it's also better for\nscreen readers or assistive technology\nand to properly you know categorize and\nindex what's going on on your websites\nonce it's also better for accessibility\nthese are the three main reasons for why\nwe want to use semantic tags so let me\nactually just give you an example of\nwhat a very typical HTML boilerplate\nwould look like so this is currently\nbasically an empty HTML file now\nglobally speaking you're gonna have a\nheader usually a main section and a full\nfooter section and so these are already\nsemantic tags because you could also use\ndivs right you could use divs this\nstands for divider right you could you\ncould use that practically they would\nwork the same but in practice if you\nwant to use semantic tags this is what\nyou're gonna get so header is usually\nfor introductory content you know the\nlogo like the introductory links the\nmain is really for the the dominant\ncontent on the page and the footer is\nfor you know maybe some other links like\nterms and conditions privacy policy not\nreally important stuff going on there so\nin the header then typically you also\nhave some kind of nav so the nav is\nreally for the most important links on\nthe page or the like the most important\nnavigation on the page typically people\nstructure it like this so you're gonna\nhave a list of links so in a list we\nhave Li so it's going to be quite nested\nhere and then in here you're going to\nhave the actual anchor tag and so\nusually you're gonna have a bunch of\nlinks here and then maybe you also have\nlike a logo right a logo that could be\njust an image let's say and so you would\nhave an image in the in the header and\nthen you would have a nav right so it's\nquite nested here but this would be a\npretty typical semantic structure in the\nheader then in the main the dominant\ncontent on the page usually you're gonna\nhave a bunch of sections as it's called\nright so in practice a lot of people use\ndiv but it's better to use section and\nI'll show you some practical examples on\nreal world websites in a second but\nusually the main consists of a bunch of\nsections\nright and then in the section you can\nhave a heading right so maybe an H1 or\nH2 and you would say something like\nabout us maybe or maybe some kind of a\nbenefit section let's do this it's a bit\nmore realistic and then perhaps a\nparagraph section with a bunch of words\nand that will be a section and then you\nwould have another section benefits\ninstead of benefits we would have\nsomething like um how it works\nright and maybe some paragraph with a\nbunch of text\nso in practice what you see a lot of\npeople do is they use div hair but it's\nbetter to use section so why section\ninstead of div and I'll show you that in\na second on real world exercise websites\nbut in practice what you also have in\nthe main sometimes is have some kind of\nsidebar or some related content that's\nnot really the not really something that\nshould get the focus\nbut you could have something like an\naside in here as well that's also what\nyou see sometimes so this could be for a\nsidebar or something like that you're\nalso going to see the article tag\nsometimes it's a bit trickier this one\nthis one is more suitable for if you can\npull out this content and place it\nsomewhere else and it wouldn't lose any\nmeaning right so this is a bit more rare\nand then in the footer usually\num you know you're gonna have a bunch of\nlinks maybe some text but here you would\nalso use that nested structure again\nexcept now you wouldn't use the nav now\nso nav is typically more common in the\nheader because this is actually meant as\nyou know a really important that of\nnavigational links or you know\nnavigational section if it's really\nimportant this probably shouldn't be in\nthe footer alright so here you wouldn't\nsee the nav tag alright so this is\nreally common uh a you know semantic\nsetup that you would see and now we're\ngoing to look at some actual websites to\nsee how they've done it and I'll show\nyou some of some examples for those more\nrare tags as well like article and aside\nall right so this is the stripe website\nbut honestly I could have picked any\nlanding page because they're they're all\nquite similar so we can inspect here and\nwe can see how they've marked up their\nHTML so in the at the top we indeed see\num a header here right so here they have\na logo they have a bunch of important\nlinks and they have this sign in button\nright so there's a header for them and\nthey have a bunch of divs in here in\nhere because sometimes you need to use a\ndiv simply for stylistic purposes let's\nsee if we can find a good example here\ndoesn't look like it maybe we'll find a\ngood example of that later but here we\nhave a section so this is what they call\nthe the hero section right really the\nthe the the thing you look at first when\nyou when you come to the website this is\na section because all of this is related\nto each other it's like a way to\nintroduce their company or their product\nit's all related to each other this\nheading and this text and this this\ngraphic it's all uh it all has the same\nsemantic purpose and that's why it\nshould be a section and not just a div\nright so if it would not be related to\neach other and you would only need some\nkind of element just for layout purposes\nfrom stylistic purposes you would use a\ndiv right then we get to this section\nhere and let's see so they used a\nsection tag again and this is actually\njust a bunch of images actually right\nthese images well what what it\nrepresents is the type of companies that\nuse as this is like credentials for them\nand because each image here belongs to\nthat same semantic purpose they all\nshould be in a section tag and not in a\ndiv because a section means that the\ncontent in there is related to each\nother it has the same semantic purpose\nso it's better to use the section tag\nnow why not use the article tag here but\narticle tag means that I should be able\nto pull this out of here place it\nsomewhere else and it would still have\nthe same meaning or it would still be\nclear what it means but if I would take\nthese images out of here and I would put\nit somewhere else on a different website\nor somewhere else it would just be a you\nknow collection of images it wouldn't\nmean anything it wouldn't mean the same\nas it means here which is that these\ncompanies use stripe right so this only\nmakes sense in the context of the\nstriped website and therefore this is\nnot the article tag but a section tag\nalright so then if we go down you're\ngoing to see a bunch of other sections\nthey have that showcase why people\nshould use right so they want to\nconvince the viewer to use strap so here\nlet's see this section it has to do with\nan overview of their product and it's a\nsection tag because all of this in here\nis related to the to it to a an overall\nsemantic purpose right so this heading\nis not some stand-alone random piece of\ntext right it's it it's a heading that\ndescribes everything else that's also\npart of this and so it's all related to\neach other right that's really what it\ncomes down to with Section versus div\nright this is a section this is a\nsection and usually it's quite easy to\nidentify them on these landing pages but\nthis is a really typical example of\nsections versus divs all right now let's\ntake a look at the mdn website the\ndeveloper.mozilla.org so if you go to\none of their articles you can see that\nwe have the actual content we have some\nheader on the top and then we also have\nthis sort of sidebar let's see how they\nhave marked this up so here we can see\num this is the main content so you're\nonly gonna have one main tag on your\npage because it's for the most dominant\ncontent on the page and they've used an\naside tag for this sidebar here right\nand actually you could make the argument\nthat the aside never should be in the\nmain because it's not really part of the\ndominant content right so\num you could make that argument and then\nin the main we see an actual article tag\nhere so here they actually chose article\ninstead of section so article is\nactually a bit more like there's an\nadditional requirement that's how you\ncan think of it the section just means\nthat everything in there is related to\neach other or it has the same semantic\nPurpose with article the same has to be\ntrue but I also need to be able to take\nthis out of here and put it somewhere\nelse and it should still make sense and\nthat's actually the case here I could\ntake out this all of this text here you\ncould put it somewhere else but it will\nstill be the same it would still have\nthe same value essentially right so it\nwill still be clear what it is and\ntherefore it should be an article tag\nanother example would be if for example\nthey had some kind of job posting here\nright maybe they they have some kind of\num you know job post that would also be\na good candidate for an article tag\nbecause I could take the job post out of\nthis website I could put that somewhere\nelse maybe on like um a jobs website and\nit would still make sense there right I\ncould put it on any other website and it\nwould still make sense that article tag\nis self-contained it explains itself it\nyou can you can look at it you can read\nit you can consume it and it's clear\nwhat it is what its purpose is what it\nrepresents and therefore you want to use\nan article tag now this is quite rarely\na site and article tags you don't use\nthat much you don't use it often in most\nof your projects you're gonna use the\nsection tag and a bunch of divs okay so\nhere they also have some kind of\nnavigation here so this is maybe\ninteresting to look at as well so here\nthey use the section for that actually\nthey use a size for this overall piece\nand then they use a nav tag again and\nthat's right so you're not only going to\nsee a nav in the header but also\nsometimes outside of there if it's\nimportant set of navigation which it is\nright so this like a table of contents\nisn't important uh piece of navigation\nso you could opt for using the nav tag\nthere this all may seem a little bit\nconfusing and overwhelming in practice\nyou know if you would if you didn't use\nnav here but you used just an UL perhaps\nor maybe a section instead of an aside\nall of that is generally fine in\npractice\num you know it it doesn't matter that\nmuch for readability of your HTML the\nsearch engines don't really care that\nmuch I mean they must be pretty Adept at\nthis point to dealing with with\nunstructured HTML because most websites\nout there are quite unstructured so all\nof this doesn't make that much sense and\nyou know to to spend a lot of time and\nenergy on but you know if you want to be\nprecise about it that's how you would do\nit now I want to give you one example of\nwhere you would use the div instead of\nthe section right because now we've seen\na couple of examples of where to use\nsomething else than this so then where\nshould you use actually where should you\nactually use divs well basically\neveryone else so here for example and\nthis is one of my projects from my CSS\ncourse here we have a bunch of like we\nthere's some uh well these are\nbreadcrumbs and then we have some other\nbutton on the other side now this is not\nreally related to each other they just\nstylistically speaking in the same uh\nwhite bar here but they have different\num purposes right they don't have\nthey're not they don't belong to the\nsame semantic purpose but they are still\nstylistically in the same bar here and\ntherefore you probably need some kind of\nelement in your HTML to get the proper\nlayout so in that case\num you want to use the div actually\nright so here there's some kind of info\nbar but they're two different things\nthis is breadcrumbs I use the section\nfor that because the text the text in\nthere they all belong to the same uh\nwell overall semantic uh goal and this\nis a button tag but they are two\ncompletely different things they don't\nhave anything to do with each other but\nI still needed some kind of element\nmonth to get this layout right so here I\nwould I would not use section I would\nuse a dip by the way if this was helpful\nI'd really appreciate it if you could\nlike And subscribe also check out my\ncourses on CSS and JavaScript if you\nwant to take those skills to an advanced\nlevel because in there we will build\nsome beautiful real world projects from\nscratch so you can see how everything\nfits together and really Master CSS or\nJavaScript and I will also release other\ncourses from like react and node.js so\nif you want to be notified then make\nsure you are subscribed to the email\nnewsletter you can find the link in the\ndescription thanks for watching and I\nhope to see you soon"
    },
    {
        "topic": "Introduction to CSS and its role in styling web pages",
        "url": "https://www.youtube.com/watch?v=1PnVor36_40",
        "transcript": "hello everybody in this video i'm going\nto teach you everything you need to know\nabout css so you can turn your bland\nhtml into something beautiful\nif you do not already know html then\ncheck out my introduction to html series\nwhere i walk you through everything you\nneed to know about html\ni will not be covering every property or\noption that css has to offer because\nthere are hundreds but i will be\ncovering all the concepts you need to\nknow in order to get started with css\nlet's first get started with what css is\na common misconception is that css is a\nprogramming language but that is\nincorrect\ncss is actually a styling language which\nis used for modifying the appearance of\nthe content of web pages\njust as html is used for the content of\nweb pages css is used for presentation\nof that content\ndue to the fact that css is used for\npresentation and design there are many\nways to do the same thing\nhtml on the other hand has set elements\nfor most things which means that there\nis usually only one correct way to do\nthings in html\nthe ability to do things in many\ndifferent ways is the reason most people\neither love or hate css\ni personally love it since it lets you\nexpress your creativity and gives you\nfreedom to do things how you want\nnow that we understand what css is let's\ndive into the details of how to use css\nfirst we need to discuss the syntax of\ncss\nluckily the syntax is straightforward\nand easy to understand\nthe first part of the syntax is the\nselector there are many different types\nand combinations of selectors which\nwe'll talk about later but for now all\nyou need to know is that a css style\nstarts with a selector to apply the\nstyle to\nnext comes an opening and closing curly\nbracket that are used to denote the\nstart and end of the styles that apply\nto the selector\neverything in between these curly\nbrackets will be styles that are applied\nto the html elements that match the\nselector\nlastly inside the curly brackets is one\nor more property value pairs\neach of these pairs defines a property\nsuch as color font size width etc and a\nvalue for that property\na basic example of the css syntax will\nbe setting the text color of all h1\nelements to blue\nnow that we have the syntax out of the\nway let's focus on the various selectors\ncss contains many different types of\nselectors but the main selectors are\nelement class and id selectors\nwe've already seen the element selector\nin the previous example of turning all\nh1's blue\nany html element can be used as a\nselector and this style is defined for\nthat selector will apply to all html\nelements of that type\nby far the most common and useful\nselector is the class selector\nthe class selector lets you select html\nelements based on their class attribute\nif you remember from my html series all\nhtml elements can have attributes\nassigned to them such as the href for an\nanchor tag\na class is just an attribute that all\nhtml elements can have and is used with\ncss to distinguish elements for specific\nstyling\nthe class attribute can also have\nmultiple different classes in the same\nattribute as long as they're separated\nby a space\nin order to select an element by class\nwe need to use a period before the class\nname as the css selector this period\ntells css that whatever follows is a\nclass name and not an html element name\nclasses are the most common selector\nused because they are amazing for\ncreating reusable components\nfor example if you have a site with\nthree different types of buttons that\nall share the same basic styling but\nhave a different color you can use one\nbase class of button to define all the\nstyles shared between all buttons\nyou can then have three other classes\nthat define the specific color for the\nbutton\nthen all you need to do is add both the\nbase button class and your color\nspecific class to your html button\nelement and i'll have all the styles\ndefined in the base button class and the\ncolor specific class\nthe last comment selector is the id\nselector\nthe id selector is very similar to the\nclass selector in that it is an html\nattribute but an element can only have\none id while it can have multiple\nclasses\nan id also should be unique across the\nentire web page but html does not\nactually enforce this\nto use an id as a selector you simply\nneed to use a pound sign followed by the\nid name much like how classes use a\nperiod followed by the class name\nour previous example is impossible to do\nwith ids since ids are supposed to be\nunique across the webpage and each\nelement can only have one id\nbecause of this i very rarely use ids\nin 99 of all my css i use class\nselectors and avoid using html and id\nselectors as much as possible\non top of having many different\nselectors css has multiple different\nways to combine selectors together to\nmake your selectors more specific\nthe first way to combine selectors is to\nspecify multiple selectors that an\nelement must have in order to be styled\nto do this you need to write the various\ndifferent selectors together with no\nspacing between them\nfor example if you wanted to select all\nh1 elements with the class large heading\nthen you would write the following\nselector\nif you wanted to select an element with\nthe id big blue and both the class large\nand blue then you would use this\nselector\nall html selectors can be combined in\nthis way as many times as you want to\ncreate specific or general rules\nanother way to combine selectors is to\nuse multiple selectors to specify an\nancestor of an element\nto do this you will put a space between\nthe ancestor and child selector for\nexample to select all p tags inside a\ndiv you simply need to use the following\nselector\nthis will select all p tags that have a\ndiv as their ancestor even if the div\ntag is not the direct parent of the p\ntag\nthis combination of selectors can be\ncombined with the previous combination\nof selectors to make even more specific\nselectors for example to select all h1\ntags with the class of brown to have a\nheader with the class main header as\ntheir ancestor you would do this the\nlast common combination of selectors is\nwhen you want to share a set of style\nproperties and values between multiple\nselectors\nif you have a class big and another\nclass large that both have the same\nstyle properties and values then you can\ncombine these selectors into one\nselector by using a comma between the\nselectors this allows you to avoid\nduplication\nit is important to note that all the css\ncombination selectors can be used\ntogether to create even more complex\ncombinations if needed there is also one\nother form of selector the everything\nselector that is used to select every\nelement on the entire web page\nthis selector is defined as the asterisk\nsymbol and is only really used to set\nsome defaults for your entire webpage\nsuch as font family the last thing we\nneed to discuss before writing some css\nis how to load the styles we write into\nour html page\nthere are three main ways to do this the\nfirst and by far worst is to use inline\nstyles an inline style is css that is\nwritten directly inside an html element\nand thus does not need a selector\nthis is done through the use of the\nstyle attribute this is a terrible idea\nthough since html is meant for the\ncontent only and mixing css styles into\nyour html elements adds presentation to\nyour html which is meant for css files\nit prevents us from reusing those styles\nanywhere else since they are written\ninto the actual html element\nlastly depending on the styles you use\ninline your page may load slower\nthe second option of using the style\nhtml element is slightly better but\nstill a bad idea\nthe style element is an html element\ndefined in the head and formatted\nexactly like a css file the problem with\nusing the style element though is that\nthe presentation of the web page is\ndefined in the html file and not a css\nfile the styles you define in the style\nelement are also only available on the\npage you define them and are thus not\nreusable across multiple pages\nthe final and best way to define css\nstyles is to use a separate css file and\nlink to it from the html\nall the styles for the entire webpage\ncan be defined in one or more css files\nand they can be added to any web page by\nusing a simple link element inside the\nhead\nthe link element is a simple element\nthat can be used to link files to the\nhtml and its main use is to link css\nfiles the link element is also an empty\nelement that uses the rel attribute\nwhich stands for relationship to define\nthe relationship between the linked file\nand the html document\nin the case of css the rel attribute\nwill be stylesheet since css is a\nstylesheet for the html\nthe only other attribute that we need to\ndefine is the href attribute\nthe href attribute works exactly the\nsame as the href attribute of an anchor\ntag and should point to either your css\nfile or the url of another person's css\nfile\nusing external css files like this is\nthe best way to use css since it\nseparates the presentation and contents\nof websites and allows reusability of\nstyles across the website\nnow that we have an understanding of how\nto write css styles and select specific\nhtml elements let's jump into a live\nexample of these concepts\nas you can see on the left i have a\nsample html page open up inside a visual\nstudio code and on the right i have this\npage opened up in google chrome using\nlive server to get started let's use an\ninline style on this h1 element to turn\nthe text a different color so we'd use\nthe style attribute here\nand we would set the color value since\nthe color property is used to change\ntext color and we'll set it to a color\nof red for example\nif we save that as you can see our text\nwill change to red but as we know using\nthese style attributes is a bad idea\ninstead let's use the style tag inside\nof the head\nand use the h1 selector\nto select the h1 element and we'll all\nset the color to blue this time\nsave that and we can see the color is\nblue\nbut again we know that this is not the\nmost optimal way to do it instead let's\ncreate a new file called styles.css\ninside the styles.css file let's put our\nh1 selector and set the color to green\nnow in order to get this style to load\nin our page we need to use a link tag\nhere\nwhich the rel is going to be stylesheet\nand the href\nis going to point to that styles.css\nfile\nnow if we say that you can see that our\ntext changes to green\nif we were to move this link tag above\nour style tag for example though you see\nthat our text is still blue\nthis is because css takes whatever the\nlast defined style is for an element so\nin this case the h1 setting the color to\nblue is below the import of this link so\nour text is blue if we remove this style\nthough\nyou'll see that when we save it our text\nturns back to green because it's loading\nthis style in here\nwe can show that example again by\nputting the h1 here with a color of red\nthis time and now when we save that this\ntext will change to red because this\nselector is after this selector\nnow that we've finished importing all of\nour styles let's dive a little bit more\ninto how the styles are actually applied\nto do this let's add a class to this h1\nand we'll give it a class of blue\nand inside of our styles.css\nlet's add that blue class selector in\nhere and give it a property and value\nfor color to be blue\nnow when we save it we see that our\ncolor changes to blue\nbut you would think that the color would\nbe green since h1 selector comes after\nthe blue class selector\nbut css actually\nports different values onto these\ndifferent selectors element selectors\nare the lowest level selector which\nmeans that they're always overridden by\nother selectors such as the class\nselector\nthe class selector is then the next in\nline\nand it is overridden only by the id\nselector so in order the id selector is\nthe most important then the class\nselector and then the element selector\nso if we're to look at an example\nwe have an id\nhere\nclass\nand another class\nthis selector would have a higher\nspecificity\nthan this selector that had\nthree classes\nthat is because there's an id here so\nthe id setting has a value of one and\nthen we have two classes here so the\nclass value would have two but this was\nthree classes and no id so since there's\none id on this one it would be a higher\nspecificity so anything in here would\noverride anything in here\nessentially the easiest way to look at\nthis is to first count the number of ids\nin the selector\nif the number of ids is equal then go on\nto the number of classes in the selector\nif the number of classes is equal then\nfinally go on to the number elements in\nthe selector\nif that is also equal then whichever one\nis defined last is going to be the one\nthat's applied\nin any case if the id number class\nnumber or element number is greater when\nyou get to that step of adding that is\nthe style that will be applied\nalso\nif we have an inline style so for\nexample in here if we put style and we\nset the color to be\nequal to\nblack for example\nthis will override everything\nanything defined in line like this\noverrides everything in your style sheet\nno matter what\nmost html elements have a set of default\ncss that is applied to them as you can\nsee the h1 tag over here has margin on\nthe top and bottom of it\nand this p tag has this black text that\nis because the text color is inherited\nfrom whatever the parent is\nthis is apparent if we style the body\ntag in here and we set the color to be\nred\nthis will change all the text in our\nentire application to be read that is\nunderneath the body tag unless otherwise\nspecified such as this blue selector\nhere that is specifying the h1 should be\nblue\nthis is because the default value for\ntext color is inherit which means it\ninherits whatever its parent's value is\nsince we've been talking about color so\nmuch let's dive into the different ways\nthat you can define colors in html\nby default you can use these simple\ncolor selectors of red green blue pink\nand various other different colors but\nsometimes you want to get more specific\nin these very generic colors\nin order to do that\nwe'll use hexadecimal\ncolors in order to set these a\nhexadecimal number is similar to our\ndecimal system that goes from 0 to 9 but\nhexadecimal goes from 0 to 15.\nin order to represent these numbers that\nare above 9 hexadecimal uses the letters\na b c d e and f\nso if we wanted to write 15 in\nhexadecimal you would write the pound\nsign followed by an f which would be 15.\nso\nfor using colors this hexadecimal is\nbroken up into three distinct parts of\ntwo digits each so we have the first two\ndigits\nthe second two digits and the third two\ndigits\nand each set of these digits\nrepresents a different color so the\nfirst two digits represent red\nthe middle two right digits represent\ngreen\nand the last two digits represent blue\nand this is on a scale from zero to\ndouble f where double f is equal to 255\nin decimal\nso the smaller the number the less of\nthat we have so if\nthis was 0 0 then that means there is no\nred at all\nif this one was ff as it is that means\nthat we have all the most amount of blue\npossible so if we wanted to get just\nblue we would use zero zero for red\nzero zero for green and then f for blue\nand if we save that we get a blue color\nthis is a little bit difficult to wrap\nyour header around so there's other ways\nto define colors in css one of those\nways is using rgb\nrgb is just like the hexadecimal version\nbut it's broken out into three distinct\nsections so we have red which goes\nbetween 0 and 255 and this is in decimal\nso we can just write 255 if we want\nentirely red\nand the next value is going to be green\nagain so we can just do 255 and then the\nlast one is going to be blue and let's\njust say that's zero so if we save that\nwe get yellow\nand then another way if you wanted to\nhave a partially transparent color is\nyou could use rgba\nwhere then we have one more value that\ngoes between zero and one which is going\nto be the transparency so if it's one it\nmeans that it is fully opaque and if it\nis 0 then it is going to be entirely\ntransparent and some combination in\nbetween there means that it is partially\ntransparent\nthis partial transparency can also be\nachieved by using the\nhexadecimal version of the color\nand we will just have an extra two\ndigits at the end of the hexadecimal\nwhich represents the transparency so if\nwe wanted to do black we would do zero\nzero zero zero zero zero since we have\nzero red zero green and zero blue and\nthen the final value will be the alpha\nvalue which would be between zero and\n255 again so if we wanted to be entirely\nopaque we would do ff save that and we\nget entirely opaque black and if we\nwanted it to be\nentirely transparent just zero zero and\nthat'll make it entirely transparent\nthe last way to define colors in html is\nusing hsl which stands for huge\nsaturation likeness\nthe first value hue goes between 0 and\n360 and determines which color you're\ngoing to be using we'll just use zero in\nthis example\nsaturation goes from zero to one hundred\npercent and determines how colorful this\ncolor is at one hundred percent\nsaturation it's as bright as it can be\nand it's zero percent saturation there\nis no color in it is either going to be\nblack white or somewhere in between\nthere so let's just use 100 in this\nexample\nand then lastly lightness is going to\ndetermine how bright that color is so at\n100 percent lightness which is the max\nyou're going to have an entirely white\ncolor and at zero percent lightness\nyou're going to have an entirely black\ncolor and anywhere in between there is\ngoing to be a different shade of that\ncolor so let's just use 50 in this\nexample\nif we say that we see that we get red\nfrom this\nalso hsl has an hsl a version which lets\nyou put the alpha value or the\ntransparency the end where one is going\nto be entirely opaque and zero is going\nto be entirely transparent just like\nrgba at the top\nnext we're going to talk about the box\nmodel in order to demonstrate this i'm\ngoing to create a new div element\nand i'm going to give it a class of box\nthere we go\nand then in the style we'll style that\nbox element\nand we'll give it a height and a width\nof 100 pixels\na padding\nof 20 pixels\na margin of 50 pixels\nand a border\nthat is going to be 10 pixels\nand that will be black\ndon't worry about the syntax here this\nis really just to demonstrate how the\nbox model works if we save that\noh first let's give it a background\nbackground color\nof red\nand now as you can see over here we have\nthis red background\nwe have our black border\nbut where is this margin and padding\ncoming from\nin order to see this let's inspect this\nelement in google chrome\npull this over so that we can actually\nsee\nand down here we have the box model\nso\nwe have our 100\nwidth by 100 height which is the actual\ncontent of our thing and then around\nthat we have a padding of 20. and on the\nleft here over here you can see that it\nis highlighted so in blue we have the\nactual content 100 by 100\nin orange we have the padding which is\n20 pixels on each side\nnext comes our black border which is 10\npixels around the padding and then\nlastly are 50 pixels of margin that go\naround the content\nthe box model works where the inside of\nthe box model the very center is your\nactual content this is going to be your\ntext image whatever it is that takes up\nthat space is going to be there and then\nthe very next thing is padding\npadding is essentially just spacing\nbetween your content and your border\nso on a button for example this is what\nallows you to create space between your\nletters of your button and the actual\nborder around your button with the\nbackground\nbackground also goes on the padding\nbecause the background is inside of the\nborder\nthen we have the border which is\nself-explanatory whatever size you make\nthe borders how wide the border is going\nto be\nand then lastly we have our margin which\nis going to be the space on the outside\nof the border which helps you space\nelements out from each other\nmargin is meant to space elements around\nother elements and padding is meant to\nspace elements around their own border\nor to add spacing between the element\nand their actual background\nnow that we understand the box model\nlet's discuss the various different\nunits that we can use on this box model\nlet's close out of this inspector\nwiden up our view here\nand let's talk about first of all pixels\npixels are fairly self-explanatory\nthey're the unit that you use most the\ntime when defining content sizes\nand is going to be a set fixed width on\nevery size screen\nthe next unit we have is percentage\npercentage is also fairly\nself-explanatory and will take up\nwhatever percentage of the given width\nthat the object has inside of its parent\nso if we make this width ten percent\nthis box will be ten percent of the\nwidth of the screen since the entire\nwidth here is how much space we have to\nwork with\nthe next type of unit that we have is\ngoing to be em em is mostly used for\nfonts and font related situations like\npadding around fonts and it is going to\nbe it scales off of the actual font size\nso if your font size is 16 pixels\nthen 1 em\nequals 16 pixels\n2em would be 32 pixels and so on\nthere's also another type of font or\nscale called rem which is very similar\nto em in that it scales off of your font\nsize\nbut rem scales off the font size of the\nroot of your document so the very very\nbase level of our browser where if we\nwent into the settings and scaled our\nfont size it would scale off of that\nwhile em scales off of the parent so\nthis box has a parent of body so if we\nchange the font size\non this body to be 20 pixels\nyou'll see that our actual box gets\nwider\nbut if we used rem here the size of the\nbox stays the same even if we bump this\nup to 200 pixels for example\nlet's do 30 actually\nas you can see pumped up to 40 still\ndoesn't change the size\nand that right there is pretty much\neverything you need to know in order to\nget started with css\ni know we've covered a lot in this video\nand we're still missing a lot of what\nthere is to do in css but with these\nsimple rules you can get started and\ncreate any basic website that you want\nand style it using these css rules\nin my next few videos i'm going to go\nand cover all the css styling needed to\ncreate a modern looking band website so\nif you're interested in learning more\nabout css and the different properties\nthat are available be sure to check out\nthose videos when they come out\nalso like this video if you enjoyed it\nand subscribe for more similar content\nand let me know down in the comments\nbelow why you decided you wanted to\nlearn css and what you're going to\ncreate with it thanks for watching"
    },
    {
        "topic": "Selectors, properties, and values",
        "url": "https://www.youtube.com/watch?v=oPPym7UaSIo",
        "transcript": "All right guys, now we will talk about selectors, what are selectors in CSS\nwe will discuss how to use selectors in CSS\nSo selectors if we talked about, what are they\ni told you this thing, i told you that in CSS selectors, we have to first put SELECTOR in CSS syntax\nafter that we give a property and sets it's value, this is CSS syntax\nIf i wrote p here, so i will selects all the paragraph in my markup here\nafter that i'm setting it's color to blue\nSee here i have written, \"CSS selectors are used to find the element whose property will be set\", that means whose property you want to set\nselect it, here all the paragraphs elements in markup are present so select it\nso work of CSS is, it helps to select the markup\nhelps you to target the elements which you have to select\nSo selector means it select okay\nIt makes it easy to select single or multiple HTML elements\nlike we will see in class example, so here we will see types of markup\nfor now only understand this, we can select single or multiple HTML elements using selectors\nand all the selected elements we can set their properties to the values\nWe will see 4 types of CSS selectors\nfrom which one is CSS element Selector, one is CSS id selector, one is CSS class Selector and after this CSS grouping Selector\nHow all this work, let's go to VS code and understand it\nNow i will take you to VS code, run the live server and will try coding\nthat how we will use the 4 selectors of CSS i talked about\nSo guys here i came to my computer, here i will open my VS code and create a file naming \"tut14.html\"\ni'll create a file naming \"tut14.html\"\nSo here i created a file naming \"tut14.html\"\nand here quickly i will put html boiler plate\nmy old live server is running, i will dispose it\nand what i will do here is write \"CSS Selectors\" okay\nAnd here i will use internal CSS\nyou don't use inline CSS, you can use external, i'm using internal here because i want everything should be in a page\nand whatever styling i write here will be applied on the page\nSo first of all let's give a heading here, i will give the same heading\n\"CSS selectors\" and i will open live server so that my page goes to live server\nnow this CSS Selectors, and after this what i will do is write a paragraph\nand i will write, \"This is a simple paragraph to demonstrate css selectors\"\nso we will write here quickly without wasting any time and to make it nice we will capitalise T\nso talking about simplest selector, what is it?\nNow how page is looking, page is looking like this, nothing more we have done\nTalking about a simple selector, so it is paragraph and what to do with it?\nMake paragraphs color to red okay, i have written like this in my style\nand see my paragraphs color becomes red, so that means color of my p tag have become red\nand along with that if i add here more paragraph tags, so there color will also be red\nsee here there color is also red, so all the paragraphs i have, there color will be red okay, i will add one more\n\"yet another simple paragraph\", i will make it \"inside div\"\nand here i will toggle word wrap so that horizontal scroll bar will vanish\nand here i will write simply a div okay\nand this my main line, i will press (Alt+up arrow key), i will move it and save it okay\nSo here i wrote a paragraph inside a div, so will this paragraph also become red, think and tell me\nso this paragraph will also become red, you thought it right because here i said that all paragraphs should become red okay\nso see here all my paragraphs are red, okay\nSo here if i want to make only one paragraph red\nAssume i want to make this red\nSo i will use here id selector, so this was element selector by the way\nwe wrote just p, it was a element selector, but if i want to make this id of p \"redElement\" okay\nSo what i will do is write like this and say \"#redElement\", basically what i'm saying is\nthe element which has id \"redElement\", make its color red, so i targeted it to id\nand how will we know its a id not a class, i used a pound symbol here, #redElement, color : red;\nso whosever id is red element, it will become red, so see my second one is red\nand id is unique, and class can be multiple i told you this\nso this type of thing we will prefer it putting it in class not in id\nSo what i will do is give ids the 2nd paragraph\nIf i gave it \"secondPara\" as id, so here it won't be red because i\nchanged the id of this, i wrote redElement id as this is secondPara, No\nit will work okay but if i wrote here class \"redElement\", so i want you to pause and tell me if it works or not\nIt won't work at all as it is a class and here we are talking about id\nso this won't work, my element will not be red, but if i put a . here\nSo will it work, yes it will, then second para will be red like you can see here\nso here i can write more classes, assume i make \".bgblue\" and here i will make \"background-color : blue;\"\nand here i will write \"bgblue\", so you can see here\nusing bgblue our background is blue now, see here it has happen because i added 2 classes here\none was \"redElement\" class and one was my \"bgblue\" class, so this was our class selectors\nSo we have seen 3 types of selectors, one was id selector, and one we have seen, i will do a thing and make this \"secondPara\"\nIn-fact i will write it for firstPara\nand here put the id of firstPara\nAnd for \"firstPara\" i will write something else, i will make its \"color : green;\" okay\nso see the first one's color is not green, why did this happen, okay because i used a dot, i have to use # for id\nso now this will become green, it is green now, and for this i have set both color and background\nwhat i will do is make it's color yellow, i will make it yellow\nSo see now color is yellow and background is blue\nSo like this we can style the elements, now you must be thinking what is this color?\nWhat is background-color? we will talk about this, i wish you not to focus on this thing\nnow only focus only on how i'm selecting this, how did i target firstPara using it's id\nhow did i target bgblue using its class, i want you to foucs on all this things\nSo i hope you understand this thing, so what things we talked about here, first of all we have seen our HTML element selectors\nthen we saw id selectors, then we saw class selectors\nNow here there is grouping selector also, so i will tell you grouping selector also\nAssume i have a footer here okay\nand i'm saying \"This is footer\"\nI will put this footer at the end because it is a footer\nSo see here \"This is footer\"\nNow i want that my footer and my paragraph p tag\nI will do a thing here, add a span, \"this is span\"\ni want its background to be pink, so i can group selectors, i will write \"footer, span\"\nmake its \"background-color : pink;\"\nNow i will show you a trick, typing background color is such a headache, so how i typed it fast\nIn VS code, i wrote b, you write b and after this write anything of it like you\nif you write col so your first background-color will come\nso starting from here you can match anything, i hope you understand what i'm saying\nif i write bcolor so it will show we background-color, if i write bacolor still it will show we background-color\nbecause ba matched here and after that color matched here\nso you write b so there will be many suggestions\nif you type ol, sorry not ol of background if you type lo then what will happen\nbackground will match here lo, then we do r\nstill i have many, so if i write backcol, so it matching with 2 suggestions\nfirst background-color is matching, background back is matching, color's col is matching\nthen of background-clip, back is matching here, o is here and cl of clip is matching\nso even you write it in short cut, if you write bground color\nso your background-color came, so i hope you understand how i typed it, i wish quickly i will tell you with ease that how i'm doing this\ni don't want that you have any questions on this that\nhow am i moving lines, how i'm setting background color, i want that\nall things should be clear, seeing video should make it clear\nso if i cleared more things in video and questions are less so it means that you will have a good experience seeing this videos\nSo this was our combined grouping selector\ni have to talk about one more thing which i haven't talked about\nthat is CSS comments, there are different comments in CSS, so the comments you write in HTML\nthat i told you, you can write it like this, so if i write a comment so i will use CTRL+\\ and comment this syntax\nSo this is the feature of our VS code with which we can use CTRL+\\  to comment on any thing\nAgain use CTRL+\\ to remove it\nSo this was our HTML comment, now if you stylesheet is separate, so you wish to comment there also\nYou may need to comment, then what you will do see here what happens\nIf i write this here and use CTRL+\\, so see how comment is made\nVisual Studio code is so smart that it recognised this in inside style\nSo style should have comment like this, so this is CSS comment, \"/*\" then \"*/\", whatever in between this will be treated as comment that means\nyou can use it for leaving any message, so lets leave a message, we will write\n\"grouping selector\" and make G capital of grouping\nHere we will write \"Class selector\", i did selector spelling wrong\nokay, CTRL+/, CTRL+S for save\nand after that this is my \"id selector\"\nAnd i hope you understand things now, but i told you one more thing, i will do a thing here\ni'll write p and then \"border : 2px solid red;\" okay\ni'm saying put borders to all the paragraphs, see all paragraphs has borders now\nSo of 2 pixel and of red color okay, so i can do this and which is this selector, this was my element selector\nSo if you see this in your CSS stylesheet, if you have ever opened code of any open-source project and you see something like this\nSo this are comments of CSS\nwe have seen 4 selectors here and using these selectors we will understand basics of CSS\nWe will see advance selector also, that means how can we select advance selectors\nSo i hope you understand this thing, now what is this background-color and how many properties and values are there\nI will talk about all this things soon, now here you have to\nclear this that there are 3 ways to write CSS, one is inline CSS, one internal CSS and one external CSS\nand the second thing you should clear that how to perform basic selection in CSS, like element selector we used, how to use id selector and class selector\nand how to use grouping selector, how to group selectors differently\nso here, if assume\nso here when do you have to use id selector or class selector\nUse id selector when you are dealing with one element\nso if i want to dark a particular element so i will put id in it, using id selector i will write it's CSS\nbut if i want a specific thing, i will show you website as an example\nIf i show you this website as an example, the design i gave here i wish to give it here also, this row also, this row also, so what i will do is give a class to it\nand put that class in all of this, to all the elements, so i hope you understand this thing\nand along with that if i have to do something with logo because i can see there is only 1 logo\nso if i have to do something with logo, i can use id for any designing purpose, like sign in button they have\none is here, one is here, both the designs are same, so i will put class in it\ni can name class anything like \"blueBorder\" and put that class in both and it can have multiple classes also like blueBorder, blueColor\nblueBorder can define that it's border is blue, and blueColor can define the content of it is blue\nSo like this you can use class and id, class means that one class can go to multiple elements and one element can contain multiple classes also\nbut id is not the same boss, in id, one element has its unique id, it is it's identifier, id means identifier\nand that id cannot be given to another element with same name, i hope you understand this and this thing is clear\nIf you haven't accessed this playlist, so please access it as soon as possible\nand you connect to this course by clicking here, by bookmarking this playlist and by clicking here saving this playlist\nSo that's all in this video for now guys, if you like this videos so please do like the videos\nThank you soo much guys for watching this video \nand I will see you next time [ \u266c ]\n[ \u266c ]"
    },
    {
        "topic": "Basic layout techniques",
        "url": "https://www.youtube.com/watch?v=w5BTj8sh-7k",
        "transcript": "Error fetching transcript for video w5BTj8sh-7k: \nCould not retrieve a transcript for the video https://www.youtube.com/watch?v=w5BTj8sh-7k! This is most likely caused by:\n\nSubtitles are disabled for this video\n\nIf you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!"
    },
    {
        "topic": "Fundamentals of JavaScript",
        "url": "https://www.youtube.com/watch?v=W6NZfCO5SIk",
        "transcript": "In this 3-minute introduction, I'm going\nto answer four frequently asked questions\nabout JavaScript. \nWhat is JavaScript, what can you do with\nit, where does JavaScript code run and\nwhat is the difference between\nJavaScript and ECMAScript. So let's\nstart with the first question. What is\nJavaScript? JavaScript is one of the most\npopular and widely used programming\nlanguages in the world right now. It's\ngrowing faster than any other\nprogramming languages and big companies\nlike Netflix, Walmart, and PayPal build\nentire applications around JavaScript.\nAnd here's the average salary of a\nJavaScript developer in the United\nStates. That is $72,000 a year. So\nit's a great opportunity to get a good\njob out of learning JavaScript. You can\nwork as a front-end developer or a\nback-end developer or a full stack\ndeveloper who knows both the front end\nand the back end. Now, the second question.\nWhat can you do with JavaScript? For a\nlong time,\njavascript was only used in browsers to\nbuild interactive web pages some\ndevelopers refer to javascript as a toy\nlanguage but those days are gone because\nof huge community support and\ninvestments by large companies like\nFacebook and Google these days you can\nbuild full-blown web or mobile apps as\nwell as real time networking\napplications like chats and video\nstreaming services command-line tools or\neven games here's an example a third\nquestion where does JavaScript code run\njavascript was originally designed to\nrun only in browsers so every browser\nhas what we call a JavaScript engine\nthat can execute JavaScript code for\nexample the JavaScript engines in\nfirefox and chrome are SpiderMonkey and\nv8 in 2009 a very clever engineer called\nRyan Dahl took the open-source\nJavaScript engine in chrome and embedded\nit inside a C++ program he called that\nprogram node the node is a C++ program\nthat includes Google's v8 JavaScript\nengine now with this we can run\nJavaScript code out\nof a browser so we can pass our\nJavaScript code to node for execution\nand this means with JavaScript we can\nbuild the backend for our web and mobile\napplications so in a nutshell JavaScript\ncode can be run inside of a browser or\nin node browsers and node provide a\nruntime environment for our JavaScript\ncode and finally the last question what\nis the difference between JavaScript and\nEggman script well ECMO script is just a\nspecification javascript is a\nprogramming language that confirms to\nthis specification so we have this\norganization called a comma which is\nresponsible for defining standards they\ntake care of this Eggman script\nspecification the first version of\nEggman script was released in 1997 then\nstarting from 2015\nACMA has been working on annual releases\nof a newest specification so in 2015\nthey released a kimono script 2015 which\nis also called ECMO script version 6 or\nes6 for short this specification defined\nmany new features for JavaScript alright\nenough theory\nlet's see javascript in action so every\nbrowser has a JavaScript engine and we\ncan easily write JavaScript code here\nwithout any additional tools of course\nthis is not how we build real-world\napplications but this is just for a\nquick demo so open up Chrome right click\non an empty area and go to inspect now\nthis opens up chrome developer tools\nhere select the console tab this is our\nJavaScript console and we can write any\nvalid JavaScript code here so type this\nconsole dot log put a single code here\nand then hello world another single code\nto terminate close the parentheses and\nadd a semicolon at the end now as you go\nthrough the course you're going to\nunderstand exactly what all this means\nfor now don't worry about it so now I'll\npress ENTER and you can see the hello\nworld message on the console we can also\nwrite mathematical expressions here for\nexample two plus two we get four or we\ncan do something like this alert\npractices single coat yo enter and\nhere's an alert in the next lecture I'm\ngoing to talk about setting up your\ndevelopment environment for writing\nJavaScript code\nin order to write javascript code you\nneed a code editor there are various\ncode editors out there including Visual\nStudio code or yes code sublime text\natom and so on\nout of these my favorite is Visual\nStudio code that you can download from\ncode that Visual Studio comm it's a very\nsimple lightweight cross-platform and\npowerful editor so if you don't have\nVisual Studio code on your machine go\nahead and download it the other thing I\nwanted to install is note you can\ndownload note from nodejs\norg now technically you don't\nnecessarily need know to execute\nJavaScript because as I explained before\nyou can execute JavaScript code inside\nof a browser or EndNote but it's good to\nhave node on your machine because we use\nthat to install third-party libraries\nand also later in this section I'm going\nto show you a preview of node so pause\nthe video now and download Visual Studio\ncode as well as note once you're done\ncome back continue watching\nto create a new folder call that J s\ndash basics the name doesn't really\nmatter we just want to have a folder for\nwriting all the code in this course now\ndrag and drop this folder into visual\nstudio code okay we've got this folder\nopen let's add a new file here index dot\nHTML now you don't really need to know\nHTML in order to take this course but if\nyou want to be a front-end developer you\nshould know your HTML well now in this\nfile I want you to type an exclamation\nmark and then press tab this generates\nsome basic HTML boilerplate we don't\nreally care about any of this code here\nwe're gonna use this as a host for our\nJavaScript code you're gonna see that in\nthe next lecture so save the changes now\nopen the extensions tab here\nhere in this box search for live server\nso live server is a very lightweight web\nserver that we're going to use to serve\nour web application so install this then\nyou will have to restart Visual Studio\ncode when you're done go to the Explorer\ntab right click index.html and select\nopen with live server\nthis will open up Chrome or your default\nbrowser and point it to this address\nthat's where our web application is\nserved from now currently we have an\nempty page now to make sure that\neverything is working properly let's go\nback to visual studio code here in the\nbody section let's add an h1 press tab\nand type hello world now save the\nchanges back in the browser we can see\nthis page is refreshed automatically and\nwe've got the hello world heading here\nin the next lecture you're going to\nwrite your first JavaScript code\nall right now we're ready to write our\nfirst Java Script code in order to write\nJavaScript code here we need a script\nelement there are two places where we\ncan add a script element we can add it\nhere in a head section or in the body\nsection the best practice is to put the\nscript element at the end of the body\nsection after all the existing elements\nso here after h1 I'm gonna type script\nand press tab this is our script element\nnow why did I say that as a best\npractice you should put this script\nelement here well there are two reasons\nfor that one reason is that the browser\nparses this file from top to bottom so\nif you put this script element here in\nthe head section you might have a lot of\nJavaScript code there so your browser\nmay get busy parsing and executing that\nJavaScript code and it won't be able to\nrender the content of the page so this\nwill create a bad user experience your\nuser looks at your web page it's white\nor blank while your browser is busy\nparsing and executing your JavaScript\ncode so that's reason 1 the second\nreason is that almost always the code\nthat we have in between script elements\nneeds to talk to the elements on this\nweb page for example we may want to show\nor hide some elements so by adding the\ncode here at the end of the body section\nwe'll be confident that all these\nelements are rendered by the browser now\nthere are exceptions to this rule\nsometimes you're using third-party code\nthat has to be placed in the head\nsection but these are exceptions as I\ntold you before as a best practice you\nshould add your JavaScript code at the\nend of the body section now here we're\ngonna write the same code that you wrote\nin the last lecture console dot log\nhello world but we're going to talk\nabout this in a little bit more detail\nwhat we have here is a statement a\nstatement is a piece of code that\nexpresses an action to be carried out in\nthis case we want to log\na message on the console all statements\nin JavaScript should be terminated by a\nsemicolon what we have here in between\nsingle codes is called\na string a string is a sequence of\ncharacters now in JavaScript we also\nhave this notation we can add two\nslashes and this represents a comet so\nhere we can add some description to our\ncode and this description is ignored by\nthe JavaScript engine it's not executed\nit's purely for documenting the code\nwhen you wanna explain to other\ndevelopers why you have written this\ncode this way you don't explain what the\ncode does because that should be clear\nin the code itself so here I don't want\nto write something like logging\nsomething on the console that's so\nobvious in the code right instead we\nwant to explain why's and a house so for\nthis demo I'm just gonna add a simple\ncomment this is my first JavaScript code\nnow save the changes back in the browser\nwe need to bring the console back up so\nright click somewhere and go to inspect\nor alternatively you can use a shortcut\nthat is alt command an eye on Mac or alt\ncontrol eye on windows that brings up\nthe console tab if the console tab is\nnot immediately visible make sure to\nselect it here and here you can see the\nhello world message\nnow while we can easily write javascript\ncode in between the script element in a\nreal-world application you have\nthousands or even millions of code we\ndon't want to write all that code in\nline here we want to extract and\nseparate our JavaScript code from our\nHTML code let me give you a metaphor\nthink of your house in your bedroom you\nhave your bed and your clothes you don't\nstore your clothes in the kitchen this\nis what we call separation of concerns\nwe have the same principle in\nprogramming so we want to separate HTML\nwhich is all about content from\nJavaScript which is all about behavior\nhow should your web page behave what\nshould happen when we hover our mouse\nover a given element maybe something\nshould pop up maybe something should be\nhidden so we use JavaScript to implement\nbehavior so open up the Explorer window\nadd a new file cut in index the j/s now\nback in index dot HTML cut all this\nJavaScript code here and then paste it\nin index J s now in this simple\napplication we have a single file a\nsingle javascript file in a real world\napplication we have hundreds or even\nthousands of JavaScript files later in\nthe course you will learn how to combine\nthese files into a bundle and serve that\nbundle to the client now save the\nchanges back in index.html now that all\nour JavaScript code is in a separate\nfile we need to reference that file here\nso let's add an attribute here SRC which\nis short for source and set it to index\nthat j/s so this tells the browser that\nour JavaScript code is now in index that\nis save the changes back in the browser\nyou can still see the hello world\nmessage and that confirms that our code\nis still working in the next lecture we\nare going to execute this code in node\nso in the last lecture we executed this\npiece of JavaScript code inside of a\nbrowser in this lecture I'm going to\nshow you how to run the same code in\nnode so I'm assuming that you have\ninstalled node on your machine if not\nhead over to node.js org and download\nthe latest version of node now if you're\non Windows open up command prompt if\nyou're on Mac open up terminal and head\nover to the folder you created earlier\nnow in this folder we run node and pass\nthe name of our javascript file that is\nindex dot JSON c node is a program that\nincludes google's v8 JavaScript engine\nwe can give it a piece of JavaScript\ncode and it will execute that code for\nus just like how we can execute some\nJavaScript code in a browser so node is\na runtime environment for executing\nJavaScript code now let me show you a\ntip here in vs code we have an\nintegrated terminal so you're gonna have\nto explicitly open up a separate\nterminal window so here on the top under\nthe View menu look we have integrated\nterminal note the shortcut here that's\nthe shortcut for mac and windows you're\ngonna have a different shortcut so\nselect this and here's our integrated\nterminal pointing to the same folder\nwhere we created our files so you don't\nhave to explicitly navigate to this\nfolder and here we can run node indexed\nat j/s as well now in this course we're\nnot gonna work with node anymore because\nnode is a complex separate topic in fact\nI have a comprehensive course about node\nwith 14 hours of content so once you\nfinish this course if you want to learn\nnode you can always look at my note\ncourse\nwell hello it's mahshar thank you for\nwatching my javascript tutorial I just\nwanted to quickly let you know that this\ntutorial is part of my complete\nJavaScript course where you can learn\nabout all the essential concepts in\nJavaScript the course is packed with\nlots of exercises and solutions and by\nthe end of watching the course you will\nalso receive a certificate of completion\nin case you're interested you can find a\nlink in the video description and if not\nthat's perfectly fine continue watching\nas the next section is coming up\nlet's start this section by a discussion\nof variables which are one of the most\nfundamental concepts in JavaScript and\nany other programming languages in\nprogramming we use a variable to store\ndata temporarily in a computer's memory\nso we store our data somewhere and give\nthat memory location and name and with\nthis name we can read the data at the\ngiven location in the future here is a\nmetaphor think of the boxes you use to\norganize your stuff you put your stuff\nin various boxes and put a label on each\nbox with this you can easily find your\nstuff right a variable is like a box\nwhat we put inside the box is the value\nthat we assign to a variable that's the\ndata and the label that we put on the\nbox is the name of our variable now\nlet's see this in code so here in index\nJas I'm gonna declare a variable now\npreviously in the old days before es6 we\nuse the VAR keyword to declare a\nvariable but there are issues with var\nas you will find out later in the course\nso going forward from es6 the best\npractice is to use the lead keyword to\ndeclare a variable now we need to give\nthis variable a name or an identifier\nand this is like the label we put on a\nbox so I'm gonna call this name and\nfinally we need to terminate this\ndeclaration with a semicolon now let's\nlog this on the console and see what we\nget\nso console that log name once again we\nneed to terminate this statement with a\nsemicolon save the changes and here in\nthe console we see undefined so by\ndefault variables that we defined in\nJavaScript their value is undefined now\nwe can optionally initialize this\nvariable so I'm gonna set this to a\nstring which is a sequence of characters\nlike Marsh note that I'm using single\nquote you can also use double quotes\ndifferent developers have different\npreferences but it's more common to use\nsingle quotes for declaring strings in\nJavaScript now when we save the changes\ninstead of one\nwe see Marsh on the console so here in\nthis example we have declared a variable\ncalled name and we have set that to this\nvalue to this string now we have a few\nrules for naming these variables here\nare the rules\nfirst is that they cannot be a reserved\nkeyword so in JavaScript we have\nreserved keywords let is one of them\nyou also have if else VAR and so on now\nyou don't have to memorize this list if\nyou try to use one of these names you're\ngonna get an error for example if I\nchange this to if notice red underline\nthis is indicating that this is not a\nvalid identifier okay so revert it back\nnow the second rule is that they should\nbe meaningful we want to have meaningful\nnames like meaningful labels I've seen\ndevelopers using names like a or PE or a\none or I don't know X these variable\nnames do not give us any clue what is\nthe purpose of these variables what kind\nof data are restoring at that memory\nlocation so always use meaningful and\ndescriptive names okay now back to name\nthe third rule is that they cannot start\nwith a number so we cannot have a\nvariable like one name but again going\nback to the second rule why would you\nwant to call it variable one name it's\nmeaningless right so always use\nmeaningful names the fourth rule is that\nthey cannot contain a space or - so if\nyou have multiple words you need to put\nthem together here is an example let's\nimagine we want to declare a variable\ncalled first name so first name and note\nthat here I'm using camel notation so\nthe first letter of the first word\nshould be lowercase and the first letter\nof every word after should be uppercase\nthis is what we call camel notation\nwhich is the convention we use in\nJavaScript to name our variables another\nthing you need to know about these\nvariable names is\nthey are case-sensitive so if I declare\nanother variable call it first name but\nmake the F uppercase these two variables\nare different but as I told you before\nif you stick to camel notation you\nwouldn't end up with a variable name\nlike this and finally the last thing you\nneed to know about these variables is\nthat if you want to declare multiple\nvariables there are two ways to do this\nyou can declare them on one line and\nseparate them using a comma so first\nname and then last name now in this case\nI have not initialized either of these\nvariables they're both undefined I can\noptionally initialize one or both of\nthem so I can set this to Marsh and I\ncan leave last name undefined or set it\nto my last name Hammad on e but the\nmodern best practice is to declare each\nvariable on a single line so we\nterminate this first declaration with a\nsemicolon and declare the second\nvariable on a new line that's the modern\nbest practice next we're going to look\nat constants\nalright now let's declare a variable\ncalled interest rate so let interest\nrate and we set this to 0.3 now this is\nthe initial value we can always change\nthat later so we can set interest rate\nto let's say 1 now if you log this on\nthe console of course we're going to see\nthe new value right so save the changes\nand here's one on the console however in\na real-world application there are\nsituations that we don't want the value\nof a variable to change because\notherwise it's going to create all kinds\nof bugs in our application in those\nsituations instead of a variable we use\na constant so the value of a variable as\nthe name implies can change but the\nvalue of a constant cannot change so\nhere if we change let to Const now\ninterest rate will be a constant so when\nI save the changes you're going to see\nan error in the console on line 3 where\nwe reassign interest rate so let's have\na look\nsave the changes and here's the error\nuncut type error assignment 2 constant\nvariable we can see this error happen in\nindex dot JSP\nbut if you click here you can see the\nline in code where this error occurred\nso we cannot reassign a constant all\nright now back to the console so here's\nthe best practice if you don't need to\nreassign constant should be your default\nchoice otherwise if you need to reassign\na variable use let\nso you have learned how to declare and\ninitialize a variable now you might be\nwondering what are the kind of values\nthat we can assign to a variable well\nyou have seen strings but we have more\ntypes basically in JavaScript we have\ntwo categories of types on one side we\nhave primitives also called value types\nand the other types we have reference\ntypes in this lecture we're going to\nfocus on primitives and you're going to\nlearn about reference types later in the\ncourse now in the category of primitives\nwe have strings numbers bully ends\nundefined and not let's look at each of\nthese in action so here we have a\nvariable called name which is set to\nyour string what we have here is what we\ncall a string literal that's just a\nfancy name for a string now let's\ndeclare a variable and set it to a\nnumber so let H be set back to 30 and by\nthe way I'm not 30 years old but don't\ntell anyone okay\nso this is what we call a number litora\nnow let's declare a boolean a boolean\ncan be either true or false\nso let is a proved to be true this is\nwhat we call a boolean literal and we\nuse this in situations where we want to\nhave some logic for example if the order\nis approved then it needs to be shipped\nso the value of a boolean variable can\nbe true or false and by the way note\nthat both true and false are reserved\nkeywords so they cannot be variable\nnames ok now you have seen undefined\nbefore so I can declare another variable\nfirst name\nif we don't initialize it by default its\nvalue is undefined\nbut we can also explicitly set this to\nundefined but that's not very common in\ncontrast we have another keyword that is\nnot so let me declare another variable\nand set this to no we use null in\nsituations where we want to\nplease heed me clear the value of\nvariable for example you may want to\npresent the user with a list of colors\nif the user has no selection you want to\nset the selected color variable to know\nin the future if the user selects a\ncolor then we're going to reassign this\nvariable to a color like red and then if\nthey click red again perhaps we want to\nremove the selection so we set this back\ntool not so we use norm in situations\nwhere we want to clear the value of a\nvariable so these are the examples of\nprimitives or value types we have\nstrings numbers boolean's undefined and\nno now in es6 we have another primitive\nthat is symbol and you're going to learn\nabout that later in the course\none thing that separates JavaScript from\na lot of programming languages is that\njavascript is a dynamic language what do\nthey mean by dynamic well we have two\ntypes of programming languages\nstatic languages or dynamic languages in\nstatic languages when we declare a\nvariable the type of that variable is\nset and it cannot be changed in the\nfuture in a dynamic language like\nJavaScript the type of a variable can\nchange at runtime let's see this in code\nso back in the example from the last\nlecture we have declared this name\nvariable and we have set that to your\nstring so the type of name is currently\na string but it can change in the future\nlet's take a look so here in the console\nwe can execute some JavaScript code we\nhave this type of operator and with that\nwe can check the type of a variable so\nafter that we add the name of the\nvariable in this case our name variable\nso note that the type of name is a\nstring now if we reassign name to a\ndifferent value like a number and check\nits type look the type is now changed to\na number this is what we call a dynamic\nlanguage so unlike static languages the\ntype of these variables will be\ndetermined at runtime based on the\nvalues that we assigned to them now\nlet's take a look at a few more examples\nof the type of operator and by the way\nnote that type of is another reserved\nkeyword so you cannot have a variable\ncalled type off so we can clear the\nconsole by pressing ctrl + L so now\nlet's take a look at type of age it's a\nnumber now if you change age to a\nfloating-point number and I know it\ndoesn't make sense but let's just stick\nto this for this example thirty point\none and then look at type of age it's\nstill a number so in JavaScript unlike\nother programming languages we don't\nhave two kinds of numbers we don't have\nfloating-point numbers and integers all\nnumbers are of type number now let's\nlook at the type of he's approved it's a\nboolean as I told you before what about\nthe first name let's have a look type of\nfirst name it's undefined and that's\nfunny because the value of this variable\nis undefined\nbut this type is also undefined what\ndoes this mean well earlier I told you\nthat we have two categories of types we\nhave primitives or value types and\nreference types in the primitive types\ncategory we have strings numbers boolean\nundefined and no so undefined is\nactually a type but is also a value in\nthis example because we have set\nfirst-name to undefined as a value it's\ntype is also undefined okay now what\nabout selected color let's have a look\nso type of selected color the type of\nthis variable is an object what is an\nobject that's the topic for the next\nlecture\nso you have seen all the primitive types\nin JavaScript now let's take a look at\nthe reference types in the reference\ntypes category we have objects arrays\nand functions in this lecture we're\ngoing to explore objects and you will\nlearn about arrays and functions later\nin this section so what is an object an\nobject in JavaScript and other\nprogramming languages is like an object\nin real life think of a person a person\nhas name age address and so on these are\nthe properties of a person you have the\nsame concept in JavaScript so when we're\ndealing with multiple related variables\nwe can put these variables inside of an\nobject for example here we have two\nvariables name and age they're highly\nrelated they are part of the\nrepresentation of a person so instead of\ndeclaring two variables we can declare a\nperson object and then instead of\nreferencing these two different\nvariables we can just reference the\nperson object\nit makes our code cleaner so let's see\nhow we can declare a person object we\nstart with let or Const if we don't want\nto reassign the person object and set it\nto an object literal so this syntax we\nhave here these curly braces is what we\ncall an object literal now between these\ncurly braces we add one or more key\nvalue pairs so the keys are what we call\nthe properties of this object in this\ncase we want this person object to have\ntwo properties or two keys name and age\nso we add name here that's the key then\nwe add a colon and after that we set the\nvalue so maash now we add a comma and\nadd another key value pair age 30 so now\nwe have a person object with two\nproperties or two key value pairs name\nand age and with that we don't need\nthese two variables now this lock person\non the console\nso that log person save the changes so\nhere's our personal object again note\nthe object literal syntax so we have\ncurly braces and in between them we have\none or more key value pairs and these\nare the properties of the personal\nobject now there are two ways to work\nwith these properties let's say we want\nto change the name of this person so we\nneed to access the name property there\nare two ways the first way is what we\ncall the dot notation so we add the name\nof our object in this case person dot\nnow you can see its properties we have\nage and name so we can change the value\nof name to John now we can use the dot\nnotation to also read the value of a\nproperty so here on line 10 instead of\nlogin the person object we can log its\nname property save the changes and in\nthe console we get John the other way to\naccess a property is using bracket\nnotation so bracket notation so instead\nof dot we use square brackets and we\npass a string that determines the name\nof the target property so single or\ndouble quotes\nbut single quotes are more common the\nname of the target property is name so\nwe can change that to a same Mary again\nwhen reading that we can use the dot\nnotation or the bracket notation if we\nsave the changes now we get Mary on the\nconsole now you might be asking which\napproach is better dot notation or\nbracket notation well as you can see dot\nnotation is a bit more concise it's\nshorter so that should be your default\nchoice however bracket notation has its\nown users sometimes you don't know the\nname of the target property until the\nruntime for example in our user\ninterface the user might be selecting\nthe name of the target property in that\ncase at the time of writing code we\ndon't know what\nproperty we're going to access that is\ngoing to be selected at runtime by the\nuser so we might have another variable\nsomewhere else like selection that\ndetermines the name of the target\nproperty that the user is selecting and\nthat can change at runtime with this we\ncan access that property using the\nbracket notation in a dynamic way so we\npass selection here and we get the same\nresult okay now if this is confusing\ndon't worry you're going to see this\nagain in the future as you gain more\nexperience with JavaScript for now just\nstick to the dot notation because that's\ncleaner and easier next we're going to\nlook at arrays\nsometimes in your applications you might\nbe dealing with a list of objects for\nexample the list of products in a\nshopping cart or the list of colors the\nuser has selected in situations like\nthat you use an array to store that list\nlet me show you how so here I'm gonna\ndeclare another variable called selected\ncolors note that I'm using a meaningful\nname I don't have SC or some other weird\nname selected colors now we can\ninitialize this and set it to an empty\narray so these square brackets are what\nwe call array literal and they indicate\nan empty array now we can initialize\nthis array and add a couple of items\nlike red and blue let's Lock this on the\nconsole so console the log selected\ncolors save the changes so here's our\narray with two elements we can expand\nthat note that each element has an index\nand that determines the position of that\nelement in the array so the index of the\nfirst element is zero and the index of\nthe second element is one so if you want\nto access an element in an array we use\nthis index here's how for example let's\nsay you want to display the first\nelement in this array you use the square\nbrackets and then specify the index save\nthe changes and now we have red now\nearlier I told you that JavaScript is a\ndynamic language so the type of\nvariables can change at runtime the same\nprinciple applies to our arrays so the\nlengths of arrays as well as the type of\nobjects we have in an array are dynamic\nthey can change so aligned - we\ninitialize this array with two elements\nright now on line 3 we can add another\nelement to this array so the array will\nexpand so let's say selected colors of 2\nthat means the third item in this array\nis going to be green now let's display\nthis array on the console\nso we have an array with three elements\nso the length is dynamic it can change\nalso the type of objects we have in this\narray is dynamic so unlike other\nprogramming languages where every item\nor every object in the array should have\nthe same type in JavaScript we can store\ndifferent types in an array so we can\nmake the last element a number save the\nchanges now we have two strings and a\nnumber so the objects in the array as\nwell as the size of the array are\ndynamic now technically an array is an\nobject so just like the personal object\nwe defined in the last lecture it has a\nbunch of key value pairs or properties\nthat we can access using the dot\nnotation let me prove that to you so\nhere on the console let's look at the\ntype of selected colors so the type of\nthis array is an object so an array is\nan object in JavaScript so here on line\n4 we can look at the properties of this\narray or this object using the dot\nnotation look these are all the\nproperties defined in arrays in\nJavaScript so every time we declare an\narray using square brackets that array\nwill automatically receive these\nproperties we didn't explicitly define\nthem they're just somehow magically\ninherited from somewhere else we're\ngoing to learn about that later when we\ntalk about prototypes now in this\nlecture we're going to look at one of\nthese properties that is the length\nproperty this property returns the\nnumber of items or elements in an array\nso save the changes you can see we have\nthree elements in this array now later\nin the course we have a comprehensive\nsection about arrays you'll learn about\nall kinds of operations we can perform\non arrays for now all I want you to take\naway is that an array is a data\nstructure that we use to represent a\nlist of items\nin the category of reference types you\nhave learned about objects and arrays\nnow let's take a look at functions\nfunctions are one of the fundamental\nbuilding blocks in JavaScript a function\nis basically a set of statements that\nperforms a task or calculates a value\nlet me show you a couple of examples so\nI'm going to declare a function using\nthe function keyword now we need to give\nit a name let's call that greet after\nthat we need to add parentheses that's\npart of the syntax for declaring\nfunctions and then curly braces now what\nwe have here inside the curly braces is\nwhat we refer to as the body of this\nfunction and this is where we add all\nthese statements to define some kind of\nlogic in our application for example the\nlogic for this function should be to\ndisplay a message on the console so here\nwe can add console the log hello world\nnow note that here we have a statement\nso we terminated with a semicolon but\nwhen we are declaring a function we\ndon't need to add semicolon at the end\nbecause we are not declaring it like a\nvariable like this okay this is a\nfunction declaration right so now we\nhave a function we can call this\nfunction like this so we add the name of\nthe function and parentheses again and\nthen semicolon to indicate that this is\na statement save the changes now we have\nhello world on the console but that's\npretty boring what would we do this let\nme show you how to make this more\ninteresting our functions can have\ninputs and these inputs can change how\nthe function behaves so let's say\ninstead of displaying hello world we\nwant to display the name of the person\nhere like hello John so we can add a\nvariable here in between parentheses we\nrefer to this variable as a parameter\nso this greet function has one parameter\ncalled name and essentially name is like\na variable that is only meaningful\ninside\ndysfunction so inside of this function\nwe can work with this name variable but\nit will not be accessible outside of\nthis function the name is an input to\nthis function so instead of displaying\nhello world we can display hello\nthen add a plus here to concatenate two\nstrings so we can add name after now\nwhen calling the great function we need\nto pass a value for the name variable or\nname parameter more accurately so we can\npass John here now we refer to this as\nan argument so John is an argument to\nthe greet function a name is a parameter\nof the greet function it's one of the\nthings that a lot of programmers don't\nknow they don't know the difference\nbetween a parameter and an argument so a\nparameter is what we have here at the\ntime of declaration but the argument is\nthe actual value with supply for that\nparameter okay\nnow let's save the changes so we have\nhello John now we can reuse this\nfunction but with a different input so\nwe can copy this line here and change on\nto Mary save the changes now we have two\ndifferent messages on the console now a\nfunction can have multiple parameters so\nhere we can separate parameters using a\ncomma so let's add another parameter\nlike last name now we can change our\nconsole not blog add a space here and\nthen display the last name\nnow when calling this great function we\nshould pass another argument for the\nlast name right but let's see what\nhappens if we don't do this so I'm gonna\nsave the changes\nsee what we got hello John undefined\nbecause as I told you before the default\nvalue of variables in JavaScript is\nundefined so because we did not pass a\nvalue for the last name by default it's\nundefined so I'm gonna pass another\nargument here we separate them using a\ncomma John Smith\nand we don't need the second call to the\ngreet function save the changes now we\nhave hello John Smith\nnow there is a cleaner way to write this\ncode on line three\nall these concatenations are kind of\nugly they're getting in the way later in\nthe course I'll show you how to use\ntemplate literals to clean up this code\nfor now don't worry about it let's look\nat another example of a function so this\nfunction we have here is performing a\ntask so performing a task is task is to\ndisplay something on the console but\nsometimes our functions might calculate\nsomething so here is an example of a\nfunction that calculates a value so\nagain function let's call this function\nsquare this function should take a\nparameter let's call that number now we\nneed to calculate the square of that\nnumber that is number times number just\nbasic math right now we need to return\nthis value to whoever is calling this\nfunction for that we use the return\nkeyword that's another reserved keyword\nso you cannot have a variable called\nreturn okay now instead of calling the\ngreet function let's call the square\nfunction so square we pass two now this\nreturns a value so we can use that value\nto initialize a variable for example we\ncan declare another variable called\nnumber and set it to a square of 2 and\nthen we can display that on the console\nsave the changes so we get 4 now in this\nparticular example we don't necessarily\nhave to declare a separate variable if\nall we want to do is to display the\nsquare of 2 on the console we can\nexclude this variable declaration and\nsimply pass square of 2 to console.log\nso when the JavaScript engine execute\nthis code first is going to call this\nfunction it would get a value and then\npass that value to console dot lock\nlet's save the changes and look we still\nget 4 now I have a question for you how\nmany function calls do you think we have\nin this code we have to function costs\nsquare of two is one function call let\nme delete this temporarily but consult\nthat lock is also another function call\nright because here we have parentheses\nso recalling the log function which is\ndefined somewhere and passing an\nargument we can pass a simple string\nlike hello or we can pass an expression\nthat expression can be a call to another\nfunction like square of two okay so this\nis the basics of functions again later\nin the course we have a comprehensive\nsection about functions for now all I\nwant you to take away is that a function\nis a set of statements that either\nperforms a task or calculate and returns\na value a real world application is\nessentially a collection of hundreds or\nthousands of functions working together\nto provide the functionality of that\napplication\nhi there it's me mosh again you seem to\nbe very enthusiastic about learning\nJavaScript so I want to congratulate you\nfor your determination for learning if\nyou want to learn more from me I highly\nencourage you to enroll in my JavaScript\ncourse you can watch this course online\nor offline as many times as you want at\nyour own pace the course comes with\nplenty of exercises and solutions and\nyou will also receive a certificate of\ncompletion by the end of watching the\ncourse in case you're interested the\nlink is in the video description have a\ngreat day and I hope to see you in the\ncourse"
    },
    {
        "topic": "Object-oriented programming in JavaScript",
        "url": "https://www.youtube.com/watch?v=pTB0EiLXUC8",
        "transcript": "[Music]\na popular interview question concerns\nthe four core concepts in\nobject-oriented programming this\nconcepts are encapsulation abstraction\ninheritance and polymorphism let's look\nat each of these concepts before\nobject-oriented programming we had\nprocedure of programming that divided a\nprogram into a set of functions so we\nhave data stored in a bunch of variables\nand functions that operate on the data\nthis style of programming is very simple\nand straightforward often it's what you\nlearn as part of your first programming\nsubject at a university but as your\nprograms grow it will end up with a\nbunch of functions that are all over the\nplace you might find yourself copying\nand pasting lines of code over and over\nyou make a change to one function and\nthen several other functions break\nthat's what we call spaghetti code there\nis so much interdependence e between all\nthese functions it becomes problematic\nobject-oriented programming came to\nsolve this problem in object-oriented\nprogramming we combine a group of\nrelated variables and functions into a\nunit we call that unit an object we\nrefer to these variables as properties\nand the functions as methods here's an\nexample think of a car a car is an\nobject with properties such as make\nmodel and color and methods like start\nstop and move now you might say what\nmarche\nwe don't have cars in our programs give\nme a real programming example ok think\nof the local storage object in your\nbrowser's every browser has a local\nstorage object that allows you to store\ndata locally this local storage object\nhas a property like length which returns\nthe number of objects in the storage and\nmetals like set item and remove item so\nin object-oriented programming we group\nrelated variables and functions that\noperate on them into objects and this is\nwhat we call encapsulation let me show\nyou an example of this in action so here\nwe have three variables base salary over\ntime and rate below these we have a\nfunction\nto calculate the wage for an employee we\nrefer to this kind of implementation as\nprocedural so we have variables on one\nside and functions on the other side\nthey're hard decoupled now let's take a\nlook at the object-oriented way to solve\nthis problem we can have an employee\nobject with three properties a salary\nover time and rate and a method called\nget wage now why is this better well\nfirst of all look at the get wage\nfunction this function has no parameters\nin contrast in a procedural example our\nget wage function has three parameters\nthe reason in this implementation we\ndon't have any parameters is because all\nthese parameters are actually modeled as\nproperties of this object all these\nproperties and the get wage function\nthey are highly related so they are part\nof one unit so one of the symptoms of\nprocedural code is functions with so\nmany parameters when you write code in\nan object-oriented way your functions\nend up having fewer and fewer parameters\nas Uncle Bob says the best functions are\nthose with no parameters the fewer the\nnumber of parameters the easier it is to\nuse and maintain that function so that's\nencapsulation now let's look at\nabstraction think of a DVD player as an\nobject this DVD player has a complex\nlogic board on the inside and a few\nbuttons on the outside that you interact\nwith you simply press the play button\nand you don't care what happens on the\ninside all that complexity is hidden\nfrom you this is abstraction in practice\nwe can use the same technique in our\nobjects so we can hide some of the\nproperties and methods from the outside\nand this gives us a couple of benefits\nfirst is that we'll make the interface\nof those objects simpler using an\nunderstanding an object with a few\nproperties and methods is easier than an\nobject with several properties and\nmethods the second benefit is that it\nhelps us reduce the impact of change\nlet's imagine that tomorrow we change\nthese inner or private methods\nthese changes will leak to the outside\nbecause we don't have any code that\ntouches these methods outside of their\ncontaining object we may delete a method\nor change its parameters but none of\nthese changes will impact the rest of\nthe applications code so with\nabstraction we reduce the impact of\nchange now the third core concept in\nobject-oriented programming inheritance\ninheritance is a mechanism that allows\nyou to eliminate redundant code here's\nan example think of HTML elements like\ntext boxes drop-down lists checkboxes\nand so on\nall these elements have a few things in\ncommon they should have properties like\nhidden and inner HTML and metals like\nclick and focus instead of redefining\nall these properties and methods for\nevery type of HTML element we can define\nthem once in a generic object call it\nHTML element and have other objects\ninherit these properties and methods so\ninheritance helps us eliminate redundant\ncode and finally polymorphism poly means\nmany more means form so polymorphism\nmeans many forms in object-oriented\nprogramming polymorphism is a technique\nthat allows you to get rid of long\nethanol's\nor switch and case statements so back to\nour HTML elements example all these\nobjects should have the ability to be\nrendered on a page but the way each\nelement is rendered is different from\nthe others if you want to render\nmultiple HTML elements in a procedural\nway our code would probably look like\nthis but with object orientation we can\nimplement a render method in each of\nthese objects and the render method will\nbehave differently depending on the type\nof the object you're referencing so we\ncan get rid of this nasty switch and\ncase and use one line of code like this\nyou will see that later in the course so\nhere are the benefits of object oriented\nprogramming using encapsulation we group\nrelated variables and functions together\nand this way we can reduce complexity\nnow we can reuse this object and do\nfrom parts of a program or in different\nprograms with abstraction we hide the\ndetails and the complexity and show only\nthe essentials this technique reduces\ncomplexity and also isolates the impact\nof changes in the code with inheritance\nwe can eliminate redundant code and with\npolymorphism we can refactor ugly switch\ncase statements\nwell hello it's me mash again I wanted\nto say thank you very much for watching\nthis tutorial to the end I hope you\nlearned a lot please share and like this\nvideo to support me if you want to learn\nmore about the object-oriented\nprogramming as I told you before I have\na course called object-oriented\nprogramming in JavaScript if you want to\nlearn more click on the link in the\nvideo description and enroll in the\ncourse if not that's perfectly fine make\nsure to subscribe to my channel because\nI upload new videos every week thank you\nand have a great day"
    },
    {
        "topic": "Event handling and DOM manipulation",
        "url": "https://www.youtube.com/watch?v=y17RuWkWdn8",
        "transcript": "there are a million ways to manipulate\nthe dom\nbut you really only need to know 14\ndifferent techniques so in this video\ni'm going to show you every single one\nof them so you can become a dom\nmanipulation\nmaster\n[Music]\nwelcome back to web dev simplified my\nname's kyle\nand my job is to simplify the web for\nyou so you can start building your dream\nproject sooner\nso if that sounds interesting make sure\nyou subscribe to the channel for more\nvideos\njust like this now in this video i'm\ngoing to be covering everything you need\nto know about\ndom manipulation and to get started i\njust have a blank html file that links\nto a script file\nand then in here i have our script file\nwe can write code in here and it's going\nto run on this page on the right side of\nour screen\nwhich as i mentioned is a completely\nblank page so far\nand if you're interested in taking your\njavascript skills to the next level make\nsure to check out my full javascript\ncourse linked in the description below\nit doesn't open for a couple months so\nif you're interested just go there and\nsign up with your email let you know\nwhen it opens\nor if you're from the future go there\nand you can check out the complete\ncourse right now\nso without any further ado i just want\nto jump into the very first technique of\njohn manipulation that i want to cover\nwhich is adding elements to the page\nsuper simple\nthere's two different ways that you can\nadd an element to the page the first\nthing i want to do is select the element\nwe're going to be adding this to which\nis going to be the body\ni'm just going to get a variable and set\nit to the body so we can just say\ndocument.body\nand that's going to be the body which we\ncan append elements to\nand speaking of the word append that is\nthe method we use to add elements to the\nbody\nso we can say body dot append and you'll\nnotice we have two choices we have\nappend\nand we have a pen child these are almost\nidentical methods but they have a few\ndifferences\nfirst we're going to look at append\nbecause one nice thing about append that\nis different from a pen child\nis that we can actually append strings\nso i could just say hello world\nand when i save this you can see the\nstring hello world prints out on the\nscreen\nso with append i can append strings but\nif i used append child\nand i save you're going to notice the\nstring doesn't show up and if i actually\ninspect my page\nand i look at my console you're going to\nsee we actually get an error saying that\na pen child requires a node and not a\nstring\nso that's one difference between a pen\nand a pen child is that with a pen child\nyou can only append elements like divs\nor spans or anchor tags\nwhile with append you can append all of\nthose as well as also append\nstrings also with a pen something that's\nreally cool is we can append\nmultiple things so if i want to append\nhello world and i want to append to buy\ni can just pass them both in you can see\nthat they both kind of pended right next\nto each other\nbut with append child i cannot do that\nnot only is it because these are strings\ninstead of elements but you can only\nappend one thing at a time you can't\njust pass a bunch of things to a pen\nchild so this is why generally i like to\njust use append\ninstead of a pen child since they do the\nexact same thing but append has a little\nbit more versatility so you can actually\nappend strings as well as multiple\nthings\nall at once but what if you wanted to\nappend an element instead of a string\nbecause generally\nlet's be honest you're not going to be\nappending strings to your page you're\ngenerally going to be appending elements\nso how do you make an element well it's\nactually very easy\nwith creating elements all you do is\ndocument dot create\nelement and in here you just pass the\ntype of element you want to create as\nyou can see all the different\nyou know html elements are here so\ngenerally you may create a div for\nexample let's create an element that's a\ndiv\nand we'll just say const div is equal to\nthat so we created a div\nright here but right now if we save\nnothing's going to happen\nwe inspect our page and we go and look\ninside of our body there's no div inside\nof here there's nothing in there\nand that's because we've created our\nelement but we haven't actually added it\nto our page\nthis is a crucial step that many people\ndon't realize creating something in\njavascript\nis different than adding it to the page\nall we've done is create a reference to\nsome element but now we need to add that\nelement to our html\nso to do that we can just say our body\ndot append\ndiv and now we've appended the div to\nour page\nobviously we can't see that because the\ndiv is just empty but if we open up our\nbody scroll down to the bottom\nyou can see this div is now added to the\nbottom of our page\nand if we wanted we could add some text\ninside of that div and we can actually\nsee\nthe div on our page so in order to add\ntext to our div\nthere's actually two different ways we\ncan do it we can say\ndiv dot inner text we could set that to\nsome text like\nhello world now we save you can see we\nget the text hello world being printed\nbut this time it's a little different\nbecause it's inside of a div\nalso if we come back over here we could\nuse append child\ninstead and you notice that the hello\nworld is still here because the pen\nchild allows you to append elements as\nwell\nbut like i mentioned in the beginning i\ngenerally prefer to use append\nso inner text is one way that we can set\nour text the next way is by doing\ntext content and set that oops if i\nspelled content correctly\nwe could set that to hello world 2.\nif we just comment this out and save we\nget the exact same result\nand when we inspect our page we go down\nto our div they both look exactly the\nsame\nso what is the difference between inner\ntext and text content they look like\nthey do the exact same thing\nand in general when you're actually\nsetting text to inner text or text\ncontent they're pretty much the same\nbut when you view the text of an element\nthrough inner text or text content\nthey actually differ a little bit so\nwhat i want to do is i just want to have\na div here\nand inside this div i'm going to have\ntwo spans the first one is going to say\nhello\nand this second span is going to say buy\nand if we save that and just\ncomment out all this code for now we can\nsee hello and by being printed to the\nscreen\nbut this one i want to give a style\nwhere the display\noops display is going to be none so now\nthis\nby is completely invisible so now if we\nselect that div\nby just saying document.query select\nof div and if you're a little bit\nconfused on how all the different\nselectors in javascript work\ni have an entire tutorial on it so you\ncan check that out in the cards and\ndescription\nso we just say div is equal to this\nand now let's say console.log div dot\ntext content\nand then down here we're going to do the\ninner text\nif i save that and inspect our page go\nover to our console\nyou're going to notice something\ninteresting the text content prints out\nhello and by\nand you also notice it prints out all\nthe spacing around these as well as the\nindentation of all of that\nwhile inner text just prints out the\ntext that's visible\non our page as you can see here this is\nthe difference between the two\ntext content is going to print you out\nthe exact text content\nall of the spacing all of the\nindentation of all of the content inside\nthe div\nin our case that's this hello as well as\nthis buy but inner text is different in\nthat it looks at the css to see\nis this actually visible on the screen\nif so i'm going to give it to you\notherwise i'm not also if we just remove\nthis here\nand resave you'll notice that these show\nslightly differently because\nthe way text content works is it just\ncopy and paste the text essentially\ndirectly from your html\nbut what happens with inner text is it\nactually displays your text\njust like it would be displayed inside\nof your html\nso as you can see here our text inside\nthe body\nyou know if we go into this div here has\nall the indentation around it\nwhile inside of our html they're just\nnext to each other with a space in\nbetween them\nso when we print out the inner text it\njust prints it out like the html would\nwhile text content is actually printing\nit out as the html itself\nrepresents it with all the extra spacing\nand showing the invisible elements\nso that's the main difference between\ntext content and inner text really for\nthe most part this is not going to be a\nbig\ndeal but it's nice to know when you're\naccessing them whether or not you're\ngoing to get invisible or visible\ninformation\nusing inner text versus text content so\nwe've talked about appending\ncreating elements and modifying the text\ninside of them but something else we can\ndo is modify the html\ninside of an element so let me just\nremove what we have inside of our body\nhere so we have completely blank body\nagain\ni'm going to remove this code and i'm\ngoing to uncomment this back so we have\nexactly what we had before we created a\ndiv\nand we set the text to hello world 2.\nwhat if we want to actually put html\ninside of here let's say we wanted this\nto be bolded so we'll put the strong tag\nin here\nand we'll do a strong tag here close\nthat off if we save\nyou notice it just prints out the text\nexactly as is\nand it doesn't matter if we use inner\ntext or text content they both work the\nsame\nif you want to render html inside of a\ndiv or inside of any element\nyou need to use what's called inner html\nnow if i save this you'll notice that\nthis becomes bold now\nand it actually uses these html tags to\nrender out the content\nnow this is really powerful since you\ncan render html directly from your\njavascript\nbut it is a huge security problem\nbecause if you allow users\nto put user generated content into an\ninner html\nthey could write malicious code and\ninstead of going super in depth on the\nsecurity concerns of this i'm going to\nreference another video i created\nspecifically on this concept it's linked\nin the description down below and the\ncards above\nbut just know that inner html is the\nonly way in javascript where you can\nactually\nadd html from a string into an element\nlike this\nanother thing you could do is you could\ncreate a new element we could say\nconst strong equals document dot\ncreate whoops dot create\nelement if i can spell correctly there\nwe go\ncall it strong and then we can say\nstrong dot\ninner text is going to be equal to\nhello world 2 and then we can just say\ndiv\ndot append strong\nand now if we save we get the exact same\nresult we had with inner html we just\nbroke it out and wrote the javascript by\nhand\nthis is a much more secure way to do\nthis if for example this inner text here\nhello world 2\nis provided to you by the customer or by\nyou know user of your website\nas opposed to being hardcoded but either\nway you get the same exact results done\nand it's nice to know that you can use\nthis append on any element it doesn't\nhave to be the body it can be any\nelement on your entire page\nso now i'm just going to go back to our\nhtml i want to bring that code back that\nwe had with this hello span\nand i'm just going to give this an id of\nhi\ni'm going to give this one an id of buy\njust like that\nthat way we have some html to work with\ni'm just going to get rid of all the\ncode that we have here so far we're\ngoing to say const\ndiv is equal to document.queryselector\nof div i'm going to say span 1\nor we'll call it span high is equal to\ndocument.queryselector\nof i and then we had span by these are\njust our three different elements that\nwe just created\nand what if you want to actually remove\nelements from the dom\nso far we've talked about all the\ndifferent ways you can add elements and\nmodify the content inside of them\nwhat if you want to remove an element\nlet's say we want to remove this by\nwhat we could do is we could just say\nspan by and we could call the remove\nfunction if we do that you can see it\ncompletely removes that element and if\nwe inspect our page\nit doesn't even appear inside of the\nhtml at all it's completely gone so it\njust deletes it from existence\nwe could come back and later add it we\ncould say div\ndot append span by\nand it would add itself back in if we\nwanted it doesn't you know completely\nirreversibly delete it we still have\naccess to it but it removes it from the\nhtml\nand we'd have to add it back ourselves\nif we wanted another way that we can\nremove elements\nis by removing them from the parent we\ncould say div dot remove\nchild and if i spelled remove correctly\nall we need to do is pass in a child for\nexample span high\nand you can see the removes the span\nhigh that is a child of our div\ngenerally i just use remove because if i\nhave access to the element why would i\nwant to do remove child it's easier just\nto say you know span high dot\nremove this is way easier in my opinion\nand it does the exact same thing so\ngenerally i use remove instead of remove\nchild\nso that covers a lot of the ways that\nyou can manipulate the html directly\nremoving adding elements and so on\nbut what if you want to actually just\nget properties of elements or add\nclasses or data attributes and that kind\nof stuff\nthis is honestly where i do most of my\ndom manipulation and luckily there's a\nton of different tools we can use\nthe first one i want to talk about is\nhow you can modify the actual attributes\nof an element\nif we go back over here we can just go\nto our span let's give it a title of you\nknow\nhello and all a title does is when you\nhover over something if i just\nstop myself from removing it if we hover\nover it eventually you're going to get a\ntooltip that says your title so that's\none attribute and we also have the id\nattribute on it already\nand let's say we want to access these\nattributes inside of javascript\nwell we could just say span high and we\ncan say git\nattribute and all we do is pass out the\nname for example id\nlet's just come in here console.log that\nout\nand now if i inspect this page and we go\nto our console\nyou can see it prints out the id which\nis hi i could also get the title\nwhich is hello and you can see that\nprints out itself but i don't really use\ngit attribute that much\nbecause i could also just say span high\ndot id\nit prints out hi i could say span high\ndot title and it prints out hello\nso generally if there's an attribute\nthat you would get with git attribute\noops get attribute it's generally\navailable already as a method on the\nelement itself\nbut the nice thing about git attribute\nis it's really explicit what you're\ndoing so sometimes you may not have the\nattribute available as a method on\nyour actual element so using git\nattribute is a great way to get around\nthat\nnow the next way you can do is with set\nattribute so i could say set attribute i\nwant to set the id\nto the value of i will just say this\nand now if i just come over to my\nelements and i go to that element\ninside the div you can see our id has\nbeen changed to that sdf sdf that we\ntyped in\nalso i could change the title so i could\nsay title equals that\nand now again if i select that element\nour title has been\nupdated we can use set attribute but\nagain i could always just change the id\nlike this i could say the id is equal to\nyou know sdf sdf\ni'm just going to take this out of a\nconsole log and i save\nand you can see again i updated the\ntitle that way so you can use either one\nwith git attribute and set attribute it\nreally doesn't matter\nnow the last thing which is much more\nuseful in my opinion is remove attribute\nand just like the others give it your\nattribute you want to remove in our case\ntitle\nand now if we go to that element you can\nsee it no longer has a title or we could\nremove the id\nand now it no longer has an id so remove\nattribute is a great way to remove\nattributes from an element really easily\nsuper explicit it's really nice\nnow the next thing you can do for\nmanipulating elements is to deal with\ndata\nattributes which are just like normal\nattributes but they start with\ndata hyphen and their custom attributes\nyou can add to elements\nand if you want to learn more about data\nattributes i have a whole blog on them\ni'm going to link down in the\ndescription below so you can check it\nout\nwe'll just say data we'll call this test\nand we'll set it equal to\nthis is a test we can get rid of this\ntitle here for now\nand now what i want to do is get that\ndata attribute and\nluckily in javascript this is really\neasy to do there's a property\ncalled data set which contains all of\nyour custom data attributes\nso i just want to log out what data set\nis so we can see exactly what we're\nworking with\nif i go over to the console you can see\nwe get this dom string map\nand it has our test property and it says\nthis is a test\nso you noticed it took our data test\nconverted it it got rid of the data part\nand just said test and then it has the\nvalue\nlet's come in here and add another one\nwe'll say data\nlonger name just like that\nand we'll set that equal to just random\ntext doesn't matter\nnow we look in here you see again that\ndata hyphen part has been removed\nand also the text longer hyphen name has\nbeen converted to camel case which is\nlike the javascript way of doing things\nwhere it has a capital n and it doesn't\nhave hyphens so now what we could do is\nwe could say\ni want to get the you know data test\nproperty so i say dataset.test\nand it prints out this is a test what if\ni want to get the longer name\nnow it prints out that sdfsdf that i\ntyped in so with data sets\nyou can really easily access any\nproperty just by typing it out\nand you can also set properties just as\neasily so i could set a new property say\nnew name is equal to you know we'll just\ncall this\nhi and now if i grab that element and i\nlook at it\nyou can see we have data hyphen new\nhyphen name is equal to high\nso it converts this camel case version\ninto a hyphenated version and it also\nadds that data hyphen at the beginning\nso you know that it's a custom data\nattribute\ndata sets super useful and i use them\nliterally all the time inside of my\njavascript code\nthe next thing i want to talk about is\nclasses we can get all the classes of an\nelement\nlet's just come in here and add a class\nto the span we'll say class\nis equal to we'll give it two classes\nwe'll say\nhigh one and high two these are our two\ndifferent classes\nso now what we can do is we can just\ntake that span high we can access a\nproperty called\nclass list and this class list has a ton\nof different methods you can use to\nmodify different classes add remove and\nso on i actually have an entire blog\narticle on it which i'll link in the\ndescription below it goes in a bit more\ndepth but i'm going to cover the most\nimportant ones in this video\nso you have classlist.ad which allows\nyou to add a class we'll say\nnew class save that and now if we look\nat our class list it has\nnew class inside of it we could also\nremove a class so let's say i want to\nremove\nthe high one class i just say remove\nhigh one if we look over here\nit didn't actually remove itself because\ni spelled high run wrong now if i save\nagain you can see high one has been\nremoved because we used remove\nand we also have toggle which is really\nuseful we could say toggle hide2\nand what that's going to do is it's\neither going to remove it if it exists\nalready\nor add it if it doesn't so if it says\nhigh 3 you can see it added high 3\nbecause we didn't have that class yet\nalso we can pass a boolean to this\nwhether it's false\nor true and what it will do is it will\nautomatically remove it\nif we pass in false or if we pass in\ntrue\nit'll automatically add this class so\nit's a great way to do adding or\nremoving\njust based on a boolean and those are\nprobably the most common ways you're\ngoing to use classlist\nnow the final thing i want to talk about\nwhen it comes to dom manipulation is\ndirectly modifying the style\nproperty of any element the style\nproperty is essentially a way to access\nany css property\nlet's say we want to set the color here\nto red\nnow if i save you can see the text has\nturned red over here\nif i wanted to access the background\ncolor\nit's going to be slightly different\nyou'll notice that i actually convert\nthe css property which is\nbackground hyphen color and i camel case\nit just like this as if it was data set\nand now when i save the background color\nhas turned red so if you want to set any\ncss property\njust do style dot and then that property\nname converted to\ncamel case and then you set it to\nwhatever value we want for example\nin this case red if you're interested in\ntaking your javascript skills to the\nnext level\nmake sure to check out my full\njavascript simplified course\nlinked in the description which is going\nto teach you everything you need to know\nabout javascript\nthank you very much for watching and\nhave a good day"
    },
    {
        "topic": "Introduction to backend programming",
        "url": "https://www.youtube.com/watch?v=iEyA1dXZs_M",
        "transcript": "Error fetching transcript for video iEyA1dXZs_M: \nCould not retrieve a transcript for the video https://www.youtube.com/watch?v=iEyA1dXZs_M! This is most likely caused by:\n\nNo transcripts were found for any of the requested language codes: ('en',)\n\nFor this video (iEyA1dXZs_M) transcripts are available in the following languages:\n\n(MANUALLY CREATED)\nNone\n\n(GENERATED)\n - hi (\"Hindi (auto-generated)\")[TRANSLATABLE]\n\n(TRANSLATION LANGUAGES)\n - ab (\"Abkhazian\")\n - aa (\"Afar\")\n - af (\"Afrikaans\")\n - ak (\"Akan\")\n - sq (\"Albanian\")\n - am (\"Amharic\")\n - ar (\"Arabic\")\n - hy (\"Armenian\")\n - as (\"Assamese\")\n - ay (\"Aymara\")\n - az (\"Azerbaijani\")\n - bn (\"Bangla\")\n - ba (\"Bashkir\")\n - eu (\"Basque\")\n - be (\"Belarusian\")\n - bho (\"Bhojpuri\")\n - bs (\"Bosnian\")\n - br (\"Breton\")\n - bg (\"Bulgarian\")\n - my (\"Burmese\")\n - ca (\"Catalan\")\n - ceb (\"Cebuano\")\n - zh-Hans (\"Chinese (Simplified)\")\n - zh-Hant (\"Chinese (Traditional)\")\n - co (\"Corsican\")\n - hr (\"Croatian\")\n - cs (\"Czech\")\n - da (\"Danish\")\n - dv (\"Divehi\")\n - nl (\"Dutch\")\n - dz (\"Dzongkha\")\n - en (\"English\")\n - eo (\"Esperanto\")\n - et (\"Estonian\")\n - ee (\"Ewe\")\n - fo (\"Faroese\")\n - fj (\"Fijian\")\n - fil (\"Filipino\")\n - fi (\"Finnish\")\n - fr (\"French\")\n - gaa (\"Ga\")\n - gl (\"Galician\")\n - lg (\"Ganda\")\n - ka (\"Georgian\")\n - de (\"German\")\n - el (\"Greek\")\n - gn (\"Guarani\")\n - gu (\"Gujarati\")\n - ht (\"Haitian Creole\")\n - ha (\"Hausa\")\n - haw (\"Hawaiian\")\n - iw (\"Hebrew\")\n - hi (\"Hindi\")\n - hmn (\"Hmong\")\n - hu (\"Hungarian\")\n - is (\"Icelandic\")\n - ig (\"Igbo\")\n - id (\"Indonesian\")\n - iu (\"Inuktitut\")\n - ga (\"Irish\")\n - it (\"Italian\")\n - ja (\"Japanese\")\n - jv (\"Javanese\")\n - kl (\"Kalaallisut\")\n - kn (\"Kannada\")\n - kk (\"Kazakh\")\n - kha (\"Khasi\")\n - km (\"Khmer\")\n - rw (\"Kinyarwanda\")\n - ko (\"Korean\")\n - kri (\"Krio\")\n - ku (\"Kurdish\")\n - ky (\"Kyrgyz\")\n - lo (\"Lao\")\n - la (\"Latin\")\n - lv (\"Latvian\")\n - ln (\"Lingala\")\n - lt (\"Lithuanian\")\n - lua (\"Luba-Lulua\")\n - luo (\"Luo\")\n - lb (\"Luxembourgish\")\n - mk (\"Macedonian\")\n - mg (\"Malagasy\")\n - ms (\"Malay\")\n - ml (\"Malayalam\")\n - mt (\"Maltese\")\n - gv (\"Manx\")\n - mi (\"M\u0101ori\")\n - mr (\"Marathi\")\n - mn (\"Mongolian\")\n - mfe (\"Morisyen\")\n - ne (\"Nepali\")\n - new (\"Newari\")\n - nso (\"Northern Sotho\")\n - no (\"Norwegian\")\n - ny (\"Nyanja\")\n - oc (\"Occitan\")\n - or (\"Odia\")\n - om (\"Oromo\")\n - os (\"Ossetic\")\n - pam (\"Pampanga\")\n - ps (\"Pashto\")\n - fa (\"Persian\")\n - pl (\"Polish\")\n - pt (\"Portuguese\")\n - pt-PT (\"Portuguese (Portugal)\")\n - pa (\"Punjabi\")\n - qu (\"Quechua\")\n - ro (\"Romanian\")\n - rn (\"Rundi\")\n - ru (\"Russian\")\n - sm (\"Samoan\")\n - sg (\"Sango\")\n - sa (\"Sanskrit\")\n - gd (\"Scottish Gaelic\")\n - sr (\"Serbian\")\n - crs (\"Seselwa Creole French\")\n - sn (\"Shona\")\n - sd (\"Sindhi\")\n - si (\"Sinhala\")\n - sk (\"Slovak\")\n - sl (\"Slovenian\")\n - so (\"Somali\")\n - st (\"Southern Sotho\")\n - es (\"Spanish\")\n - su (\"Sundanese\")\n - sw (\"Swahili\")\n - ss (\"Swati\")\n - sv (\"Swedish\")\n - tg (\"Tajik\")\n - ta (\"Tamil\")\n - tt (\"Tatar\")\n - te (\"Telugu\")\n - th (\"Thai\")\n - bo (\"Tibetan\")\n - ti (\"Tigrinya\")\n - to (\"Tongan\")\n - ts (\"Tsonga\")\n - tn (\"Tswana\")\n - tum (\"Tumbuka\")\n - tr (\"Turkish\")\n - tk (\"Turkmen\")\n - uk (\"Ukrainian\")\n - ur (\"Urdu\")\n - ug (\"Uyghur\")\n - uz (\"Uzbek\")\n - ve (\"Venda\")\n - vi (\"Vietnamese\")\n - war (\"Waray\")\n - cy (\"Welsh\")\n - fy (\"Western Frisian\")\n - wo (\"Wolof\")\n - xh (\"Xhosa\")\n - yi (\"Yiddish\")\n - yo (\"Yoruba\")\n - zu (\"Zulu\")\n\nIf you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!"
    },
    {
        "topic": "Database management",
        "url": "https://www.youtube.com/watch?v=3EJlovevfcA",
        "transcript": "Hello friends, welcome to Gate Smashers\ntoday we are going to start with\nthe very first lecture of DBMS\ni.e. database management system,\nDBMS is a very important system\nin terms of GATE exam, UGC NET exam\nand other competitive exam.\n Even if I say a simple thing,\nin today's time for a B.tech student\nand even BCA student,\nDBMS is very important subject,\nmeans you can also say that\nit's very emerging subject,\n means if I talk about 6-7 years ago from today,\nthen at that time less questions were\nasked from DBMS in interviews,\nbut today's time Most of the questions\n are being asked from the database.\nThe major reason for this is that\nall the top companies,\nthe major MNC companies, which we call\nTop Fifty Fortune Company like Facebook,\nGoogle, Amazon,\nSo whatever major company are there,\nAll their work is going on on whom,\nis running on the database.\nAll this company whose\nwork is based on the database,\nso obviously they will ask the question\nfrom the database itself.\nSo that's why DBMS is a very important\nsubject even from the interview point of view.\nso we are starting DBMS,\nI am starting from the very initial level,\nso first of all I have written here database system,\nI am not talking about DBMS right now,\nthe first term I am talking\nabout here Database system.\nDatabase system, what is database system\nas I just told about Facebook.\nEven let's talk about India then Indian Railways,\n if we talk about IRCTC,\nthen Indian Railways has its own database system,\nFacebook has its own database system,\nwhat Flipkart has, its own database system.\nNow there are 2 terms in that database system,\none is database, one is DBMS,\nwhich means database system is\ncomprised of two things,\none is database and another one is DBMS.\nNow if I talk about database,\n what is the database ?\nIt has absolutely simple definition,\ndatabase is a collection of related data.\nhere I am telling you in a very layman language\nit is a collection of related data.\nAs the name suggests, database means\nwhere a lot of data is collected.\nBut related data,\nwhat is the meaning of related data\nlike we talk about Indian Railways,\nIRCTC has its own database,\n a very big database.\nNow in that database, What will happen in that?\nWhat happens when you log in, first of all,\nlike the information of the train,\nmeans if you want to go somewhere,\nthen you are searching the information\nof the train in it.\nApart from that, what IRCTC will have,\ninformation of the passenger,\nwhich passengers,\nThose who have ever traveled on a train\nor are logged into IRCTC account.\nWill they have the data of the people\n from all over India.\nNo, what I am trying to tell you here,\n that database is a collection of related data.\nIt is not that\nwe club any data among themselves,\nmeans Indian Railways cannot club the\ndata of Indian Passport with their data,\nthey have their own data base,\ntheir own database of passport holders.\nIndian railway people have their own data base,\nthat's why it is related data.\nNow here I have further bifurcated it.\nGenerally database is structured & call it unstructured,\nalthough generally it is three structured,\nsemi structured and unstructured.\nBut actually if we talk about DBMS,\nthen today's time, It doesn't come in so\nmuch details in gate or UGC NET,\nbut you should know about\nwhat is structured data and unstructured data.\nWhat is structured data, such database\nwhich I can store in any  particular shape or\nin a particular structure.\nAnd unstructured means which has no\nparticular structure like I have written\na simple example here,\nIndian railways data or university data.\nNow university data or railways data,\nWhy it is structured because there is\na particular structure for them.\nWhich structures, the most important\nstructures are used for structured data base\nthat is RDBMS\n(Relational database management system)\nNow I am coming here on this term\ndatabase management system.\nNow we are talking about that we saved the data\nmeans I have a lot of data,\nI saved the data in the backend,\nin hard drives, on the servers.\nNow What to do with that data,\nobvouisly users will search that data,\nuser want to access the data,\nNow they will do some updates in the data,\nwill insert some new data,\nwill delete some old data,\nmeans they have to perform what\noperation on an average,\nhave to do insertion means,\nsome data has to be added,\nhave to do deletion means\nsome data has to be deleted,\nhave to update. Update means some old data,\nlike address, address of a student\nwas something else,\nhas updated means it has changed.\nso we call all these things operations,\nOperations\n now I should have some system to\nperform all these operation,\nso that system we called\ndatabase management system.\nSo data base management system has\ncollection of operations\nwhich provides easiness to the users,\nso that the users can easily  perform\nthe operations in the database,\nwhich operations, insertion, deletion, updation\nNow where can be the data,\nthe data may be in the remote area,\nthat means for example\nif I am sitting in Delhi\nand where is my data stored, in Mumbai.\nSo the data, I have nothing to do with the location,\nI have to access the data\nand make some changes in that data.\n Means we access the data of IRCTC,\nwe do some reservation of train.\nSo we know where that data is stored, no.\nBecause users have nothing to do with it,\nthey just have to perform their operations.\nAnd the DBMS helps them to\nperform those operations.\nNow DBMS also we have various,\ndifferent- different companies have been\ncreated different-different\ndatabase management system\nlike, if I tell a simple example, Microsoft,\nMicrosoft corporation has made  SQL server,\nOracle people have also made different\nversions of SQL server 2005, 2008, 2010,\n2016, various different version,\nsame oracle has 2009, 2011, 2012 C,  2016,\ndifferent versions, similarly with my SQL,\nits belongs to Oracle and DB2,\nits DBMS of IBM to manage the data,\nNow here we are talking about structured data,\nI am only focusing only on structured data\nout of this whole\n because what I told, structured data is\nsuch data Which has proper\nstructure to store the data\nand that structure is relation.\nRelation means table,\nmeans we stored structured data\n in which format,\nin table format. Table means,\neven if you do not know about it,\nno problem,\nI am explaining it in a very simple point of view,\nmeans if you have seen the excel file,\nthere are columns amd rows,\nyou can compare that with it.\nMeans what is a table,\nin which there are some columns\nand different different rows.\nNow technically we call this table, relation.\nBut what is my point is that\nhow we store data structure data\ncan also have different ways\nbut the most useable method is relation,\nmeans how to store data in relation form,\nin table form.\nNow when I am storing the\ndata in the form of relation\nthen obviously I also need some management system,\n i need some platform\nwhich support the relation.\nMeans whenever the user access the data,\nit show the relation.\nwhenever users store data,\nit goes and store the data in the relation,\nlike IRCTC.\nNow if you remember that\n you have ever logged in to IRCTC,\nthen you first check it,\nwhen you enter the source and destination,\nthen you will get the information of all the trains,\nAnd it comes in which format,\n it comes in the table format,\nin which first column is train number,\ntrain name\n& also different like number of compartment,\napartments, type of seats, departure time,\ndeparture date, different\ndatabases have their own columns.\nwe're not talking about that right now.\nWe are talking in simple format,\nwhom I am talking about here,\nonly structured data. Because in B.Tech\nwhich we study RDBMS\n(Relational Database Management System),\nin that all we are focusing on, on whom,\nthe structure. In GATE also questions comes from this,\nin UGC NET, even in all the competitive\nexams the questions comes on structure data,\nand how to store structured data,\nin the form of relation.\nNow storing the relation and accessing it,\nWhat do I need,  Management System.\nSo what is a DBMS? A Management System,\nbut for whom? for relation.\nSo that's why a new term has come from\nhere RDBMS,\nthat is relational database management system,\nso this is our subject\n i.e. relational database management system,\na system where we can perform, insert,\ndelete, update many operations.,\nbut on whom will we perform?\n On relations.\nSo this is the basic introduction of the RDBMS.\nI forget to explain about unstructured data actually,\nunstructured data means\ndata which does not have\nany particular structure to store it,\nmeans there is no predefined structure\nwhere I can store that data. Why ?\nBecause the majority of the data in the\nunstructured data are like photos, videos,\nwhich do not have any particular format.\nAs i am talking about a web page,\nwhat is in a web page,\nweb page is a collection of photos, videos, chats\nthey do not have any particular format,\nthey can be in any format.\n It may means that the web page first\ncontains the video, then your image,\nthen some text in it or maybe\nthe first few paragraphs came.\nBut structured data will always be in a\nparticular format and what is its format?\nTable.\nWe are  not talking about unstructured data\nbecause our main topic is,\nour subject is RDBMS is\nworking only on structure data.\nThis is just a extra thing,\n I just want to explain to you.\nAnd another one point is,\nif i talk about today's time,\n90% of the data on the Earth is actually\nunstructured.\nSo all the technologies in today's time,\nthe maximum technologies are coming\non the unstructured data,\nBut this doesn't mean that structure data is closed,\nstructured data is also exist.\nBut most of the technologies are  on\nunstructured data which is being used\nthe most at today's time,\nlike if i tell a simple example then\nIf we talk about big data or Hadoop,\nwe use all these terms in unstructured data.\nBut here i will explain only about\nstructured data and RDBMS\nin further videos."
    },
    {
        "topic": "Building dynamic web pages",
        "url": "https://www.youtube.com/watch?v=_wFJj94kSTU",
        "transcript": "welcome to this video what's the\ndifference between static websites and\ndynamic websites this is the question\nI'll answer in this video because I get\nit a lot and it's important to\nunderstand what the differences are and\nwhat they are actually not because it's\neasy to get that wrong so let's have a\nlook and dive into that\nand for that I prepared a super simple\nproject a static in a dynamic folder\nlet's have a look at the static page\nfirst this is a static web page\nstatic web page means it consists of\nHTML CSS and JavaScript not necessarily\nall these things you can just have HTML\nif you want but definitely not more and\nwith JavaScript I don't mean no js' I\nmean JavaScript that runs in the browser\nthis app here for example if I double\nclick my index.html file in the Mac\nfinder looks like that it has a button\nif I click 'add I see this text because\nin my code this is the mark-up I got\nthis button here and I got this text\nwhich is initially not visible I got\nsome CSS code styling everything and the\nJavaScript code turns that paragraph to\nbe visible by listening to a click on\nthe button and then just changing the\nstyle of the paragraph to display block\npreviously it was display:none this is\nstatic and it's all important to\nunderstand obviously the page wasn't\nthat static something changed on the\npage right so the page when it runs it's\nkind of dynamic we still have\ninteractions there we can listen to user\nevents we can change something on the\npage\nstatic simply means that it's not\ngenerated on the server the HTML code\nwe're getting the JavaScript code we're\ngetting empty CSS code we're getting is\nnot generated dynamically it's already\nthere it's hosted on a server and it's\nlying there on the server in the version\nwe as a user receive it the JavaScript\ncode can then mess with the Dom and\nchange things but the input files were\ngetting the raw source code files are\nalready pre-built\nand the source code doesn't change with\nthe next request we sent and that's\ndifferent for dynamic pages I also got a\ndynamic page which is only dead\nserver.js fall and if I send my request\nthere by simply running that with the\nnote command I installed no chess on my\nmachine of course I'll start the server\nrunning on localhost 3000 let's visit\nthat and I get back some\nHTML but if I reload it you'll see that\nthis random value always changes now\nthis is not done with javascript in the\nbrowser instead if I inspect my HTML\ncode here or not here but actually the\npage source you see that the page source\nis this HTML code and the value in there\nis hard-coded into that source code so\nit's not changed dynamically at runtime\nthis happens because in server j/s I\nreturned HTML code and I generate that\nvalue on the server\nthis means dynamically generated the\nHTML code I get back from the server is\nnot always the same every new request\ncan yield a different page typically you\ndon't really use that to randomly\ngenerate numbers but maybe you sent back\na page where that card shopping cart\nnumber in the top right corner was\nupdated on the server or you sent back a\nnew page when the user is locked in so\nthe HTML markup you get back adjusts\ndynamically on the server and of course\nyou can build one at the same thing in a\ndynamic way where you render it on the\nserver or in a static way where you have\na prebuilt HTML file which is then\nchanged by Java Script on the browser in\nthe client so both is possible so often\nyou can use both to achieve the same\nresult but the important thing here is\nto understand what dynamic means things\nchange on the server a new request can\nyield a different file where a static\nalways means the files never change they\nsit on a server and you always get this\nexact version but what's better then\nespecially when you can build the same\nwhich one should you choose let's\ncompare them on a static page we talked\nabout HTML CSS in JavaScript and these\nfiles are not dynamically rendered on a\nserver but and that's important still\nserved by a server of course every web\npage has to sit on a server when you\nreach it through a domain but they're\nnot dynamically generated you always get\nthe same set of pre-built files the page\ncontent can change though through\njavascript in the browser not on the\nserver so static does not mean that the\npage never changes\nit just means it's pre-built during\ndevelopment and not change dynamically\non the server dynamic means that the\ncontent is generated through some\nserver-side language like PHP or nodejs\nin my example and that the return page\nis dynamically generated so the server\nreturns a dynamically generated page and\nthat page is not necessarily always the\nsame because the HTML code and also\npartly the JavaScript code even can be\ngenerated on the server after being\nreturned you can of course still have\nJavaScript which changes something in\nthe Dom so that still is possible but\nthe server side of course is not doing\nanything on the loaded page once it's in\nthe browser that's technically not\nreally possible you can have JavaScript\nlistening to incoming events but that's\njavascript in the browser not the server\nside so dynamic rendering is really\nabout that first render when you send a\nrequest and get back a page dynamic\ntherefore does not mean that there is no\nHTML page being served it's just built\ndynamically for each request so what's\nbetter than well static means that\nrendering happens in the browser the\nJavaScript code can manipulate the page\nyou get back always the same\nrelatively empty page especially when\nbuilding a single page application where\neverything is handled with JavaScript\nbut of course that higher reactivity\nwhich you get by using JavaScript\ntypically all the updates are faster\nusers see it changes on the page faster\nbecause they don't have that extra\nround-trip of sending a request waiting\nfor the response seeing that refresh\nicon of the browser spin and seeing a\nwhite page instead you can show a more\nbeautiful spinner when you're waiting\nfor data everything happens in a more\nreactive way but obviously that also has\nsome disadvantages since the page is not\nfinished when you get it\nusers might see something might see some\nnice spinner but they still see a\nspinner the content still has to be\nfetched from the browser and if you're\ndoing a very performance intensive\nupdate work you might even get\nperformance issues in the browser since\nall the work happens there and not on\nservers which might be more powerful\nthan your users machines additionally\nfor search engine optimization the\nsearch engine doesn't necessarily see\nthe data which is loaded after half a\nsecond it only sees the empty page which\nwell gets returned initially so death\ncan be something you need to consider\nthough of course not every app needs\nsearch engine optimization if you're\nbuilding a business app which is hidden\nbehind a login anyways doesn't matter\ndynamic pages render on the server\ntherefore the finished page gets\nreturned which is great for search\nengine optimization which also means\nusers don't have to wait for the data\nafter they see your page they have to\nwait for your page though so it's\nbasically a trade-off security can be\nmore complex in static pages because\njavascript code in the browser can be\nhacked can be read is not safe so you\nhave more creative solutions for\nsecurity they exist you can write secure\nstatic apps there are tons of single\npage applications out there which are\nsecure but it tends to be a bit more\ncomplex in my opinion it's easier on the\nserver side also because we built apps\nlike this for ages and therefore we have\nway more solutions and best practices\nand packages that helped us there last\nbut not least a static host suffices for\nstatic pages this means a host which is\nonly capable of returning HTML CSS and\nJavaScript or any files but which\ndoesn't need to run any server-side code\nand that is typically cheaper and less\ncomplex for dynamic pages you obviously\nneed a host which is capable of running\nyour node code or your PHP code or\nwhatever you have and speaking of that\nlet's have a look at deployment for\nstatic pages only a static host is\nneeded as I said so only a host which is\nable to serve your files for dynamic\npages you need a host which runs your\nserver-side language and that means\nstatic hosts often are cheaper and\neasier to set up because there is not\nmuch to configure dynamic hosts well you\nneed to find a host which supports your\nserver set language and the version of\nthe language you're using that's also\nsometimes not the case and then you\nmight need to do\nor set up you have to check you have to\ndo more things because more code runs on\nthe server so you have to ensure deaded\nruns examples for static hosts are AWS\nas free firebase hosting there are of\ncourse way more for dynamic hosts we\nhave AWS ec2 or elastic beanstalk for a\nmore integrated approach or Heroku or of\ncourse also a lot more so who's the\nwinner then there isn't a winner it\nreally depends on which kind of app\nyou're building what about search engine\noptimization are you willing to put in\nthat extra word regarding security how\nimportant is that complex server setup\nthing for hosting dynamic pages it's\nthings like that you have to take into\naccount and it's always worth to dive\ninto both worlds build some demo apps\nwith both approaches and get a feeling\nfor the challenges you face with each\napproach and which approach better suits\nyour needs these days static pages tend\nto be super popular because with\nJavaScript driving everything we can\noffer a native app like experience to\nusers in the browser it's very important\nthese days that things update constantly\nwe give immediate feedback and that\ntends to be easy with static apps\nbecause JavaScript runs in the browser\nyou don't need to wait for a response to\nchange something it's harder with\ndynamic apps that being said the\nmajority of the app is still driven by\nthese apps so saying that DS would not\nmatter anymore is certainly wrong and by\nthe way you'll always need server-side\ncode if you don't write a app which\nreturns dynamically generated HTML code\nwell then you will at least write some\nREST API that offers end points for your\nstatic app to fetch and store data I\nhope this was helpful definitely join\nthe comments area and let me know what\nyou think about that what your thoughts\nare and what you think about this video\nof course hopefully see you in future\nvideos too bye"
    },
    {
        "topic": "Introduction to version control",
        "url": "https://www.youtube.com/watch?v=2ReR1YJrNOM",
        "transcript": "[Music]\nso what is git and why is it so popular\ngit is the most popular version control\nsystem in the world\na version control system records the\nchanges made to our code over time\nin a special database called repository\nwe can look at our project history and\nsee\nwho has made what changes when and why\nand if we screw something up we can\neasily revert our project back to an\nearlier state\nwithout a version control system we'll\nhave to constantly store\ncopies of the entire project in various\nfolders\nthis is very slow and doesn't scale at\nall especially if multiple people have\nto work on the same project\nyou would have to constantly toss around\nthe latest code via email or some other\nmechanisms\nand then manually merge the changes so\nin a nutshell\nwith a version control system we can\ntrack our project history and work\ntogether\nnow version control systems fall into\ntwo categories\ncentralized and distributed in a\ncentralized system\nall team members connect to a central\nserver to get the latest copy of the\ncode\nand to share their changes with others\nsubversion and microsoft team foundation\nserver\nare examples of centralized version\ncontrol systems\nthe problem with the centralized\narchitecture is the single point of\nfailure\nif the server goes offline we cannot\ncollaborate or save snapshots of our\nproject\nso we have to wait until the server\ncomes back online\nin distributed systems we don't have\nthese problems every team member has a\ncopy of the project with its history on\ntheir machine\nso we can save snapshots of our project\nlocally on our machine\nif the central server is offline we can\nsynchronize our work directly with\nothers\ngit and mercurial are examples of\ndistributed version control systems\nout of all these git is the most popular\nversion control system in the world\nbecause it's free open source super fast\nand scalable\noperations like branching and merging\nare slow and painful in\nother version control systems like\nsubversion or tfs\nbut they're very fast and git we'll talk\nabout this later\nso git is almost everywhere more than 90\nof software projects in the world use\nget\nthat's why almost every job description\nfor a software developer mentions git\nso if you're looking for a job as a\nsoftware developer git is one of the\nskills you must have on your resume\nyou should know it inside out you should\nknow how it works and how to use it to\ntrack your project history\nand collaborate with others effectively\nif you want to learn git\ni have a one hour tutorial here on my\nchannel the link is below this video\nif you enjoyed this video please give it\na like and subscribe to my channel for\nmore videos like this\n[Music]\nyou"
    },
    {
        "topic": "Using Git for tracking changes and collaborating on projects",
        "url": "https://www.youtube.com/watch?v=e9lnsKot_SQ",
        "transcript": "Error fetching transcript for video e9lnsKot_SQ: \nCould not retrieve a transcript for the video https://www.youtube.com/watch?v=e9lnsKot_SQ! This is most likely caused by:\n\nNo transcripts were found for any of the requested language codes: ('en',)\n\nFor this video (e9lnsKot_SQ) transcripts are available in the following languages:\n\n(MANUALLY CREATED)\n - en-US (\"English (United States)\")[TRANSLATABLE]\n\n(GENERATED)\nNone\n\n(TRANSLATION LANGUAGES)\n - ab (\"Abkhazian\")\n - aa (\"Afar\")\n - af (\"Afrikaans\")\n - ak (\"Akan\")\n - sq (\"Albanian\")\n - am (\"Amharic\")\n - ar (\"Arabic\")\n - hy (\"Armenian\")\n - as (\"Assamese\")\n - ay (\"Aymara\")\n - az (\"Azerbaijani\")\n - bn (\"Bangla\")\n - ba (\"Bashkir\")\n - eu (\"Basque\")\n - be (\"Belarusian\")\n - bho (\"Bhojpuri\")\n - bs (\"Bosnian\")\n - br (\"Breton\")\n - bg (\"Bulgarian\")\n - my (\"Burmese\")\n - ca (\"Catalan\")\n - ceb (\"Cebuano\")\n - zh-Hans (\"Chinese (Simplified)\")\n - zh-Hant (\"Chinese (Traditional)\")\n - co (\"Corsican\")\n - hr (\"Croatian\")\n - cs (\"Czech\")\n - da (\"Danish\")\n - dv (\"Divehi\")\n - nl (\"Dutch\")\n - dz (\"Dzongkha\")\n - en (\"English\")\n - eo (\"Esperanto\")\n - et (\"Estonian\")\n - ee (\"Ewe\")\n - fo (\"Faroese\")\n - fj (\"Fijian\")\n - fil (\"Filipino\")\n - fi (\"Finnish\")\n - fr (\"French\")\n - gaa (\"Ga\")\n - gl (\"Galician\")\n - lg (\"Ganda\")\n - ka (\"Georgian\")\n - de (\"German\")\n - el (\"Greek\")\n - gn (\"Guarani\")\n - gu (\"Gujarati\")\n - ht (\"Haitian Creole\")\n - ha (\"Hausa\")\n - haw (\"Hawaiian\")\n - iw (\"Hebrew\")\n - hi (\"Hindi\")\n - hmn (\"Hmong\")\n - hu (\"Hungarian\")\n - is (\"Icelandic\")\n - ig (\"Igbo\")\n - id (\"Indonesian\")\n - iu (\"Inuktitut\")\n - ga (\"Irish\")\n - it (\"Italian\")\n - ja (\"Japanese\")\n - jv (\"Javanese\")\n - kl (\"Kalaallisut\")\n - kn (\"Kannada\")\n - kk (\"Kazakh\")\n - kha (\"Khasi\")\n - km (\"Khmer\")\n - rw (\"Kinyarwanda\")\n - ko (\"Korean\")\n - kri (\"Krio\")\n - ku (\"Kurdish\")\n - ky (\"Kyrgyz\")\n - lo (\"Lao\")\n - la (\"Latin\")\n - lv (\"Latvian\")\n - ln (\"Lingala\")\n - lt (\"Lithuanian\")\n - lua (\"Luba-Lulua\")\n - luo (\"Luo\")\n - lb (\"Luxembourgish\")\n - mk (\"Macedonian\")\n - mg (\"Malagasy\")\n - ms (\"Malay\")\n - ml (\"Malayalam\")\n - mt (\"Maltese\")\n - gv (\"Manx\")\n - mi (\"M\u0101ori\")\n - mr (\"Marathi\")\n - mn (\"Mongolian\")\n - mfe (\"Morisyen\")\n - ne (\"Nepali\")\n - new (\"Newari\")\n - nso (\"Northern Sotho\")\n - no (\"Norwegian\")\n - ny (\"Nyanja\")\n - oc (\"Occitan\")\n - or (\"Odia\")\n - om (\"Oromo\")\n - os (\"Ossetic\")\n - pam (\"Pampanga\")\n - ps (\"Pashto\")\n - fa (\"Persian\")\n - pl (\"Polish\")\n - pt (\"Portuguese\")\n - pt-PT (\"Portuguese (Portugal)\")\n - pa (\"Punjabi\")\n - qu (\"Quechua\")\n - ro (\"Romanian\")\n - rn (\"Rundi\")\n - ru (\"Russian\")\n - sm (\"Samoan\")\n - sg (\"Sango\")\n - sa (\"Sanskrit\")\n - gd (\"Scottish Gaelic\")\n - sr (\"Serbian\")\n - crs (\"Seselwa Creole French\")\n - sn (\"Shona\")\n - sd (\"Sindhi\")\n - si (\"Sinhala\")\n - sk (\"Slovak\")\n - sl (\"Slovenian\")\n - so (\"Somali\")\n - st (\"Southern Sotho\")\n - es (\"Spanish\")\n - su (\"Sundanese\")\n - sw (\"Swahili\")\n - ss (\"Swati\")\n - sv (\"Swedish\")\n - tg (\"Tajik\")\n - ta (\"Tamil\")\n - tt (\"Tatar\")\n - te (\"Telugu\")\n - th (\"Thai\")\n - bo (\"Tibetan\")\n - ti (\"Tigrinya\")\n - to (\"Tongan\")\n - ts (\"Tsonga\")\n - tn (\"Tswana\")\n - tum (\"Tumbuka\")\n - tr (\"Turkish\")\n - tk (\"Turkmen\")\n - uk (\"Ukrainian\")\n - ur (\"Urdu\")\n - ug (\"Uyghur\")\n - uz (\"Uzbek\")\n - ve (\"Venda\")\n - vi (\"Vietnamese\")\n - war (\"Waray\")\n - cy (\"Welsh\")\n - fy (\"Western Frisian\")\n - wo (\"Wolof\")\n - xh (\"Xhosa\")\n - yi (\"Yiddish\")\n - yo (\"Yoruba\")\n - zu (\"Zulu\")\n\nIf you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!"
    },
    {
        "topic": "Ensuring that websites are accessible to all users",
        "url": "https://www.youtube.com/watch?v=rrCIDBEDXoM",
        "transcript": "foreign\nhow to ensure accessibility in front-end\nDevelopment building accessibility\nfeatures into the front end makes your\nsoftware product inclusive for all users\nit also helps ensure compliance with web\naccessibility standards in this brief\nvideo we'll explore some accessibility\nprinciples and best practices to\nconsider during front-end development\nstep one understand web accessibility\nstandards familiarize yourself with\nessential accessibility standards like\nwcag 2.1 these guidelines provide a\nblueprint for creating web-based\nsoftware accessible to people with\ndisabilities understanding these\nstandards is crucial for ensuring\ncompliance and providing a better user\nexperience step two focus on keyboard\nnavigation and Screen readers people\nwith disabilities often rely on keyboard\nnavigation and Screen readers to access\nweb content make sure your product is\nfully functional and easy to navigate\nusing only a keyboard also test your\nproduct with screen readers to identify\nand address any barriers to access step\n3 Implement color contrast and font\naccessibility make your product readable\nfor visually impaired users by\nmaintaining sufficient color contrast\nbetween text and background elements\nallow users to resize the text without\nany loss of content or functionality\nthese simple adjustments significantly\nenhance accessibility for a wide range\nof users\nstep four prioritize responsive design\nresponsiveness is critical for ensuring\nyour product is accessible on various\ndevices where they used on a desktop\ncomputer tablet or smartphone your\nproduct should adapt seamlessly to\ndifferent screen sizes and orientations\nit guarantees a consistent user\nexperience for everyone\nstep 5 use descriptive alt text for\nimages add descriptive alternative text\nto images on your web-based content alt\ntext helps visually impaired users\ncomprehend the content of those images\nit also improves search engine\noptimization and makes your website more\ninclusive for all users incorporating\naccessibility into your fun and\ndevelopment process helps everyone enjoy\nand benefit from their product\nit also ensures compliance with legal\nrequirements for accessibility so\nremember to design with accessibility in\nmind thank you for watching if you found\nthis video helpful don't forget to like\nAnd subscribe for more product\ndevelopment tips from\n[Music]"
    }
]
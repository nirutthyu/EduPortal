[
    {
        "topic": "Introduction to Data Structures",
        "url": "https://www.youtube.com/watch?v=5_5oE5lgrhw",
        "transcript": "Error fetching transcript for video 5_5oE5lgrhw: \nCould not retrieve a transcript for the video https://www.youtube.com/watch?v=5_5oE5lgrhw! This is most likely caused by:\n\nNo transcripts were found for any of the requested language codes: ('en',)\n\nFor this video (5_5oE5lgrhw) transcripts are available in the following languages:\n\n(MANUALLY CREATED)\n - en-IN (\"English (India)\")[TRANSLATABLE]\n\n(GENERATED)\n - hi (\"Hindi (auto-generated)\")[TRANSLATABLE]\n\n(TRANSLATION LANGUAGES)\n - ab (\"Abkhazian\")\n - aa (\"Afar\")\n - af (\"Afrikaans\")\n - ak (\"Akan\")\n - sq (\"Albanian\")\n - am (\"Amharic\")\n - ar (\"Arabic\")\n - hy (\"Armenian\")\n - as (\"Assamese\")\n - ay (\"Aymara\")\n - az (\"Azerbaijani\")\n - bn (\"Bangla\")\n - ba (\"Bashkir\")\n - eu (\"Basque\")\n - be (\"Belarusian\")\n - bho (\"Bhojpuri\")\n - bs (\"Bosnian\")\n - br (\"Breton\")\n - bg (\"Bulgarian\")\n - my (\"Burmese\")\n - ca (\"Catalan\")\n - ceb (\"Cebuano\")\n - zh-Hans (\"Chinese (Simplified)\")\n - zh-Hant (\"Chinese (Traditional)\")\n - co (\"Corsican\")\n - hr (\"Croatian\")\n - cs (\"Czech\")\n - da (\"Danish\")\n - dv (\"Divehi\")\n - nl (\"Dutch\")\n - dz (\"Dzongkha\")\n - en (\"English\")\n - eo (\"Esperanto\")\n - et (\"Estonian\")\n - ee (\"Ewe\")\n - fo (\"Faroese\")\n - fj (\"Fijian\")\n - fil (\"Filipino\")\n - fi (\"Finnish\")\n - fr (\"French\")\n - gaa (\"Ga\")\n - gl (\"Galician\")\n - lg (\"Ganda\")\n - ka (\"Georgian\")\n - de (\"German\")\n - el (\"Greek\")\n - gn (\"Guarani\")\n - gu (\"Gujarati\")\n - ht (\"Haitian Creole\")\n - ha (\"Hausa\")\n - haw (\"Hawaiian\")\n - iw (\"Hebrew\")\n - hi (\"Hindi\")\n - hmn (\"Hmong\")\n - hu (\"Hungarian\")\n - is (\"Icelandic\")\n - ig (\"Igbo\")\n - id (\"Indonesian\")\n - iu (\"Inuktitut\")\n - ga (\"Irish\")\n - it (\"Italian\")\n - ja (\"Japanese\")\n - jv (\"Javanese\")\n - kl (\"Kalaallisut\")\n - kn (\"Kannada\")\n - kk (\"Kazakh\")\n - kha (\"Khasi\")\n - km (\"Khmer\")\n - rw (\"Kinyarwanda\")\n - ko (\"Korean\")\n - kri (\"Krio\")\n - ku (\"Kurdish\")\n - ky (\"Kyrgyz\")\n - lo (\"Lao\")\n - la (\"Latin\")\n - lv (\"Latvian\")\n - ln (\"Lingala\")\n - lt (\"Lithuanian\")\n - lua (\"Luba-Lulua\")\n - luo (\"Luo\")\n - lb (\"Luxembourgish\")\n - mk (\"Macedonian\")\n - mg (\"Malagasy\")\n - ms (\"Malay\")\n - ml (\"Malayalam\")\n - mt (\"Maltese\")\n - gv (\"Manx\")\n - mi (\"M\u0101ori\")\n - mr (\"Marathi\")\n - mn (\"Mongolian\")\n - mfe (\"Morisyen\")\n - ne (\"Nepali\")\n - new (\"Newari\")\n - nso (\"Northern Sotho\")\n - no (\"Norwegian\")\n - ny (\"Nyanja\")\n - oc (\"Occitan\")\n - or (\"Odia\")\n - om (\"Oromo\")\n - os (\"Ossetic\")\n - pam (\"Pampanga\")\n - ps (\"Pashto\")\n - fa (\"Persian\")\n - pl (\"Polish\")\n - pt (\"Portuguese\")\n - pt-PT (\"Portuguese (Portugal)\")\n - pa (\"Punjabi\")\n - qu (\"Quechua\")\n - ro (\"Romanian\")\n - rn (\"Rundi\")\n - ru (\"Russian\")\n - sm (\"Samoan\")\n - sg (\"Sango\")\n - sa (\"Sanskrit\")\n - gd (\"Scottish Gaelic\")\n - sr (\"Serbian\")\n - crs (\"Seselwa Creole French\")\n - sn (\"Shona\")\n - sd (\"Sindhi\")\n - si (\"Sinhala\")\n - sk (\"Slovak\")\n - sl (\"Slovenian\")\n - so (\"Somali\")\n - st (\"Southern Sotho\")\n - es (\"Spanish\")\n - su (\"Sundanese\")\n - sw (\"Swahili\")\n - ss (\"Swati\")\n - sv (\"Swedish\")\n - tg (\"Tajik\")\n - ta (\"Tamil\")\n - tt (\"Tatar\")\n - te (\"Telugu\")\n - th (\"Thai\")\n - bo (\"Tibetan\")\n - ti (\"Tigrinya\")\n - to (\"Tongan\")\n - ts (\"Tsonga\")\n - tn (\"Tswana\")\n - tum (\"Tumbuka\")\n - tr (\"Turkish\")\n - tk (\"Turkmen\")\n - uk (\"Ukrainian\")\n - ur (\"Urdu\")\n - ug (\"Uyghur\")\n - uz (\"Uzbek\")\n - ve (\"Venda\")\n - vi (\"Vietnamese\")\n - war (\"Waray\")\n - cy (\"Welsh\")\n - fy (\"Western Frisian\")\n - wo (\"Wolof\")\n - xh (\"Xhosa\")\n - yi (\"Yiddish\")\n - yo (\"Yoruba\")\n - zu (\"Zulu\")\n\nIf you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!"
    },
    {
        "topic": "Basic data types",
        "url": "https://www.youtube.com/watch?v=cnT1oW5_ePM",
        "transcript": "Error fetching transcript for video cnT1oW5_ePM: \nCould not retrieve a transcript for the video https://www.youtube.com/watch?v=cnT1oW5_ePM! This is most likely caused by:\n\nNo transcripts were found for any of the requested language codes: ('en',)\n\nFor this video (cnT1oW5_ePM) transcripts are available in the following languages:\n\n(MANUALLY CREATED)\nNone\n\n(GENERATED)\n - hi (\"Hindi (auto-generated)\")[TRANSLATABLE]\n\n(TRANSLATION LANGUAGES)\n - ab (\"Abkhazian\")\n - aa (\"Afar\")\n - af (\"Afrikaans\")\n - ak (\"Akan\")\n - sq (\"Albanian\")\n - am (\"Amharic\")\n - ar (\"Arabic\")\n - hy (\"Armenian\")\n - as (\"Assamese\")\n - ay (\"Aymara\")\n - az (\"Azerbaijani\")\n - bn (\"Bangla\")\n - ba (\"Bashkir\")\n - eu (\"Basque\")\n - be (\"Belarusian\")\n - bho (\"Bhojpuri\")\n - bs (\"Bosnian\")\n - br (\"Breton\")\n - bg (\"Bulgarian\")\n - my (\"Burmese\")\n - ca (\"Catalan\")\n - ceb (\"Cebuano\")\n - zh-Hans (\"Chinese (Simplified)\")\n - zh-Hant (\"Chinese (Traditional)\")\n - co (\"Corsican\")\n - hr (\"Croatian\")\n - cs (\"Czech\")\n - da (\"Danish\")\n - dv (\"Divehi\")\n - nl (\"Dutch\")\n - dz (\"Dzongkha\")\n - en (\"English\")\n - eo (\"Esperanto\")\n - et (\"Estonian\")\n - ee (\"Ewe\")\n - fo (\"Faroese\")\n - fj (\"Fijian\")\n - fil (\"Filipino\")\n - fi (\"Finnish\")\n - fr (\"French\")\n - gaa (\"Ga\")\n - gl (\"Galician\")\n - lg (\"Ganda\")\n - ka (\"Georgian\")\n - de (\"German\")\n - el (\"Greek\")\n - gn (\"Guarani\")\n - gu (\"Gujarati\")\n - ht (\"Haitian Creole\")\n - ha (\"Hausa\")\n - haw (\"Hawaiian\")\n - iw (\"Hebrew\")\n - hi (\"Hindi\")\n - hmn (\"Hmong\")\n - hu (\"Hungarian\")\n - is (\"Icelandic\")\n - ig (\"Igbo\")\n - id (\"Indonesian\")\n - iu (\"Inuktitut\")\n - ga (\"Irish\")\n - it (\"Italian\")\n - ja (\"Japanese\")\n - jv (\"Javanese\")\n - kl (\"Kalaallisut\")\n - kn (\"Kannada\")\n - kk (\"Kazakh\")\n - kha (\"Khasi\")\n - km (\"Khmer\")\n - rw (\"Kinyarwanda\")\n - ko (\"Korean\")\n - kri (\"Krio\")\n - ku (\"Kurdish\")\n - ky (\"Kyrgyz\")\n - lo (\"Lao\")\n - la (\"Latin\")\n - lv (\"Latvian\")\n - ln (\"Lingala\")\n - lt (\"Lithuanian\")\n - lua (\"Luba-Lulua\")\n - luo (\"Luo\")\n - lb (\"Luxembourgish\")\n - mk (\"Macedonian\")\n - mg (\"Malagasy\")\n - ms (\"Malay\")\n - ml (\"Malayalam\")\n - mt (\"Maltese\")\n - gv (\"Manx\")\n - mi (\"M\u0101ori\")\n - mr (\"Marathi\")\n - mn (\"Mongolian\")\n - mfe (\"Morisyen\")\n - ne (\"Nepali\")\n - new (\"Newari\")\n - nso (\"Northern Sotho\")\n - no (\"Norwegian\")\n - ny (\"Nyanja\")\n - oc (\"Occitan\")\n - or (\"Odia\")\n - om (\"Oromo\")\n - os (\"Ossetic\")\n - pam (\"Pampanga\")\n - ps (\"Pashto\")\n - fa (\"Persian\")\n - pl (\"Polish\")\n - pt (\"Portuguese\")\n - pt-PT (\"Portuguese (Portugal)\")\n - pa (\"Punjabi\")\n - qu (\"Quechua\")\n - ro (\"Romanian\")\n - rn (\"Rundi\")\n - ru (\"Russian\")\n - sm (\"Samoan\")\n - sg (\"Sango\")\n - sa (\"Sanskrit\")\n - gd (\"Scottish Gaelic\")\n - sr (\"Serbian\")\n - crs (\"Seselwa Creole French\")\n - sn (\"Shona\")\n - sd (\"Sindhi\")\n - si (\"Sinhala\")\n - sk (\"Slovak\")\n - sl (\"Slovenian\")\n - so (\"Somali\")\n - st (\"Southern Sotho\")\n - es (\"Spanish\")\n - su (\"Sundanese\")\n - sw (\"Swahili\")\n - ss (\"Swati\")\n - sv (\"Swedish\")\n - tg (\"Tajik\")\n - ta (\"Tamil\")\n - tt (\"Tatar\")\n - te (\"Telugu\")\n - th (\"Thai\")\n - bo (\"Tibetan\")\n - ti (\"Tigrinya\")\n - to (\"Tongan\")\n - ts (\"Tsonga\")\n - tn (\"Tswana\")\n - tum (\"Tumbuka\")\n - tr (\"Turkish\")\n - tk (\"Turkmen\")\n - uk (\"Ukrainian\")\n - ur (\"Urdu\")\n - ug (\"Uyghur\")\n - uz (\"Uzbek\")\n - ve (\"Venda\")\n - vi (\"Vietnamese\")\n - war (\"Waray\")\n - cy (\"Welsh\")\n - fy (\"Western Frisian\")\n - wo (\"Wolof\")\n - xh (\"Xhosa\")\n - yi (\"Yiddish\")\n - yo (\"Yoruba\")\n - zu (\"Zulu\")\n\nIf you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!"
    },
    {
        "topic": "Variables and their scope",
        "url": "https://www.youtube.com/watch?v=iNsSkROKrJw",
        "transcript": "Error fetching transcript for video iNsSkROKrJw: \nCould not retrieve a transcript for the video https://www.youtube.com/watch?v=iNsSkROKrJw! This is most likely caused by:\n\nNo transcripts were found for any of the requested language codes: ('en',)\n\nFor this video (iNsSkROKrJw) transcripts are available in the following languages:\n\n(MANUALLY CREATED)\nNone\n\n(GENERATED)\n - hi (\"Hindi (auto-generated)\")[TRANSLATABLE]\n\n(TRANSLATION LANGUAGES)\n - ab (\"Abkhazian\")\n - aa (\"Afar\")\n - af (\"Afrikaans\")\n - ak (\"Akan\")\n - sq (\"Albanian\")\n - am (\"Amharic\")\n - ar (\"Arabic\")\n - hy (\"Armenian\")\n - as (\"Assamese\")\n - ay (\"Aymara\")\n - az (\"Azerbaijani\")\n - bn (\"Bangla\")\n - ba (\"Bashkir\")\n - eu (\"Basque\")\n - be (\"Belarusian\")\n - bho (\"Bhojpuri\")\n - bs (\"Bosnian\")\n - br (\"Breton\")\n - bg (\"Bulgarian\")\n - my (\"Burmese\")\n - ca (\"Catalan\")\n - ceb (\"Cebuano\")\n - zh-Hans (\"Chinese (Simplified)\")\n - zh-Hant (\"Chinese (Traditional)\")\n - co (\"Corsican\")\n - hr (\"Croatian\")\n - cs (\"Czech\")\n - da (\"Danish\")\n - dv (\"Divehi\")\n - nl (\"Dutch\")\n - dz (\"Dzongkha\")\n - en (\"English\")\n - eo (\"Esperanto\")\n - et (\"Estonian\")\n - ee (\"Ewe\")\n - fo (\"Faroese\")\n - fj (\"Fijian\")\n - fil (\"Filipino\")\n - fi (\"Finnish\")\n - fr (\"French\")\n - gaa (\"Ga\")\n - gl (\"Galician\")\n - lg (\"Ganda\")\n - ka (\"Georgian\")\n - de (\"German\")\n - el (\"Greek\")\n - gn (\"Guarani\")\n - gu (\"Gujarati\")\n - ht (\"Haitian Creole\")\n - ha (\"Hausa\")\n - haw (\"Hawaiian\")\n - iw (\"Hebrew\")\n - hi (\"Hindi\")\n - hmn (\"Hmong\")\n - hu (\"Hungarian\")\n - is (\"Icelandic\")\n - ig (\"Igbo\")\n - id (\"Indonesian\")\n - iu (\"Inuktitut\")\n - ga (\"Irish\")\n - it (\"Italian\")\n - ja (\"Japanese\")\n - jv (\"Javanese\")\n - kl (\"Kalaallisut\")\n - kn (\"Kannada\")\n - kk (\"Kazakh\")\n - kha (\"Khasi\")\n - km (\"Khmer\")\n - rw (\"Kinyarwanda\")\n - ko (\"Korean\")\n - kri (\"Krio\")\n - ku (\"Kurdish\")\n - ky (\"Kyrgyz\")\n - lo (\"Lao\")\n - la (\"Latin\")\n - lv (\"Latvian\")\n - ln (\"Lingala\")\n - lt (\"Lithuanian\")\n - lua (\"Luba-Lulua\")\n - luo (\"Luo\")\n - lb (\"Luxembourgish\")\n - mk (\"Macedonian\")\n - mg (\"Malagasy\")\n - ms (\"Malay\")\n - ml (\"Malayalam\")\n - mt (\"Maltese\")\n - gv (\"Manx\")\n - mi (\"M\u0101ori\")\n - mr (\"Marathi\")\n - mn (\"Mongolian\")\n - mfe (\"Morisyen\")\n - ne (\"Nepali\")\n - new (\"Newari\")\n - nso (\"Northern Sotho\")\n - no (\"Norwegian\")\n - ny (\"Nyanja\")\n - oc (\"Occitan\")\n - or (\"Odia\")\n - om (\"Oromo\")\n - os (\"Ossetic\")\n - pam (\"Pampanga\")\n - ps (\"Pashto\")\n - fa (\"Persian\")\n - pl (\"Polish\")\n - pt (\"Portuguese\")\n - pt-PT (\"Portuguese (Portugal)\")\n - pa (\"Punjabi\")\n - qu (\"Quechua\")\n - ro (\"Romanian\")\n - rn (\"Rundi\")\n - ru (\"Russian\")\n - sm (\"Samoan\")\n - sg (\"Sango\")\n - sa (\"Sanskrit\")\n - gd (\"Scottish Gaelic\")\n - sr (\"Serbian\")\n - crs (\"Seselwa Creole French\")\n - sn (\"Shona\")\n - sd (\"Sindhi\")\n - si (\"Sinhala\")\n - sk (\"Slovak\")\n - sl (\"Slovenian\")\n - so (\"Somali\")\n - st (\"Southern Sotho\")\n - es (\"Spanish\")\n - su (\"Sundanese\")\n - sw (\"Swahili\")\n - ss (\"Swati\")\n - sv (\"Swedish\")\n - tg (\"Tajik\")\n - ta (\"Tamil\")\n - tt (\"Tatar\")\n - te (\"Telugu\")\n - th (\"Thai\")\n - bo (\"Tibetan\")\n - ti (\"Tigrinya\")\n - to (\"Tongan\")\n - ts (\"Tsonga\")\n - tn (\"Tswana\")\n - tum (\"Tumbuka\")\n - tr (\"Turkish\")\n - tk (\"Turkmen\")\n - uk (\"Ukrainian\")\n - ur (\"Urdu\")\n - ug (\"Uyghur\")\n - uz (\"Uzbek\")\n - ve (\"Venda\")\n - vi (\"Vietnamese\")\n - war (\"Waray\")\n - cy (\"Welsh\")\n - fy (\"Western Frisian\")\n - wo (\"Wolof\")\n - xh (\"Xhosa\")\n - yi (\"Yiddish\")\n - yo (\"Yoruba\")\n - zu (\"Zulu\")\n\nIf you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!"
    },
    {
        "topic": "Definition and implementation of arrays",
        "url": "https://www.youtube.com/watch?v=AT14lCXuMKI",
        "transcript": "you will see what is the need of ferry\nwhat does any types of ferry how areas\ncan be declared how arrays can be\ninitialized and how data is to be\nrepresented in memory or you can see the\nmemory representation of an array fine\nsee I guess you are aware with the\nfundamental data type status int float\ncare double etc and if I write like this\nint a is equal to 5 it means you have\ndeclared one variable variable name is a\ntype of the data type of this variable\nis int and the value stored in this\nvariable is 5\nfinally this is one variable variable\ndeclaration you can see now how this\nvenue is to be stored in memory let us\ncheck so let us take this is our main\nmemory you can draw it vertically you\nalso fine\nso see these are bytes so you can say\nmemory is a long tape of bytes you can\nsay by it means 8 bits this is one byte\nthis is one byte this is 1 byte like\nthis so this can be extended to this\nside and this side also that is why I am\ntaking open-ended so now how this\nvariable can be stored here when the\ncompiler compile this line then what\nhappens the word memory manager will do\nmemory manager will allocate some space\nfor this variable to store this value 5\nhere how much space would be allocated\nsee the data type int how many bytes it\nwill take 4 bytes in typical compilers\nto store an integer data type it will\ntake 4 bytes in traditional compilers we\nconsider it\ntwo bytes so you can say 2 or 4 its\napprove generally we take 4 bytes that\nis why I am taking for storing 1 integer\nit will take 4 bytes\nfine so we have only 1 integer that is\nwhy how much memory would be allocated 4\nbytes would be allocated 4 bytes fine it\nmeans how many bits get into 4 that is\n32 bits because one bite one bite is\nequal to 8 bits fine now how the state\nhas to be store first of all this\ndecimal number 5 has to be converted\ninto binary\nit's binary number sorry that is in 32\nbits how in 32 bits this number can be\nrepresented like this 29 zeros would be\nthere and then we'll write 1 0 1\nnow this binary this binary number is to\nbe stored in memory\nnow how this data is to be stored this 4\nbytes is to be allocated\n1 2 3 4 let us suppose these 4 bytes are\nto be allocated to store this 5 like\nthis these 4 bytes so these 4 bytes are\nthis is a closer look here we are going\nto store these visits like this and 1 0\n1 and the end 8 bits here eight bits 8\nbits 8 bits that is 32 bits this is how\nthe number is going to be stored in\nmemory fine and suppose at address you\ncan say C address is always in\nhexadecimal form but here for simplicity\npurpose I am taking let us suppose the\naddresses address of this byte is\nhundred let us suppose so address of\nthis byte would be 1 0 1 1 0 2 & 1 0 3\nso it's 100 1 0 1 1 0 2 1 0 3 these 4\nbytes to be used to store the center see\nthis address would be in hexadecimal\nform always it's not like hundred or\nthousand or something like this\nhexadecimal means always hexadecimal\nwould be represented by prefix with the\n0x then you can say 677 see and 0\nsomething like this in this form the\naddress would be there but here I am\ntaking just hundred for simplicity\npurposes so now I'll discuss what is\nneed of Faerie see in this variable we\ncan store only one value at a time if I\nwant to store 6 then what would happen I\nwill write here 6 and 5 is overwritten 5\nis no more now fine if I want to store 7\nthen I will write 7 and now 5 and 6 are\nno more and here you will insert 7 or\nyou can say overwritten those 5 & 6 so\nat one time you can store only one value\nif I want to store more\none will you suppose in my class I have\nsixty students and I want to store all\numbers of all the 60 students now what\nwould happen you have to take in this\ncase if you follow this approach in that\ncase we'll have to take sixty variables\nbecause one variable can only store on\none value at a time see because we have\nto process large amount of return that\nis why the concept of array came\nnow you will modify this declaration\nsuch that under one variable name we can\nstore roll numbers of all 60 students\nthat is what array now how you can do\nthis see same data type would be there\nhere we have name but rather than\nstoring one value now I want to store 16\nvalues\nnow obviously you how to tell the\ncompiler that I want to store 60 values\nthen you have to give the size of your\narray so here like this we are going to\ngive the size fine so this is what you\ncan say that declaration of a general\nsyntax would be what data type then air\na name any name is a then in brackets\nsize of the air and here you will write\nwhat constant well okay see this is\ninvalid declaration if you write int a\nthis this is invalid declaration you\ncannot leave it blank this is also\ninvalid declaration if you write into a\nand here you write sizes n sorry int N\nand here you here you write n this is\nalso invalid declaration here you have\nto write what constant you can write\nhere a variable but in that case for\nthat case you have to declare macros\nbefore main function and below that\nheader files you will declare one macro\nyou can say hash define variable name n\nsize is hundred in that case after that\nin main function you can write int a and\nin breakers you can write that variable\nname fine that is different logic but\nsimply you cannot declare something like\nthis you have to declare this datatype\nthen\narrayname then sighs sighs should be\nconstant now see this declaration of\narrays language-specific I am here\nconsidering the syntax in C language in\nPython maybe it's different in Pascal in\nyou can say that foreign language the\ndeclaration syntax would be a little bit\ndifferent so it is language specific\nfine now this is what the array\ndeclaration now see this is declaration\nof 1d array types of era types of array\nthree types of arrays are there one day\narray one dimensional two dimensional\nand multi-dimensional array so in this\nvideo I am going to talk about 1b array\nso this is declaration of 1d array so in\nthis we are having one row with 60\ncolumns 60 values in columns fine now\nsee how the arrays can be initialized\nand after that we will discuss how the\nair is can be represented in memory so\nsee how you can define an array\nwhat is definition of error you can say\nthat array is a collection of more than\none data item so more than one elements\nbut condition is what the data type of\nthose elements should be same or you can\nsay collection of for the more than one\ndata items of same data tank see here\nfive we can store five elements in the\narray but all the five elements should\nbe of integer type let us take this\nexample see this is a valid array\nbecause here the size of air is 1 2 3 4\n5 5 elements are there but all the five\nelements are of same data-type that is\ninteger here all the data items are of\nsame data-type that is character you can\nalso declare a character array like this\ndata type should be character suppose\nname of arrays a or b you can take and\nsize is suppose and that is also fine\nyou can take float area also like this\nfloat array name is suppose B and I am\ntaking size is fine\nso that is also fine but see this is\nfine this is fine because all in this in\nthis array all the elements are\ncharacter type same like but this is not\nvalid this is\nnot valid because in this array\none-two-three-four-five size is five but\nhere we have integer value also and\ncharacter value also so different\ndatatypes items are there that is not\npossible in area all the data items\nshould be of same data-type now how the\ndata how the elements of the arrays are\nstored in this memory all the elements\nare stored in consecutive locations or\nyou can say continuous locations one\nafter another how the data is to be\nstored in the memory I'll discuss in\nthis video only but that is a very\nimportant point fine\nall the elements have stored in\nconsecutive locations and index will be\nstarted from zero although somewhere we\ncan start the index from one that is\nalso fine but generally we take the\nindex of array should be started from\nzero now how to access those elements of\nthe array we will also discuss that\nthing right see now how the arrays to be\ninitialized and it can be initialized by\ntwo types one is at compile time and one\nis at runtime compile time means static\ninitialization would be there at the\ntime of declaration only at the time of\ndeclaration own only you will specify\nwhat what elements you want in the array\nand at runtime means while executing the\nprogram at the runtime you can ask from\nthe user what are the elements of the\narray fine\nnow one more important point about\narrays that that it is a fixed size\narray now we have declared sizeof array\nthat is 5 now at runtime you cannot\nchange the size of theory it's not like\nyou can store six elements fine you can\nstore only five element maximum you can\nstore two elements that is fine but you\ncannot exceed from this limit this is\nfixed now this is maybe you can say a\ndrawback of a that you cannot change the\nsize of the array during runtime\nalthough one concept is there that is of\nfull dynamic array but we will discuss\nthose things in later what is dynamic\narray what is the language something\nlike this in this video I am discussing\nonly the fundamental so very so now we\nwill see how era can be initialized at\ncompile time first of all see\nand the time of declaration only you\nwill specify the elements of theory\nsuppose five elements I want so I can\nspecify here these five elements right\nso that is fixed these five elements\nwill be stored in the array this is\ncompile time initialization here the\nsize is five so you cannot write here\nsix elements if you write six seven or\nmore than five elements then it will\ngive a compile time ever\nyou cannot exceed from this limit\nalthough you can specify less than five\nelements if I specify here only six and\ntwo that is also fine remaining four\nremaining four position it will store\nwhat 0 it will initialize doing 0 but\nmore than 5 you cannot write here so\nthis is a compile time initialization\nnow how these did this these elements\nhas to be stored in this memory latest\ncheck see now the size is to be located\nis 5 into 4 that is 20 bytes memory\nmanager will allocate 20 bytes but in\nconsecutive bytes consecutive bytes\nshould be located let us suppose it here\nallocate from this address and let us\nsuppose address I am taking hundred so\ntill 100 - 1 0 9 here the data is the\nmemory memory is to be located for these\nelements now how the data is to be\nstored first of all the 6 6 is to be\nconverted into binary form and then the\ndata is to be stored here 6 is to be\nstored here 6 in these 4 bytes\nnext to be store so this is how the step\nis to be store see first of all this is\nto be converted into binary phone fine\nbut I am NOT taking here binary form I\nam just simply writing 6 in these 4\nbytes in these 4 bytes - then 4 then 3 &\n0\nsee this 6 2 4 3 & 0 these are in\nconsecutive locations continuous\nlocations so for simplicity purpose I am\ngoing to represent this data like this\nfine this bloke is having these 4 bits\nthis is also having sorry 4 bytes this\nis also having 4 bytes\nthat is 32 bits but for simplicity\npurposes I am writing here like this so\nthis is her array name is a and address\nof this's hundred hundred so now address\nof this two thus a dress of two would be\nwhat see this 2 would be 1 0 4 this\nwould be 1 0 8 this would be 1 1 2 and\nthis would be 1 1 6 and why so because\nthis this element is going to take 4\nbytes\nones 101 0 1 1 0 2 & 1 0 3 that is why\nit is 1 0 4 how this address is to be\ncalculated what is the formula since the\nformula is before going to formula\nlentes check the this this index would\nbe 0 1 2 3 4 we are going to start the\nindex of this array with 0 for\nsimplicity purpose\nsomewhere it is also started with the\none that is fine but here I am going to\nstart with 0 so now how the data is to\nbe accessed how you can calculate this\naddress so this is how you can write at\na of a or 0 at index 0 we have 6 a of 1\nwe have 2 a of 2 we have for something\nlike this fine how to access how to\naccess the data how to calculate the\naddress see we know the base address of\nthere a base address means from where\nthe arrays to be started that is to be\nstarted from 100 so base a addresses 100\nso how does this address is to be\ncalculated suppose I am a Louise I would\nbe starting from 0 till 4 means 0 to n\nminus 1 or you can say size of array n\nis equal to size of any right so if you\nwant to access I is equal to 2 this data\nwhen I is equal to 2 means I is equal to\n2 that is third when you how to access\nthis value so the formula would be base\naddress Plus this I value into size of\ndata type you have taken the data type\nof array is here in so size would be 4\nbytes now how to calculate address for\nthis\nlocation I is equal to 2c base addresses\nhundred so the DS address would be in\nhexadecimal form just to make you\nunderstand I am taking here in tisiphone\nhundred plus I values to you want to\ncalculate address for this two into size\nof data type data type isn't size would\nbe four bytes so now here you will take\nhundred plus eight that has one zero it\nthe location would be one zero eight\nwhere this well lose there that it I\nused to be there so that is why a of 2a\nof 2a of two is what for that is this is\nhow you can after finding the address\nyou can access the data fine so say see\nthe array follows the random X's you can\naccess any data with a constant time if\nyou know the base address because if you\nknow the base address you just simply\nneed to do only one plus and one into\none you can say addition and one\nmultiplication and you can X is the data\nso that I am taken for this accessing is\norder of 1 that is constraint time and\narray follows what random X's method and\nlet us suppose if you take character\nAiry here me how cat canary name is B\nand I am taking here sizes 10 and Here I\nam initializing this character array\nalso and I am taking some values fine so\nnow how these value is to be stored see\nI have taken sizes 10 so in memory how\nmany bytes is to be allocated so for\nthis size of character is character will\ntake one bite one in two sizes 10 here\nwe have 10 characters so 10 bytes would\nbe allocated fine somewhere\n10 bytes should be consecutive let us\nsuppose this air is also there and after\nmaybe not 1 1 9 but from here from here\nfrom 120 to 120 to 10 bytes till 132 has\nbeen allocated to this character array B\nso how the data is to be stored here\nhere this paste is to be allocated now\nthis this data is to be stored here but\nhere we have null because we are\nspecified only one two three four five\ncharacters but the size has been\nallocated to four ten characters so this\nis now you can say that wastage of space\nso now see the drawback you can say the\none another topic of the series what you\nhave to specify the size at compile time\nbut in advance we don't know how much\nspace we need it may be sometimes you\nhave declared that I want an area of\nsize hundred so now that hundred the\nspace of that hundred element so you can\nsay four hundred bytes has been\nallocated to you for this any name a but\nactually you are using only you are\nstoring only 10 integers so you are\nwasting that space now so that is a\ndrawback often that array that static\ndeclaration of Eric and sometimes you\nwant to store more data then you have\ndeclared here now suppose you have\ndeclared the size of arrays hundred four\nhundred integers but now actually when\nruntime you want to store 200 integers\nbut that is impossible because you have\nalready declared the size now if you ask\nto the memory manager that I want to\nstore 200 integers so I want to extend\nmy area so now what memory manager will\ndo memory manager will allocate you our\nspace or fresh new space of for for 200\ninteger so you can say 800 bytes in\nconsecutive locations and what my mail\nmanager will do memory manager will copy\nthe data because previously he has\nallocated space for hundred integers to\nyou so those hundred integers would be\ncopied from there to the new location\nfine so that would be very tedious work\nto do so this is how you can initialize\nthere at compile time only now I run\ntime how to initialize so at run time\nyou can initialize the array using loops\nmaybe for loop while you do\nLoup and some predefined function\nstandard functions that is scanner I'm\ngoing to write down that code here see\nlet us suppose I have I have declared an\narray of size five fine now at runtime I\nwant to ask from the user which data he\nwants in this area\nso now what I'll do C printf function is\nfor what for printing something on the\nspring show so I am writing here enter\nthe elements of array so this line is to\nbe printed on your screen now for taking\nthe input from the user you will write\nwhat scanner\nbut first the most important point about\nthis is you have to use some loops\nbecause you are going to take\ncontinuously five integers from the user\nso we'll suppose I am taking for loop\nhere and I I would be started index\nwould be started from zero I less than\nsize minus 1 that is 4 and I plus plus\nso within this for loop you can write\npercentage is DN and rename a so this is\nhow during runtime you can take that\nvalue from that a I am going to discuss\nit how the data is to be taken from the\nuser how the data is to be stored in the\narray in next video so these are some\npoints that we have discussed in this\nvideo\nsee arrays are fixed size fixed size\nmeans once you have declared the size at\ncompile time you cannot change it at\nruntime fixed size sequenced collection\nof data items of same data-type data\nitems should be of same data-type that\nis also a drawback of the air fine\nX is a particular element in the array\nwhat you will have to write just write\narray name and in the brackets you will\nwrite the index value suppose you want\nto access the first element then you\nwill write what array and in bracket you\nwill write a 0 because we are going to\nstart the index from 0 data items are\nstored in continuous locations and\nrandom access is there you can access\nany element\nand that will take a constant time order\nof and how we are going to access that I\nhave discussed with the help of formula\nI have so various three 1d 2d and\nmulti-dimensional array we have\ndiscussed how 1d array say this topic we\nhave discussed declaration insulation\naccessing of this 1d array in next video\nwe are going to discuss how the data is\nto be inserted how the arrays to be\ntraversed different types of operations\non 1d array first of all with their time\ntaken and after that we will discuss\nwhat is 2d array as well as how the data\nis to be accessed from 2d array fine so\nI'll see you in the next video till the\nmap IIT"
    },
    {
        "topic": "Operations on arrays",
        "url": "https://www.youtube.com/watch?v=PyTK_g1l8V8",
        "transcript": "Error fetching transcript for video PyTK_g1l8V8: \nCould not retrieve a transcript for the video https://www.youtube.com/watch?v=PyTK_g1l8V8! This is most likely caused by:\n\nNo transcripts were found for any of the requested language codes: ('en',)\n\nFor this video (PyTK_g1l8V8) transcripts are available in the following languages:\n\n(MANUALLY CREATED)\nNone\n\n(GENERATED)\n - hi (\"Hindi (auto-generated)\")[TRANSLATABLE]\n\n(TRANSLATION LANGUAGES)\n - ab (\"Abkhazian\")\n - aa (\"Afar\")\n - af (\"Afrikaans\")\n - ak (\"Akan\")\n - sq (\"Albanian\")\n - am (\"Amharic\")\n - ar (\"Arabic\")\n - hy (\"Armenian\")\n - as (\"Assamese\")\n - ay (\"Aymara\")\n - az (\"Azerbaijani\")\n - bn (\"Bangla\")\n - ba (\"Bashkir\")\n - eu (\"Basque\")\n - be (\"Belarusian\")\n - bho (\"Bhojpuri\")\n - bs (\"Bosnian\")\n - br (\"Breton\")\n - bg (\"Bulgarian\")\n - my (\"Burmese\")\n - ca (\"Catalan\")\n - ceb (\"Cebuano\")\n - zh-Hans (\"Chinese (Simplified)\")\n - zh-Hant (\"Chinese (Traditional)\")\n - co (\"Corsican\")\n - hr (\"Croatian\")\n - cs (\"Czech\")\n - da (\"Danish\")\n - dv (\"Divehi\")\n - nl (\"Dutch\")\n - dz (\"Dzongkha\")\n - en (\"English\")\n - eo (\"Esperanto\")\n - et (\"Estonian\")\n - ee (\"Ewe\")\n - fo (\"Faroese\")\n - fj (\"Fijian\")\n - fil (\"Filipino\")\n - fi (\"Finnish\")\n - fr (\"French\")\n - gaa (\"Ga\")\n - gl (\"Galician\")\n - lg (\"Ganda\")\n - ka (\"Georgian\")\n - de (\"German\")\n - el (\"Greek\")\n - gn (\"Guarani\")\n - gu (\"Gujarati\")\n - ht (\"Haitian Creole\")\n - ha (\"Hausa\")\n - haw (\"Hawaiian\")\n - iw (\"Hebrew\")\n - hi (\"Hindi\")\n - hmn (\"Hmong\")\n - hu (\"Hungarian\")\n - is (\"Icelandic\")\n - ig (\"Igbo\")\n - id (\"Indonesian\")\n - iu (\"Inuktitut\")\n - ga (\"Irish\")\n - it (\"Italian\")\n - ja (\"Japanese\")\n - jv (\"Javanese\")\n - kl (\"Kalaallisut\")\n - kn (\"Kannada\")\n - kk (\"Kazakh\")\n - kha (\"Khasi\")\n - km (\"Khmer\")\n - rw (\"Kinyarwanda\")\n - ko (\"Korean\")\n - kri (\"Krio\")\n - ku (\"Kurdish\")\n - ky (\"Kyrgyz\")\n - lo (\"Lao\")\n - la (\"Latin\")\n - lv (\"Latvian\")\n - ln (\"Lingala\")\n - lt (\"Lithuanian\")\n - lua (\"Luba-Lulua\")\n - luo (\"Luo\")\n - lb (\"Luxembourgish\")\n - mk (\"Macedonian\")\n - mg (\"Malagasy\")\n - ms (\"Malay\")\n - ml (\"Malayalam\")\n - mt (\"Maltese\")\n - gv (\"Manx\")\n - mi (\"M\u0101ori\")\n - mr (\"Marathi\")\n - mn (\"Mongolian\")\n - mfe (\"Morisyen\")\n - ne (\"Nepali\")\n - new (\"Newari\")\n - nso (\"Northern Sotho\")\n - no (\"Norwegian\")\n - ny (\"Nyanja\")\n - oc (\"Occitan\")\n - or (\"Odia\")\n - om (\"Oromo\")\n - os (\"Ossetic\")\n - pam (\"Pampanga\")\n - ps (\"Pashto\")\n - fa (\"Persian\")\n - pl (\"Polish\")\n - pt (\"Portuguese\")\n - pt-PT (\"Portuguese (Portugal)\")\n - pa (\"Punjabi\")\n - qu (\"Quechua\")\n - ro (\"Romanian\")\n - rn (\"Rundi\")\n - ru (\"Russian\")\n - sm (\"Samoan\")\n - sg (\"Sango\")\n - sa (\"Sanskrit\")\n - gd (\"Scottish Gaelic\")\n - sr (\"Serbian\")\n - crs (\"Seselwa Creole French\")\n - sn (\"Shona\")\n - sd (\"Sindhi\")\n - si (\"Sinhala\")\n - sk (\"Slovak\")\n - sl (\"Slovenian\")\n - so (\"Somali\")\n - st (\"Southern Sotho\")\n - es (\"Spanish\")\n - su (\"Sundanese\")\n - sw (\"Swahili\")\n - ss (\"Swati\")\n - sv (\"Swedish\")\n - tg (\"Tajik\")\n - ta (\"Tamil\")\n - tt (\"Tatar\")\n - te (\"Telugu\")\n - th (\"Thai\")\n - bo (\"Tibetan\")\n - ti (\"Tigrinya\")\n - to (\"Tongan\")\n - ts (\"Tsonga\")\n - tn (\"Tswana\")\n - tum (\"Tumbuka\")\n - tr (\"Turkish\")\n - tk (\"Turkmen\")\n - uk (\"Ukrainian\")\n - ur (\"Urdu\")\n - ug (\"Uyghur\")\n - uz (\"Uzbek\")\n - ve (\"Venda\")\n - vi (\"Vietnamese\")\n - war (\"Waray\")\n - cy (\"Welsh\")\n - fy (\"Western Frisian\")\n - wo (\"Wolof\")\n - xh (\"Xhosa\")\n - yi (\"Yiddish\")\n - yo (\"Yoruba\")\n - zu (\"Zulu\")\n\nIf you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!"
    },
    {
        "topic": "Applications of arrays",
        "url": "https://www.youtube.com/watch?v=Gn7PGIEJejs",
        "transcript": "Error fetching transcript for video Gn7PGIEJejs: \nCould not retrieve a transcript for the video https://www.youtube.com/watch?v=Gn7PGIEJejs! This is most likely caused by:\n\nSubtitles are disabled for this video\n\nIf you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!"
    },
    {
        "topic": "Introduction to linked lists",
        "url": "https://www.youtube.com/watch?v=TWMCMvfEAv4",
        "transcript": "with a very good example i will show what is linked list\nand why would you like to use it\nso the name of linked list, if you're listening for the very first time\nand it is possible that you've read it before and didn't understand that\ni will start with and example to explain this thing\nand the example will be of a hospital\nassume that i have a city over here\nit can be any city assume it is Delhi\nand in this city we have many hospitals\nand assume that we have a doctor over here\nand the doctor does a full body checkup which is FBC\nFull body check-up\nnow assume that the hospital has beds\nbed no 1...2...3\nand assume that here the bed number starts from 0\n0...1...2...3\n4...assume that\nthey are checking different patients on different beds in the hospital\nwill check up the body of them\nand will do the full body check-up\nthey got 4 beds in the hospital\nthis was the hospital H1\nassume the hospital's name is H1\nwhat happened here is\nsomething happened and hospital beds were insufficient\nwhat happened that all the people\nwho wanted to do full body check ups, firstly here 100 beds were empty\nfrom bed 5-6 to bed 100 all were empty\nif 5 people wanted to go they used to occupy all the 5 beds at the start\nand did FBC\nthen what happened demands of the hospital beds got increased and then\nall the beds got occupied\nwhat happened was that the doctor got troubled\npeople who wanted to do FBC they got worried that how to do\nso the doctor told them that we in many hospitals\nhave 1-2 beds empty like in h1 one bed is empty\n1 bed empty at h2\nhave 2 beds empty assume 170-171 beds are free\nassume that bed no 280 of H3 free\nand 286\nand in H4 another one free\nassume 381\nso the doctor will ask the patient to\nwhichever bed is free go and laydown there\nassume that the first patient of ours, now this system won't apply here\nthese beds here are not empty all of them are occupied\nwhat did the doctor say to the patient do one thing\nif you find an empty bed go and lay down over there\nand along with that do the thing, the bed which is next to you\nwrite the address of it and keep it with yourself\nkeep it with you and you should know which bed it is\nwhen the doctor will see this patient\nand then he will ask who is the next patient\nand then he'll get the answer and will check upon the next one\nthis process will continue the same way for the time\nso after doing this what will happen is\nthat we couldn't get all the beds empty together\nafter doing so the place which was available here and there\nin other hospitals and while linking them we made a chain\nwhich means we'll go to the patient check up on him and then ask where is the other patient\nwill go to the next one and then perform the same activates and then this chain will form the traverse\nwhat advantage we got here is that we couldn't get all the beds at the same place\nso what we did was in every hospital each single bed was utilized\nutilized them\nso this is linked list, now that you've heard the complete story\nforget this story cause this was an analogy\ni will tell you what is liked list\nand why would you want to use the linked list\nas the replacement of the array\nhere when we used to have an array we directly\nam coming\nassume that we are creating an array\nin stack or heap this one is my memory\nthis is my main memory\nassume that this is stack im not showing you other sections\nand this one is stack and a heap\nif I'm creating array something like this in C language int arr 30\ni will get that in stack\nbut if i do dynamic memory allocation\nint*ptr=\nint*malloc\ntype cast in ints*mylog pointer\nand*size of int\nI've told you this, close this bracket\nI've told this to you how to do dynamic allocation\nwhen we do dynamic memory allocation\nyou will get a memory in a heap\nand now you can point this pointer and use this\nthe memory you've got can be used\nso like this you can reserve memory\nwhen we create and array what happens is 0\n1...2...3...4 and assume that you've created 5 and 6\nyou can have a limited capacity of an array\nif you wanna enlarge this array you can increase the capacity\nto elements we have to create a new array and copy in it even if you want an extra element\nthough we had seen that\ni should reserve a bit more elements\nwill increase the capacity of 100\nand will store only 50 elements and use that, we can do this thing\nbut we have to use the memory more precisely\nonly that much amount of memory\nthe amount we want and along with that we want that\nthe size of our array can be so large that we don't know2\ntoday these are 7 tomorrow these may be 7 lakhs\neven then if we want to allocate memory\nif the array of 7 expands or if the capacity of array is low\nthen it will be a problem to you\nso if here is an array of 6 to increase the capacity we have to create a new array\nbut in linked list what advantage do you get\nin linked list what you do let m e give you an idea\nyou say\nthat i have a structure\nfor now assume this as a node not a structure\ni have a node on linked list\nhere i have two boxes one is for data\nand another one for pointer to next\nassume this is the data and this is 7\nand this is the pointer which will point to the next node\nso the memory which holds 7\nand this the pointer\nthis can be anywhere in the heap\nand along with that i can create another node anywhere in the heap\nnot mandatory to be centavos memory location\nhere in the array\nif its address in array is 8 and 12 and\nand 20, 24,\n28, 32, 36\nand so on\nwill work like this\nbecause the integer of 4-4\nit will be in contiguous memory location\nand this is done because you should be able to access\ndo you know this pointer\nand you for the 5th element\nhere using pointer arithmetic, can access to constant time\nthis is why we used to do like this, what happens in linked list\nit has a node\nwhich has a space for data\none is for pointer to next\nwhat did i do to the pointer to next node\ni told that this is pointing to that\nand this too will run like this and point to the next node\nso here as you remember the example of the hospital how did I gave the analogy\nthat i just gave an example to explain\nso what is happening here is i'm going to next nodes again and again\nfinally i'm pointing it to null and now i will explain what is it\nwhy did we do like this we could have done it this way\nhere i have a big luxury\nthat i can increase this list at any time\nassume these are 1 lakh elements and the last element is null\ni will add one more element something like this\nand here create a data note\nand a pointer here i will add 80 in it\nand after that\ni will do another null and will extend this list\nso to extend this list is very easy\nto extend this is not easy and sometimes a bit impossible too\nwhen this grows big\nso you have to change this and copy into another array\nhere the luxury which i get is\nthat here this links are like a chain\ncan understand a chain\nall these are joined in a chain\nif you wanna elongate the chain you will ad another hook in it\nas you add another hook this chain will enlarge\nif you wanna add red hook on the 3rd position\nso you will pull the hook up\nwill insert the red one like this\nand will place the old hook\nso to your chain you can add and remove the hooks anytime so the insertion of which\ncan be done easily in linked list\nif i wanted to insert here so i had to move all the elements from here\nwe had seen insertion in the array\nif you haven't accessed the playlist do it, i have given the link in the description box\nif i have to maintain the order, i had moved the elements\nif here i wanna do the insertion\nand have to maintain the order too\ni will ask to break the link\nplace the new element in the between\npoint through this and point through this\nand then i joined it like a chain\nit is just like a chain\nit is a chain with hooks\nnow if you want to insert an element do insert it\nnow if you don't like this one hook\ni say i wanna keep a red hook over here\ni want to delete this and insert red\ni replaced it\nnow assume that i don't like this blue hook and wanna remove it\nso i will remove it\nand will place the other hook here, so i just have to interconnect the links\ninsertion and deletion in linked list is so easy\nas much as is to interconnect two links\nremoved one hook\nand mixed it with two just like a chain\njust like how i showed you\nthis is how i will break it , here i don't have achain\ni lost it actually\ni couldn't arrange the chain or i would have done the practical for you\nbut i hope you have understood in the board\nso i just hope\nhow i drew in the board you might have gotten the idea about what it is\nof LinkedList, if you would have\ncreated an array\nyou don't get the luxury to remove this\nhow will you remove this element\nthis is contiguous memory location you have to move it only or else they wont be there in that\nin array\narray comes with a condition that the elements\nare stored in contiguous memory location\nelements of the array\n8,12,16,20,24,28,32,36,40, 44\nelements are stored in this way\nbut if you are using linkedlist\nso it is your call because no constrain is there of contiguous memory location on you\nif this node of mine\nis on 100212 location\nso this element can be on 11810 location\nthis can be on my 988 location\nat any memory any element it can be\nthese are like the hospital beds which i told you\non the start of the video, the beds of the hospital\nthese are the beds in 1 hospitals arranges 1 by 1\nand what are these they are beds from different hospitals\nadvantage of linking is that i can insert in it\ncan insert the element in the lost\nand can delete the ements\ncan remove any element from it, assume that i wanna remove this\nwill remove it\nand along with that i will put it in\nidea might sound cool to you\nthis is good we used array for no use\narray has its own benefit and this has its own\nwhere this is advantageous there this one is not\nand where this is advantageous there this one is not\nso lets see where\nwhich to use and which one will give you advantage and when\nassume that if you\nwant to access the elements like this 4 element\n8th or 9th element\nso you can access in constant time\ndo you have this pointer assume this pointer\nhow much you have to join to get the access the ptr\nso how much you have to add and directly you will jump to the 5th element\nyou can directly calculate the address of 5th element when you know address are in 4-4 distance\nif you know the 8 so you can put the formula and get to know\nso the first element of mind would be 8*0/4\nthe second element would be 8+1x4\nand nth element would be 8+n*4\nif i want to look for the address of the index 5\nso will be 28 see o,1,2,3,4,5\nmy 5th element is on 28th address\nhis is the advantage i can reach to any element very easily\nhere won't happen that, here if i\nwant 5th element so\nwill have to go through all the 4 elements\nthe advantage here is i can extend these paths\nif i have memory available only for four\nassume that it is not available, and assume that it is happening\nand if i have 4 blocks empty at other places so to them\ni can utilize\nhere i praised array\nyou can access it quickly and here you have to traverse the complete list\nif i had to disgrace it then i will say that\nin this deletion is so difficult\nthat if you delete this element\nso you will have to move all these elements here\nor if you wanna do the insertion\nso you will have to move again to make the space\nand if there is the space then only insertion can happen or it won,t happen\nwhich means if the capacity is 100\nand you store 50 elements over there\nthen there is a chance of insertion\nand if the capacity is 100 and you have stored all the 100 then\nwould you put more element there is no place\nwhat do you do here\nanytime any hooks can be broke and made the space\nand is linked\nthis is the magic of linked list\nand now here insertion and deletion is difficult\nand here insertion deletion putting the element in between\ncan be done easily\ncan be seen, broken from here\nis so easy that we have to create a new node\nby creating a new node\nlink it like that\nassume that i want to put 18 here\nthis is a pointer which stores an address\nthis stores the address when i create an arrow\nwhich means this pointer is storing the address of this, assume that the address\nis 280\nso in this 280 is there and is pointing that\npoint doesn't mean that it is done by a finger\nit means in this the address is kept stored\ni will do and show you by coding it\nand along with that i'll tell you that i have created notes for you all and saved\ndo download the copy of your notes\nand the notes which i have created in that\nas much i have told you\nhas been written in a systematic way that the drawbacks of array are\nthe linklist shines over here\nhave written the thing completely\nshort crisp and to the point\nare not lengthy notes at all\nwhich means short crisp and to the point\nif you see video and notes together your work is 100% done\nnow you all see here\nin linkedlist insertion and deletion is done good\nan tell you one more disadvantage about linked list\none more i will tell you\nwhat does linked list do\nfor every element this has do be taken extra, this 7 would have come here\n11 here and 8 here\n18 here and i was storing\nhere what the problem is that every time\ni need extra memory for pointer to node\none more element and i have to add this, my data is here, this is my main data but even tho i have to\ntake this because\ni have to link in next node\nsimilarly as much elements i am adding i get an element extra with me\nof pointer type because i have to store the address of the element\nif i talk about the memory so the memory of it will increase linearly with no. of elements\nif we have 100 elements we need 100 pointers too\nif 10 more elements then 10 extra pointers\nhere direct 17 more elements to store has that capacity\nso array and linked list is not like that where you abandon array and jump to linked list\nor use array and leave linked list\nwe may think linked list is good and\nsometimes we will find array good\nso we will see that linked list also has types\nnow this video is to only give you idea\nmany people are beginners\nand i know that if you're a beginner and have learnt only c language\nto learn these things is so much difficult for you\npossible that some of you might know the idea which i have told you\nbut definitely i can guarantee that you'll get to learn new things as you move forward\nand further\ni will increase the complexity\nand can assure you that you will understand all these things\nso i have created all the notes for you\nso will have a look at them , so guys\nthis is the folder which i have created for you\nnotes of linked list\nas i have told you that linked list is just like array\nin array the data is in contiguous location\nin linked list the node of yours\nis connected with other nodes and the last element\nthe pointer of this is towards the null pointer\nas i have told you a while ago\npointer to the null means linked list here has ended\nso if you want to print all the elements of the linked lists, so you can start from here\nand go on till\nyou don't get the null\ntill you don't get the null you will keep going on\nso in array and linked list we have seen that the memory\nand capacity are the same\nin linked list you can join the nodes\nremove nodes from the mid doesn't matter\nin array what happens if you take order and want to maintain it\nso you have to move the elements\nif you removed 11 here\nso to maintain the order\nyou have to move 12 here\nleft, 18 also left 22 also left\nso this is how you have to move the elements\nin case of the array if you want to insert and delete\nbut in linked list this work will be very easy\nif we talk about drawbacks\nextra space is required for the pointer memory\nevery node has apointer\nthis pointer would not have been required in array but here it is required for linking the pointer\nin every node\nso here extra memory space is a big problem\nand again here we don't have allowance to random access\nif i know the address of 1st elements the even by calculating i cannot reach at 10th element\nbecause this is not into contiguous memory location it is not like if this is 4 then 8\nand 12 these are not the contiguous addresses\nbut in our array these are there\ncontiguous address in linked list are not there here the 0\n4,8,12 are there and the array is contiguous\naddresses are there\nas you change the addresses and move forward it goes on 0,4\n8,12,16 like this they get increased\nwhat happens in linked lists\nin linked list elements are there in non contiguous memory location\nif it is 0 then it can be 2000, or 4000\nand then the next node can be again 40\nanywhere it gets space there it can\nlink itself from the pointer\nthis was out linked list we talked about drawback that the random access is not allowed\nmemory space is required extra\nand as for advantages insertion and deletion are fast\nand along with that here\nand if you have less memory then contiguous memory is not an issue\nyou can take memory anywhere and keep on expanding as much as you want\nand this cannot be increased\nyou won't get as contiguous blocks in memory\narray has this limitation here\nassume that i have to implement LinkedList\nto implement we have one way through structures in c language\ncreate a structure named node\nand put the data here i have taken int as a data\nnot mandatory it should be integer it can be any other too\nbut for the learning purpose let it be integer\nand if i talk about complicated data types\ni wont be able to explain basic\nbut here instead of data anything can be there\nbut i am taking integer data here sop that its easy to understand\nafter this struck nodes are next\nwhich means it stores a pointer\nof its type\nwhich means pointer of struck nodes\nsee here this is our int data\nand this is pointer to next element\nit is in itself an element and this is inside pointer to next element which will point\nan element just like it\nthen it will point again something like this\nthis will point to the null which means nothing or else\nnode like itself\nso here i have created struck nodes next named pointer already\nand this is called self referencing structure\nwhich references to itself in which\nsuch a pointer is there\nwhich references to itself that is called\nself referential structure\nand we'll see further how we can create things i will code and show you\ni hope you all have got the idea of linked list\nand in next video i will explain implementation\nso i hope you all have accessed the playlist of data structure algorithm and if you haven't done that yet\ndo it now and along with it please do share\nvery less people listen to me and ignore it\ni would request again\nplease do share this playlist\nnot just for saying please do it\nonly two people shared this playlist and i've tagged both of them\nand if you share this i will tag to you people too\ntag and share this playlist\ni hope you like the videos\nfor now this much only guys thank you so much for watching this video\nand i will see you next time"
    },
    {
        "topic": "Singly linked lists",
        "url": "https://www.youtube.com/watch?v=TWMCMvfEAv4",
        "transcript": "with a very good example i will show what is linked list\nand why would you like to use it\nso the name of linked list, if you're listening for the very first time\nand it is possible that you've read it before and didn't understand that\ni will start with and example to explain this thing\nand the example will be of a hospital\nassume that i have a city over here\nit can be any city assume it is Delhi\nand in this city we have many hospitals\nand assume that we have a doctor over here\nand the doctor does a full body checkup which is FBC\nFull body check-up\nnow assume that the hospital has beds\nbed no 1...2...3\nand assume that here the bed number starts from 0\n0...1...2...3\n4...assume that\nthey are checking different patients on different beds in the hospital\nwill check up the body of them\nand will do the full body check-up\nthey got 4 beds in the hospital\nthis was the hospital H1\nassume the hospital's name is H1\nwhat happened here is\nsomething happened and hospital beds were insufficient\nwhat happened that all the people\nwho wanted to do full body check ups, firstly here 100 beds were empty\nfrom bed 5-6 to bed 100 all were empty\nif 5 people wanted to go they used to occupy all the 5 beds at the start\nand did FBC\nthen what happened demands of the hospital beds got increased and then\nall the beds got occupied\nwhat happened was that the doctor got troubled\npeople who wanted to do FBC they got worried that how to do\nso the doctor told them that we in many hospitals\nhave 1-2 beds empty like in h1 one bed is empty\n1 bed empty at h2\nhave 2 beds empty assume 170-171 beds are free\nassume that bed no 280 of H3 free\nand 286\nand in H4 another one free\nassume 381\nso the doctor will ask the patient to\nwhichever bed is free go and laydown there\nassume that the first patient of ours, now this system won't apply here\nthese beds here are not empty all of them are occupied\nwhat did the doctor say to the patient do one thing\nif you find an empty bed go and lay down over there\nand along with that do the thing, the bed which is next to you\nwrite the address of it and keep it with yourself\nkeep it with you and you should know which bed it is\nwhen the doctor will see this patient\nand then he will ask who is the next patient\nand then he'll get the answer and will check upon the next one\nthis process will continue the same way for the time\nso after doing this what will happen is\nthat we couldn't get all the beds empty together\nafter doing so the place which was available here and there\nin other hospitals and while linking them we made a chain\nwhich means we'll go to the patient check up on him and then ask where is the other patient\nwill go to the next one and then perform the same activates and then this chain will form the traverse\nwhat advantage we got here is that we couldn't get all the beds at the same place\nso what we did was in every hospital each single bed was utilized\nutilized them\nso this is linked list, now that you've heard the complete story\nforget this story cause this was an analogy\ni will tell you what is liked list\nand why would you want to use the linked list\nas the replacement of the array\nhere when we used to have an array we directly\nam coming\nassume that we are creating an array\nin stack or heap this one is my memory\nthis is my main memory\nassume that this is stack im not showing you other sections\nand this one is stack and a heap\nif I'm creating array something like this in C language int arr 30\ni will get that in stack\nbut if i do dynamic memory allocation\nint*ptr=\nint*malloc\ntype cast in ints*mylog pointer\nand*size of int\nI've told you this, close this bracket\nI've told this to you how to do dynamic allocation\nwhen we do dynamic memory allocation\nyou will get a memory in a heap\nand now you can point this pointer and use this\nthe memory you've got can be used\nso like this you can reserve memory\nwhen we create and array what happens is 0\n1...2...3...4 and assume that you've created 5 and 6\nyou can have a limited capacity of an array\nif you wanna enlarge this array you can increase the capacity\nto elements we have to create a new array and copy in it even if you want an extra element\nthough we had seen that\ni should reserve a bit more elements\nwill increase the capacity of 100\nand will store only 50 elements and use that, we can do this thing\nbut we have to use the memory more precisely\nonly that much amount of memory\nthe amount we want and along with that we want that\nthe size of our array can be so large that we don't know2\ntoday these are 7 tomorrow these may be 7 lakhs\neven then if we want to allocate memory\nif the array of 7 expands or if the capacity of array is low\nthen it will be a problem to you\nso if here is an array of 6 to increase the capacity we have to create a new array\nbut in linked list what advantage do you get\nin linked list what you do let m e give you an idea\nyou say\nthat i have a structure\nfor now assume this as a node not a structure\ni have a node on linked list\nhere i have two boxes one is for data\nand another one for pointer to next\nassume this is the data and this is 7\nand this is the pointer which will point to the next node\nso the memory which holds 7\nand this the pointer\nthis can be anywhere in the heap\nand along with that i can create another node anywhere in the heap\nnot mandatory to be centavos memory location\nhere in the array\nif its address in array is 8 and 12 and\nand 20, 24,\n28, 32, 36\nand so on\nwill work like this\nbecause the integer of 4-4\nit will be in contiguous memory location\nand this is done because you should be able to access\ndo you know this pointer\nand you for the 5th element\nhere using pointer arithmetic, can access to constant time\nthis is why we used to do like this, what happens in linked list\nit has a node\nwhich has a space for data\none is for pointer to next\nwhat did i do to the pointer to next node\ni told that this is pointing to that\nand this too will run like this and point to the next node\nso here as you remember the example of the hospital how did I gave the analogy\nthat i just gave an example to explain\nso what is happening here is i'm going to next nodes again and again\nfinally i'm pointing it to null and now i will explain what is it\nwhy did we do like this we could have done it this way\nhere i have a big luxury\nthat i can increase this list at any time\nassume these are 1 lakh elements and the last element is null\ni will add one more element something like this\nand here create a data note\nand a pointer here i will add 80 in it\nand after that\ni will do another null and will extend this list\nso to extend this list is very easy\nto extend this is not easy and sometimes a bit impossible too\nwhen this grows big\nso you have to change this and copy into another array\nhere the luxury which i get is\nthat here this links are like a chain\ncan understand a chain\nall these are joined in a chain\nif you wanna elongate the chain you will ad another hook in it\nas you add another hook this chain will enlarge\nif you wanna add red hook on the 3rd position\nso you will pull the hook up\nwill insert the red one like this\nand will place the old hook\nso to your chain you can add and remove the hooks anytime so the insertion of which\ncan be done easily in linked list\nif i wanted to insert here so i had to move all the elements from here\nwe had seen insertion in the array\nif you haven't accessed the playlist do it, i have given the link in the description box\nif i have to maintain the order, i had moved the elements\nif here i wanna do the insertion\nand have to maintain the order too\ni will ask to break the link\nplace the new element in the between\npoint through this and point through this\nand then i joined it like a chain\nit is just like a chain\nit is a chain with hooks\nnow if you want to insert an element do insert it\nnow if you don't like this one hook\ni say i wanna keep a red hook over here\ni want to delete this and insert red\ni replaced it\nnow assume that i don't like this blue hook and wanna remove it\nso i will remove it\nand will place the other hook here, so i just have to interconnect the links\ninsertion and deletion in linked list is so easy\nas much as is to interconnect two links\nremoved one hook\nand mixed it with two just like a chain\njust like how i showed you\nthis is how i will break it , here i don't have achain\ni lost it actually\ni couldn't arrange the chain or i would have done the practical for you\nbut i hope you have understood in the board\nso i just hope\nhow i drew in the board you might have gotten the idea about what it is\nof LinkedList, if you would have\ncreated an array\nyou don't get the luxury to remove this\nhow will you remove this element\nthis is contiguous memory location you have to move it only or else they wont be there in that\nin array\narray comes with a condition that the elements\nare stored in contiguous memory location\nelements of the array\n8,12,16,20,24,28,32,36,40, 44\nelements are stored in this way\nbut if you are using linkedlist\nso it is your call because no constrain is there of contiguous memory location on you\nif this node of mine\nis on 100212 location\nso this element can be on 11810 location\nthis can be on my 988 location\nat any memory any element it can be\nthese are like the hospital beds which i told you\non the start of the video, the beds of the hospital\nthese are the beds in 1 hospitals arranges 1 by 1\nand what are these they are beds from different hospitals\nadvantage of linking is that i can insert in it\ncan insert the element in the lost\nand can delete the ements\ncan remove any element from it, assume that i wanna remove this\nwill remove it\nand along with that i will put it in\nidea might sound cool to you\nthis is good we used array for no use\narray has its own benefit and this has its own\nwhere this is advantageous there this one is not\nand where this is advantageous there this one is not\nso lets see where\nwhich to use and which one will give you advantage and when\nassume that if you\nwant to access the elements like this 4 element\n8th or 9th element\nso you can access in constant time\ndo you have this pointer assume this pointer\nhow much you have to join to get the access the ptr\nso how much you have to add and directly you will jump to the 5th element\nyou can directly calculate the address of 5th element when you know address are in 4-4 distance\nif you know the 8 so you can put the formula and get to know\nso the first element of mind would be 8*0/4\nthe second element would be 8+1x4\nand nth element would be 8+n*4\nif i want to look for the address of the index 5\nso will be 28 see o,1,2,3,4,5\nmy 5th element is on 28th address\nhis is the advantage i can reach to any element very easily\nhere won't happen that, here if i\nwant 5th element so\nwill have to go through all the 4 elements\nthe advantage here is i can extend these paths\nif i have memory available only for four\nassume that it is not available, and assume that it is happening\nand if i have 4 blocks empty at other places so to them\ni can utilize\nhere i praised array\nyou can access it quickly and here you have to traverse the complete list\nif i had to disgrace it then i will say that\nin this deletion is so difficult\nthat if you delete this element\nso you will have to move all these elements here\nor if you wanna do the insertion\nso you will have to move again to make the space\nand if there is the space then only insertion can happen or it won,t happen\nwhich means if the capacity is 100\nand you store 50 elements over there\nthen there is a chance of insertion\nand if the capacity is 100 and you have stored all the 100 then\nwould you put more element there is no place\nwhat do you do here\nanytime any hooks can be broke and made the space\nand is linked\nthis is the magic of linked list\nand now here insertion and deletion is difficult\nand here insertion deletion putting the element in between\ncan be done easily\ncan be seen, broken from here\nis so easy that we have to create a new node\nby creating a new node\nlink it like that\nassume that i want to put 18 here\nthis is a pointer which stores an address\nthis stores the address when i create an arrow\nwhich means this pointer is storing the address of this, assume that the address\nis 280\nso in this 280 is there and is pointing that\npoint doesn't mean that it is done by a finger\nit means in this the address is kept stored\ni will do and show you by coding it\nand along with that i'll tell you that i have created notes for you all and saved\ndo download the copy of your notes\nand the notes which i have created in that\nas much i have told you\nhas been written in a systematic way that the drawbacks of array are\nthe linklist shines over here\nhave written the thing completely\nshort crisp and to the point\nare not lengthy notes at all\nwhich means short crisp and to the point\nif you see video and notes together your work is 100% done\nnow you all see here\nin linkedlist insertion and deletion is done good\nan tell you one more disadvantage about linked list\none more i will tell you\nwhat does linked list do\nfor every element this has do be taken extra, this 7 would have come here\n11 here and 8 here\n18 here and i was storing\nhere what the problem is that every time\ni need extra memory for pointer to node\none more element and i have to add this, my data is here, this is my main data but even tho i have to\ntake this because\ni have to link in next node\nsimilarly as much elements i am adding i get an element extra with me\nof pointer type because i have to store the address of the element\nif i talk about the memory so the memory of it will increase linearly with no. of elements\nif we have 100 elements we need 100 pointers too\nif 10 more elements then 10 extra pointers\nhere direct 17 more elements to store has that capacity\nso array and linked list is not like that where you abandon array and jump to linked list\nor use array and leave linked list\nwe may think linked list is good and\nsometimes we will find array good\nso we will see that linked list also has types\nnow this video is to only give you idea\nmany people are beginners\nand i know that if you're a beginner and have learnt only c language\nto learn these things is so much difficult for you\npossible that some of you might know the idea which i have told you\nbut definitely i can guarantee that you'll get to learn new things as you move forward\nand further\ni will increase the complexity\nand can assure you that you will understand all these things\nso i have created all the notes for you\nso will have a look at them , so guys\nthis is the folder which i have created for you\nnotes of linked list\nas i have told you that linked list is just like array\nin array the data is in contiguous location\nin linked list the node of yours\nis connected with other nodes and the last element\nthe pointer of this is towards the null pointer\nas i have told you a while ago\npointer to the null means linked list here has ended\nso if you want to print all the elements of the linked lists, so you can start from here\nand go on till\nyou don't get the null\ntill you don't get the null you will keep going on\nso in array and linked list we have seen that the memory\nand capacity are the same\nin linked list you can join the nodes\nremove nodes from the mid doesn't matter\nin array what happens if you take order and want to maintain it\nso you have to move the elements\nif you removed 11 here\nso to maintain the order\nyou have to move 12 here\nleft, 18 also left 22 also left\nso this is how you have to move the elements\nin case of the array if you want to insert and delete\nbut in linked list this work will be very easy\nif we talk about drawbacks\nextra space is required for the pointer memory\nevery node has apointer\nthis pointer would not have been required in array but here it is required for linking the pointer\nin every node\nso here extra memory space is a big problem\nand again here we don't have allowance to random access\nif i know the address of 1st elements the even by calculating i cannot reach at 10th element\nbecause this is not into contiguous memory location it is not like if this is 4 then 8\nand 12 these are not the contiguous addresses\nbut in our array these are there\ncontiguous address in linked list are not there here the 0\n4,8,12 are there and the array is contiguous\naddresses are there\nas you change the addresses and move forward it goes on 0,4\n8,12,16 like this they get increased\nwhat happens in linked lists\nin linked list elements are there in non contiguous memory location\nif it is 0 then it can be 2000, or 4000\nand then the next node can be again 40\nanywhere it gets space there it can\nlink itself from the pointer\nthis was out linked list we talked about drawback that the random access is not allowed\nmemory space is required extra\nand as for advantages insertion and deletion are fast\nand along with that here\nand if you have less memory then contiguous memory is not an issue\nyou can take memory anywhere and keep on expanding as much as you want\nand this cannot be increased\nyou won't get as contiguous blocks in memory\narray has this limitation here\nassume that i have to implement LinkedList\nto implement we have one way through structures in c language\ncreate a structure named node\nand put the data here i have taken int as a data\nnot mandatory it should be integer it can be any other too\nbut for the learning purpose let it be integer\nand if i talk about complicated data types\ni wont be able to explain basic\nbut here instead of data anything can be there\nbut i am taking integer data here sop that its easy to understand\nafter this struck nodes are next\nwhich means it stores a pointer\nof its type\nwhich means pointer of struck nodes\nsee here this is our int data\nand this is pointer to next element\nit is in itself an element and this is inside pointer to next element which will point\nan element just like it\nthen it will point again something like this\nthis will point to the null which means nothing or else\nnode like itself\nso here i have created struck nodes next named pointer already\nand this is called self referencing structure\nwhich references to itself in which\nsuch a pointer is there\nwhich references to itself that is called\nself referential structure\nand we'll see further how we can create things i will code and show you\ni hope you all have got the idea of linked list\nand in next video i will explain implementation\nso i hope you all have accessed the playlist of data structure algorithm and if you haven't done that yet\ndo it now and along with it please do share\nvery less people listen to me and ignore it\ni would request again\nplease do share this playlist\nnot just for saying please do it\nonly two people shared this playlist and i've tagged both of them\nand if you share this i will tag to you people too\ntag and share this playlist\ni hope you like the videos\nfor now this much only guys thank you so much for watching this video\nand i will see you next time"
    },
    {
        "topic": "Doubly linked lists",
        "url": "https://www.youtube.com/watch?v=63HJ2-jV6Mk",
        "transcript": "Guys we talked a lot in our linked list discussion\nWe have seen what is singly linked list.\nin which there was a normal linked list.\nWe saw that we have a node,\nif I come over here\nthen look here that we have a node,\nthe one next to it points to the next node\nand so on until we do not find NULL,\nthat is, our last node points towards NULL.\nWe have a pointer pointing to the first node\nWe have seen this here in the linked list.\nWe have seen all the operations\nin which we have seen insertion, we have also seen deletion,\nSaw the search too.\nYou keep traversing\nand you stop as soon as you find the element,\nthen you can do all these things.\nBut after that we understood in the circular linked list\nthat all these operations\nthey are similar to any kind of linked list you can create.\nIf I tomorrow create a new linked list in which,\nlet's say for some feared reason\nthe second pointer is pointing to the first element\nand there is another pointer which is pointing somewhere else\nand so on.\nthat means if someone comes with a random pattern\nin front of you people\nSo in that too there are operations like\ninsertion, deletion, search.\nIn doing that, you will have to use the same concepts\nthat you people have in singly linked list,\ncircular linked list, doubly linked list.\nSo what I mean to say here is that\nif I make a new linked list, which I can call a doubly linked list,\nSo the things that are about to happen:\nthey are going to be very similar.\nNow here I will have a pointer\nwhich points to the head, so here I write the head\nThis is a pointer which gives me access to this linked list\nThat is, I can use this linked list\nwith the help of this head pointer\nwhich is pointing to the first point.\nAfter that I can go to the next:\nthere, so three things in this:\nAs we saw that our structure was in it's data and next Node\nOne is the previous node,\nand one is the pointer to the next node.\nThis is a pointer,\nthis is a pointer,\nand this is a int, Okay\nand which pointer is\nit a struct Node * pointer\nAnd this is a struct Node, well,\nall this is what it is a struct Node,\nyou must know that\nSo I do one thing here,\nyou guys must have found out by looking at this figure:\nwhat is a doubly linked list\nI don't need to understand you at all\nAnd but here you guys can see\nthe first node is 2 things in it :\nyou have extra information in this,\nwhat is the node with your previous : you can also know this\nSo if you guys point the pointer over here for some reason\nthen you can go backwards,\nyou can either go here, or go here\nWhat used to happen earlier\nyou could move forward once you have driven the pointer,\nyou cannot bring it back.\nThere are many uses of doubly linked list here\nand one of the uses of it\nyou guys can reverse it very easily by swapping the pointers\nAnd at the same time, if you have a pointer to the last node\nthen you can walk in both this direction and in this direction.\nThere are many other uses too\nI will also make you guys get the practice sets of linked list etc.\nAnd what I am focusing on right now is:\nunderstanding doubly linked list\nand we have understood linked list in general.\nSo here as we have seen there is a pointer with next,\nthere is a pointer with previous\nwhich is pointing to the previous node.\nAs you guys can see here\nwhich is our first node which is the head node\nand its previous one is pointing towards NULL\nWhat does that mean\nit mean it's the head node, right\nAnd if I have a pointer\nand I want to find out whether it is a head point or not\nI can find out by accessing its previous directly\nwhether that head node belongs to this linked list or not.\nAnd at the same time if here\nif I get a pointer to a point with the last one\nthen I can find out its next whether it is NULL or not\nSo the doubly linked list we have here is something like this\nThis is the pointer\nthis is the pointer\nit is pointing to : as NULL,\nits is pointing next here\nand its next is pointing to : this node\nSo when I made it like this here\nit means that it is pointing to this node.\nI'll change arrows a bit here\nto avoid confusion\nand you'll understand why I did it.\nI just do it a little bit like this\nbecause the arrows it's not pointing to this pointer\nit's pointing to: this whole node.\nSo I'd just make it a bit like this\nYou will find this node in many books,\nin different online references\nThese nodes which will be made of: as I have made this\nBut I'm going to take it back a little bit\nbecause the pointer it's pointing to, this node, is right.\nIt is pointing to this node\nit is not pointing to the pointer of its node\nso to avoid this confusion a bit I make it like this\nSo it is pointing to a whole node\nwhen we talk about pointer then neither it points to data\nNeither does it point to its previous nor to the next\npoints to that whole node\nSo if we are talking about head\nhead is not pointing any this pointer,\nhead is not even pointing to this data,\nhead is pointing to this whole node\nThat is, if I say the data of head then I will get 23\nif I say previous of head then I will get NULL\nand if I say next of head then I will get full node\nBecause the one next to the head is printing this entire node\nI hope you guys must be easy to understand\nbecause you guys have accessed: This playlist\nIf you haven't done it\nthen definitely you will have a little problem\nif you guys are a beginner.\nSo if you are a beginner\nand watching this video for the first time\nthat mean not be very useful\nThat's why I say bookmark this playlist by clicking here\nClick here to save\nA lot of people have access\nbut still the number of people who picked up the course:\nnot everyone has access from here\nI want all to access, to bookmark\nAnd here I will come back in my one  note\nand tell you the next story, okay\nSo how will we make it\nbecause when the implementation will happen\nthen definitely we want to write the code\nand we do not want to make this diagram etc.\nSo I will write its code at once\nthen you people will understand better\nSo what will I do here?\nI will change the pen so that there is a little excitement\nand I use red pen here\nand\nhere what I will write simply\nI will write struct Node\nok, so here i'll write the struct Node\nAnd as I had shown you to make people earlier also\nthat it contains a int data.\nNow what will be an extra thing here\nthere we will have struct Node * previous\nstruct Node * prev ;\nprev means previous\ni.e. a Node * type ,\na pointer to a  struct Node type , ok\nPointer of type struct Node\nwhich will be able to point to structure of type struct Node\nSimilarly, another structure another pointer\nstruct Node * and next\nEarlier we only had next\nnow we also have previous: ok\nSo this difference: this is just a difference\nthis extra line has been added here, right\nand this extra line that has been added\nis giving us an advantage\nthat we can go both forward and backward\nBut you people will think that why we have not done this already\nwhy we had seen singly linked list\nlook here the biggest cons for this is that\nas many nodes as I am adding, I am taking this extra space.\nSo at the cost of this extra space\nI am getting traversal on both sides\nit is not like I will always do the doubly linked list.\nSometimes I just have to go ahead and use case that:\nI prefer to use singly linked list\nIf I feel like it will be more feasible\nthen I will do singly linked list it\nif I guess I never have to look back :\nand keep moving forward\nor if i have memory constraints\ni will be happy with my singly linked list.\nYou come in a doubly linked list\nwhen you may have to go back and forth in both directions\nthe best thing is that a pointer who is traveling here:\nThat can change his mood and start traveling here,\nwell, it can travel both sides.\nbecause you can do it by arrowing (p) to (prev)\nand you will reach the back node\nand you can walk in both direction, ok\nSo I was just telling this to you people.\nnow we have got this code once,\nso we can make our doubly linked list.\nNow when you make a doubly linked list\nWhat will you do?\nFirst of all you will create nodes\nas if you have created this node, okay?\nYou made this with the help of malloc\nI call this node (N1)\nI call this node (N1), I call this (N2),\nI call this (N3) and I call this (N4)\nSuppose I wrote something like this\nI said, look man\nstruct Node * N1\nAnd if I'm in the capital, I'll let the capital be there\nit doesn't matter.\nN1 = (struct Node *) malloc\nI am writing this here in a bit like this,\nyou take a pointer\nof type struct Node *\nAnd you can dynamically allocate memory to malloc,\nby doing it\nlike you've done here,\nbut where\nLike we did here?\nInfact, I told you guys, I used you people in the code\nso you guys check the code from my website:\nand will be similar, struct Node *\nand after that, inside malloc (sizeof(struct Node *))\nI don't want to write a lot so I settled it cheaply, okay\nSimilarly you can do this for guys (N2),\ncan do for (N3), can do for (N4)\nThen what will you do once you have created nodes\nI write the create nodes here,\nthen you have to link the nodes\nI am writing a comment here, Link nodes\nAnd how would you link the nodes\nyou would link the nodes in such a way\nthat you would say that the next to (N1) is (N2), right\nFirst next to the (N1), you would say that it should be (N2),\ncapital: so let's keep the capital (N2),\nthe previous of (N1) which: what should it be : NULL, Okay\nSo you have to do with (N2) as well:\n(N2)'s previous is (N1), (N2)'s next is *(N3)\n(N3)'s previous is (N2), (N3)'s next is *(N4)\nBy doing this you guys have to make code, okay\nSo what will I do here\nthat I will show you by making it\nand you can also do traversal, well\nnow I want to give a challenge to you guys here.\nOnce you have created this\nonce you have created this structure created this code,\nthat is, you have created node, link nodes.\nOnce you guys have done this\nI want you guys to write a function\nthat first traverses it in this direction\nthen once your pointer reaches here\nit comes back and traverses again\nthat is, once a straight linked list is being printed here.\nThen you see people getting the reverse linked list printed\nSo you guys show me this program by writing, okay.\nWhat will I do here now?\nI don't want to stretch it too long\nDoubly linked list is very straight forward.\nBelieve me\nWe have spent a lot of time in the linked list here\nMy biggest goal in this course is that\nI don't want to be lengthy.\nI want someone coming here,\ncoming and watching: At the bottom,\nso with an optimal practice, I'm not saying I won't practice\nI have also put the practice set in this: You guys see\nI have put the solved questions of time complexity\nI want to do that with optimal practice.\nAnd the person who is in realistic time can finish this course\nThis is my goal\nand the notes which I will upload very soon\nMaybe when you guys are watching the video\nyou will find notes in the description\nIt is not possible for me immediately, inserting notes\nas i take time to scan and make PDF of it.\nI put video first and take few hours time\ni put my notes after that\nSo you come to check, you will get the notes.\nI have kept for you people\nSo nothing like that you people will not get\nI am prioritizing the video here now\nand I hope that you guys are understanding the things\nPlease wait a few hours patiently\nbecause I am unable to put notes immediately.\nPeople expect that as I put the video :\nI will also put the notes, I will also enter the code.\nI am putting the code\nin the way I am putting it in all the codes nowadays\nI have taken the feedback very well: Thank you guys\nSo let's what we will do now\nwe will wrap the topic of linked list\nand come later we will return to linked list\nAnd after that we will see the people who: this,\nbut you have to code the doubly linked list\nAnd here I am telling you one thing\nthat please do not proceed without coding.\nThis code which I have explained it is you people write this, ok\nIf in these cases you need video of code\nI don't think it is important to have video of code\nYou will write it, make it, connect nodes\nIf by any chance you want\nif you come 20-25 comment we also need the code\nthen I will write the code also\nBy the way I have written the code here\njust you need to write it in a C file\nI hope you guys must have understood this thing\nMake sure to access the playlist\nand if you guys want me to keep making such courses,\nI will keep uploading.\nEntered the course of data structure\nand if you want to keep coming\nthen please share this playlist\nI have given the link of Instagram\nbelow in pin comment and description\nDon't forget to tag me when you share on Instagram\nbecause when you tag, I can share your story back.\nDon't forget to like this video\nThat's all for now in this video\nThankyou so much guys for watching this video\nAnd i will see you next time."
    },
    {
        "topic": "Definition and implementation of stacks",
        "url": "https://www.youtube.com/watch?v=VmsTAVpz0xo",
        "transcript": "Error fetching transcript for video VmsTAVpz0xo: \nCould not retrieve a transcript for the video https://www.youtube.com/watch?v=VmsTAVpz0xo! This is most likely caused by:\n\nSubtitles are disabled for this video\n\nIf you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!"
    },
    {
        "topic": "Operations on stacks",
        "url": "https://www.youtube.com/watch?v=_6COl6V6mng",
        "transcript": "Error fetching transcript for video _6COl6V6mng: \nCould not retrieve a transcript for the video https://www.youtube.com/watch?v=_6COl6V6mng! This is most likely caused by:\n\nNo transcripts were found for any of the requested language codes: ('en',)\n\nFor this video (_6COl6V6mng) transcripts are available in the following languages:\n\n(MANUALLY CREATED)\n - en-IN (\"English (India)\")[TRANSLATABLE]\n\n(GENERATED)\n - hi (\"Hindi (auto-generated)\")[TRANSLATABLE]\n\n(TRANSLATION LANGUAGES)\n - ab (\"Abkhazian\")\n - aa (\"Afar\")\n - af (\"Afrikaans\")\n - ak (\"Akan\")\n - sq (\"Albanian\")\n - am (\"Amharic\")\n - ar (\"Arabic\")\n - hy (\"Armenian\")\n - as (\"Assamese\")\n - ay (\"Aymara\")\n - az (\"Azerbaijani\")\n - bn (\"Bangla\")\n - ba (\"Bashkir\")\n - eu (\"Basque\")\n - be (\"Belarusian\")\n - bho (\"Bhojpuri\")\n - bs (\"Bosnian\")\n - br (\"Breton\")\n - bg (\"Bulgarian\")\n - my (\"Burmese\")\n - ca (\"Catalan\")\n - ceb (\"Cebuano\")\n - zh-Hans (\"Chinese (Simplified)\")\n - zh-Hant (\"Chinese (Traditional)\")\n - co (\"Corsican\")\n - hr (\"Croatian\")\n - cs (\"Czech\")\n - da (\"Danish\")\n - dv (\"Divehi\")\n - nl (\"Dutch\")\n - dz (\"Dzongkha\")\n - en (\"English\")\n - eo (\"Esperanto\")\n - et (\"Estonian\")\n - ee (\"Ewe\")\n - fo (\"Faroese\")\n - fj (\"Fijian\")\n - fil (\"Filipino\")\n - fi (\"Finnish\")\n - fr (\"French\")\n - gaa (\"Ga\")\n - gl (\"Galician\")\n - lg (\"Ganda\")\n - ka (\"Georgian\")\n - de (\"German\")\n - el (\"Greek\")\n - gn (\"Guarani\")\n - gu (\"Gujarati\")\n - ht (\"Haitian Creole\")\n - ha (\"Hausa\")\n - haw (\"Hawaiian\")\n - iw (\"Hebrew\")\n - hi (\"Hindi\")\n - hmn (\"Hmong\")\n - hu (\"Hungarian\")\n - is (\"Icelandic\")\n - ig (\"Igbo\")\n - id (\"Indonesian\")\n - iu (\"Inuktitut\")\n - ga (\"Irish\")\n - it (\"Italian\")\n - ja (\"Japanese\")\n - jv (\"Javanese\")\n - kl (\"Kalaallisut\")\n - kn (\"Kannada\")\n - kk (\"Kazakh\")\n - kha (\"Khasi\")\n - km (\"Khmer\")\n - rw (\"Kinyarwanda\")\n - ko (\"Korean\")\n - kri (\"Krio\")\n - ku (\"Kurdish\")\n - ky (\"Kyrgyz\")\n - lo (\"Lao\")\n - la (\"Latin\")\n - lv (\"Latvian\")\n - ln (\"Lingala\")\n - lt (\"Lithuanian\")\n - lua (\"Luba-Lulua\")\n - luo (\"Luo\")\n - lb (\"Luxembourgish\")\n - mk (\"Macedonian\")\n - mg (\"Malagasy\")\n - ms (\"Malay\")\n - ml (\"Malayalam\")\n - mt (\"Maltese\")\n - gv (\"Manx\")\n - mi (\"M\u0101ori\")\n - mr (\"Marathi\")\n - mn (\"Mongolian\")\n - mfe (\"Morisyen\")\n - ne (\"Nepali\")\n - new (\"Newari\")\n - nso (\"Northern Sotho\")\n - no (\"Norwegian\")\n - ny (\"Nyanja\")\n - oc (\"Occitan\")\n - or (\"Odia\")\n - om (\"Oromo\")\n - os (\"Ossetic\")\n - pam (\"Pampanga\")\n - ps (\"Pashto\")\n - fa (\"Persian\")\n - pl (\"Polish\")\n - pt (\"Portuguese\")\n - pt-PT (\"Portuguese (Portugal)\")\n - pa (\"Punjabi\")\n - qu (\"Quechua\")\n - ro (\"Romanian\")\n - rn (\"Rundi\")\n - ru (\"Russian\")\n - sm (\"Samoan\")\n - sg (\"Sango\")\n - sa (\"Sanskrit\")\n - gd (\"Scottish Gaelic\")\n - sr (\"Serbian\")\n - crs (\"Seselwa Creole French\")\n - sn (\"Shona\")\n - sd (\"Sindhi\")\n - si (\"Sinhala\")\n - sk (\"Slovak\")\n - sl (\"Slovenian\")\n - so (\"Somali\")\n - st (\"Southern Sotho\")\n - es (\"Spanish\")\n - su (\"Sundanese\")\n - sw (\"Swahili\")\n - ss (\"Swati\")\n - sv (\"Swedish\")\n - tg (\"Tajik\")\n - ta (\"Tamil\")\n - tt (\"Tatar\")\n - te (\"Telugu\")\n - th (\"Thai\")\n - bo (\"Tibetan\")\n - ti (\"Tigrinya\")\n - to (\"Tongan\")\n - ts (\"Tsonga\")\n - tn (\"Tswana\")\n - tum (\"Tumbuka\")\n - tr (\"Turkish\")\n - tk (\"Turkmen\")\n - uk (\"Ukrainian\")\n - ur (\"Urdu\")\n - ug (\"Uyghur\")\n - uz (\"Uzbek\")\n - ve (\"Venda\")\n - vi (\"Vietnamese\")\n - war (\"Waray\")\n - cy (\"Welsh\")\n - fy (\"Western Frisian\")\n - wo (\"Wolof\")\n - xh (\"Xhosa\")\n - yi (\"Yiddish\")\n - yo (\"Yoruba\")\n - zu (\"Zulu\")\n\nIf you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!"
    },
    {
        "topic": "Applications of stacks",
        "url": "https://www.youtube.com/watch?v=XfX5jlzWQsg",
        "transcript": "Error fetching transcript for video XfX5jlzWQsg: \nCould not retrieve a transcript for the video https://www.youtube.com/watch?v=XfX5jlzWQsg! This is most likely caused by:\n\nNo transcripts were found for any of the requested language codes: ('en',)\n\nFor this video (XfX5jlzWQsg) transcripts are available in the following languages:\n\n(MANUALLY CREATED)\nNone\n\n(GENERATED)\n - hi (\"Hindi (auto-generated)\")[TRANSLATABLE]\n\n(TRANSLATION LANGUAGES)\n - ab (\"Abkhazian\")\n - aa (\"Afar\")\n - af (\"Afrikaans\")\n - ak (\"Akan\")\n - sq (\"Albanian\")\n - am (\"Amharic\")\n - ar (\"Arabic\")\n - hy (\"Armenian\")\n - as (\"Assamese\")\n - ay (\"Aymara\")\n - az (\"Azerbaijani\")\n - bn (\"Bangla\")\n - ba (\"Bashkir\")\n - eu (\"Basque\")\n - be (\"Belarusian\")\n - bho (\"Bhojpuri\")\n - bs (\"Bosnian\")\n - br (\"Breton\")\n - bg (\"Bulgarian\")\n - my (\"Burmese\")\n - ca (\"Catalan\")\n - ceb (\"Cebuano\")\n - zh-Hans (\"Chinese (Simplified)\")\n - zh-Hant (\"Chinese (Traditional)\")\n - co (\"Corsican\")\n - hr (\"Croatian\")\n - cs (\"Czech\")\n - da (\"Danish\")\n - dv (\"Divehi\")\n - nl (\"Dutch\")\n - dz (\"Dzongkha\")\n - en (\"English\")\n - eo (\"Esperanto\")\n - et (\"Estonian\")\n - ee (\"Ewe\")\n - fo (\"Faroese\")\n - fj (\"Fijian\")\n - fil (\"Filipino\")\n - fi (\"Finnish\")\n - fr (\"French\")\n - gaa (\"Ga\")\n - gl (\"Galician\")\n - lg (\"Ganda\")\n - ka (\"Georgian\")\n - de (\"German\")\n - el (\"Greek\")\n - gn (\"Guarani\")\n - gu (\"Gujarati\")\n - ht (\"Haitian Creole\")\n - ha (\"Hausa\")\n - haw (\"Hawaiian\")\n - iw (\"Hebrew\")\n - hi (\"Hindi\")\n - hmn (\"Hmong\")\n - hu (\"Hungarian\")\n - is (\"Icelandic\")\n - ig (\"Igbo\")\n - id (\"Indonesian\")\n - iu (\"Inuktitut\")\n - ga (\"Irish\")\n - it (\"Italian\")\n - ja (\"Japanese\")\n - jv (\"Javanese\")\n - kl (\"Kalaallisut\")\n - kn (\"Kannada\")\n - kk (\"Kazakh\")\n - kha (\"Khasi\")\n - km (\"Khmer\")\n - rw (\"Kinyarwanda\")\n - ko (\"Korean\")\n - kri (\"Krio\")\n - ku (\"Kurdish\")\n - ky (\"Kyrgyz\")\n - lo (\"Lao\")\n - la (\"Latin\")\n - lv (\"Latvian\")\n - ln (\"Lingala\")\n - lt (\"Lithuanian\")\n - lua (\"Luba-Lulua\")\n - luo (\"Luo\")\n - lb (\"Luxembourgish\")\n - mk (\"Macedonian\")\n - mg (\"Malagasy\")\n - ms (\"Malay\")\n - ml (\"Malayalam\")\n - mt (\"Maltese\")\n - gv (\"Manx\")\n - mi (\"M\u0101ori\")\n - mr (\"Marathi\")\n - mn (\"Mongolian\")\n - mfe (\"Morisyen\")\n - ne (\"Nepali\")\n - new (\"Newari\")\n - nso (\"Northern Sotho\")\n - no (\"Norwegian\")\n - ny (\"Nyanja\")\n - oc (\"Occitan\")\n - or (\"Odia\")\n - om (\"Oromo\")\n - os (\"Ossetic\")\n - pam (\"Pampanga\")\n - ps (\"Pashto\")\n - fa (\"Persian\")\n - pl (\"Polish\")\n - pt (\"Portuguese\")\n - pt-PT (\"Portuguese (Portugal)\")\n - pa (\"Punjabi\")\n - qu (\"Quechua\")\n - ro (\"Romanian\")\n - rn (\"Rundi\")\n - ru (\"Russian\")\n - sm (\"Samoan\")\n - sg (\"Sango\")\n - sa (\"Sanskrit\")\n - gd (\"Scottish Gaelic\")\n - sr (\"Serbian\")\n - crs (\"Seselwa Creole French\")\n - sn (\"Shona\")\n - sd (\"Sindhi\")\n - si (\"Sinhala\")\n - sk (\"Slovak\")\n - sl (\"Slovenian\")\n - so (\"Somali\")\n - st (\"Southern Sotho\")\n - es (\"Spanish\")\n - su (\"Sundanese\")\n - sw (\"Swahili\")\n - ss (\"Swati\")\n - sv (\"Swedish\")\n - tg (\"Tajik\")\n - ta (\"Tamil\")\n - tt (\"Tatar\")\n - te (\"Telugu\")\n - th (\"Thai\")\n - bo (\"Tibetan\")\n - ti (\"Tigrinya\")\n - to (\"Tongan\")\n - ts (\"Tsonga\")\n - tn (\"Tswana\")\n - tum (\"Tumbuka\")\n - tr (\"Turkish\")\n - tk (\"Turkmen\")\n - uk (\"Ukrainian\")\n - ur (\"Urdu\")\n - ug (\"Uyghur\")\n - uz (\"Uzbek\")\n - ve (\"Venda\")\n - vi (\"Vietnamese\")\n - war (\"Waray\")\n - cy (\"Welsh\")\n - fy (\"Western Frisian\")\n - wo (\"Wolof\")\n - xh (\"Xhosa\")\n - yi (\"Yiddish\")\n - yo (\"Yoruba\")\n - zu (\"Zulu\")\n\nIf you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!"
    },
    {
        "topic": "Definition and implementation of queues",
        "url": "https://www.youtube.com/watch?v=UbAEP7P0vfk",
        "transcript": "Guys we are going to see in this video today,\nQueue Data Structure\nYou people must have traveled in Indian Railways\nIndian Railways\nEveryone must have done it\nand if you people live outside then\nyou must have done your travel in some or the other railway.\nIf not then come to India,\nI will get you to travel in Indian Railways\nSo what happens is that\nwhen we take the ticket counter of the general\nNow do not say that I get the reservation done,\nthis and that\nWhen you are taking a general ticket,\nyou have to take a line\nand if you break the line\nthen the people who are there. they fall behind you,\nYou know this:\nThis does not apply only to Indian Railways\nYou cannot break the line anywhere.\nSo this is what we say: Our Queue\nIt is said that come in the line, in India the lines are called\nPeople say brother, come in the line\nWhat are you doing\nWhy are you entering the middle, yes brother\nSo it's actually called Queue, Okay, in English\nForget the data structure for a minute\nWhat is it called in English?\nQueue\nYou must have seen that:\nyour are number 1 in the queue,\nnumber  2 in the queue,\nnumber 3 in the queue\nBy doing this, you talk on the phone, then come: say\nSometimes you do chatting in laptop,\nYou got the point that\nThat whenever you have come before you,\nThe serve is done first\nAnd you guys who have come very late,\nthen you will be served when your time comes, okay\nSo first come, first serve to do, it is used, of Queue\nAnd let's talk about Queue data structure here\nWe talked about stack\nWhat used to happen in stack\nthat which element we put in the last : Last in\nThat used to be our first out\nBut it doesn't happen in Queue\nIf I tell you, what will be served first in Queue!\nLook at in this Queue, who serve will be done first\nThe brother who are standing in front in blue shirt,\nalso look at their hands, they have put them in the counter.\nNo one else can even take a ticket from the middle\nbut if you see it anyway,\nthey will be served first, they will take their ticket and go first\nAnd then their number will come\nand then their number will come\nand if someone breaks the line in the middle\nthen these three I don't think will allow him\nSeeing their appearance, I am not feeling it, okay\nSo what is it here, which serve will be done first in Queue\nServe will be done first in Queue, who came first, Okay\nWho came first\nWhat is this?\nFIFO\nSo it was, LIFO discipline\nand it is, FIFO discipline\nOk so what is it, FIFO and LIFO\nSo stack follows, LIFO discipline\nand Queue follows, FIFO discipline, ok\nSo we have seen this\nNow the stack that we had\nWe have talked a lot about it, okay,\nSo our stack is complete\nNow we will see Queue from this video, Okay.\nSo we guys here if I draw Queue\nSo it's like counter: well\nThis if it's a counter: something like this\nWhat will happen, people will come here\nI'll make people\nthen it will come and then this will come, Okay.\nIt's a little happy because only 3 people got in line, Okay.\nSo happy it is too also: Well\nSo here's what we did?\nThat this number 1 came first\nthis number 2 it's came after that\nthis number 3,\nand it came in at number 4\nNow you tell me,\nif I want to insert an element in Queue\nThen from where will I insert it\nI will insert here, I will insert from this end\nAnd if I get out: from element Queue\nthen from where will I come out\nI will take it out, its ticket is done then it will go out\nThere is no such thing here: No\nThe lounge is not open, the one who will be sitting here\nwill send it\nOnly the counter person will say that the ticket is done\ngo from here\nSo this is from here you come out:,\nfrom here you guys put the elements inside the Queue, Okay.\nSo we can see over here what are the insertion\nAnd there are deletion, it is happening from different ends.\nSo you can call it Insertion end, I call it Insertion end\nAnd I call it the deletion end, so here Ins, i.e. insertion end\nAnd this Del means, deletion end, Okay\nSo here we have to maintain 2 end\nWhat used to be in the stack?\nWe used to come out from where we put in the stack\nUsed to put from here, used to come out of the end of this\nOne and our allot used to live here,\nbecause the concept of stack was similar\nBut in Queue we got 2 pointers here\nOr whatever we implement from here\nIt will depend on the implementation\nthat how we will implement this thing.\nInsertion is happening from one end,\nDeletion is happening from one end\nInsertion which will happen from here\nNo one can enter from the middle from here\nAnd the deletion will happen from this end\nBecause obviously why would it go if it didn't get the ticket?\nSo in this way who we are\nYou have got the basic idea of \u200b\u200bQueue, Okay\nNow I come to a little mathematical terms.\nAnd I come, Queue as an abstract data type\nI will write here, Queue ADT\nthat is, Queue as an abstract data type\nWe talked about abstract data type\nI will define Queue ADT\nIn any abstract data type there are 2 things we have\nOne thing is data, Okay\nSo what data will we have in Queue?\nIn Queue, I have to first use storage\nThat is, I need storage in which I can store the elements.\nThis will be my first requirement\nWhat will be my second requirement!\nA pointer to an insertion end,\nA pointer to an insertion end, Okay.\nI will store the insertion end in some way\nAnd I'll write number 3 here\nThat I will store the deletion end in some way, Okay\nSo I have written here\nthat I will store the deletion end in some way\nThen the other thing which we have,\nThen the other thing that we have, in any abstract data types\nthey are methods.\nso in this Queue ADT in methods\nI would like to add some important methods :\nenqueue\nenqueue means that, a person has come to Queue,\nWe will enqueue him, Okay\nThat is, that person's on-boarding in the Queue, okay\nThis became my first method\nAnd what will be my second method?\nThe second method will be dequeue\nThis is also a very important method:,\nThat is, if a person has got a ticket,\nthen it will be dequeue.\nSo I write here,\ndequeue,\nand if someone comes here then it will be enqueue\nOkay\nSo enqueue and dequeue You understand what happens\nThis man will be enqueue, this man will be dequeue, Okay\nSo you get it too\nNow we have some other methods which we can define\nWhich we may need of first value\nWhat human serve is being done in Queue\nwhat is at the number 1 position,\nThen we may need us, who is in the very last\nof last value\nSo I can implement a function named last val\nat the same time\nI can add more methods to my abstract data types\nBut so many methods are enough for us\nI will add one more method\nand that: mine,\nwhich is my Queue, if I want to peek in it.\nPeek the queue\nAnd it will take the position and tell me who is at number 1,\nwho is at number 2, who is at number 3,\nwho is at number 4, Okay\nThen let's add a isEmpty and isFull,\nisEmpty, Okay\nand it will become one isFull\nand this is my Queue as an abstract data type that I defined\nAnother Queue as an abstract data type can another define it\nIt can add more methods to it,\nBut I will keep only so many methods in my\nQueue as an abstract data type,\nAnd if i generalize that have the most important\nand mostly use methods of Queue.\nI have covered them in this.\nSo we have this storage in Queue as an abstract data type,\nOkay\nAnd along with storage I want an insertion end, deletion end\nThen all these methods are needed\nIf I want to on-board someone in Queue\nI want to put someone in Queue, then I will enqueue\nI will dequeue, if someone's work is done\nThen I will remove him from Queue.\nFirst val means who is at the front,\nLast val means who is behind.\nPeek position means who is at number 3, who is at number 2.\nStarting from here,\nI can see from here who is at position 1, who is at 2, who is at 3\nisEmpty, Whether Queue is empty, is the counter lying vacant!\nisFull, is there any limit?\nAre we imposing any limit?\nIf we are putting any limit here then the Queue will be full.\nNow if you have filled the entire station\nwhich was the railway station\nthen no one will be able to enter inside\nSo then the meaning Queue will be full\nSo isFull also here: we can implement\nNow I would like to tell one more thing here,\nIt's obvious,\nbut even after that I will tell\nThat this is Queue, Okay.\nIt is not limited only by our Indian Railways\nIt was an example which I gave\nNot limited to any type of counters\nIt is not that it is limited to railway counters only.\nIt has many other uses,\nit is just a one-of-a-kind example, which is very well understood.\nof KOA: that's why we take it right, Okay.\nSo this is our one note:,\nthat Queue is not limited only for counters\nAt the same time Queue\nCan be implemented in various phase.\nYou can implement this in many ways, Okay\nLike if I want to use array,\nthen I can implement it with the help of array.\nI can implement Queue with the help of linked list\nI can implement Queue with the help of stack also.\nOkay, I can implement with the help of stack also\nSo if i say my first one which is way.\nwhich i can implement to Queue, it is Using arrays\nIn No. 2, Will Come, Using Linked List\nUsing Linked List\nAnd in number 3, I will write, Using other ADT's. Okay.\nSo we will take a closer look at the arrays and linked list\nOther ADTs also very straight forward:,\nIt's just that I won't touch upon other ADT's : Initially\nI will make a video later,\nBut how to implement Queue from stack,\nhow to implement Queue with any other ADT?\nyou can make a lot of questions like this.\nI will not touch upon them\nHere we will only talk,\nThat's our Queue, how it is implemented by array\nand how it is implemented by linked list\nSo i hope's video was very helpful for you people\nAnd if you like this video then like the video\nAnd at the same time\nIf you have not accessed the playlist of the Data Structure:\nSo access it\nIf you guys are not liking the video\nthen please I want to request from you guys, like this video\nI don't want to go by just saying\nI want you to feel from the heart\nthat these videos are helpful for you people,\nand after that you like\nI don't want to be a person just saying\nthat I should speak, like, share, subscribe\nI heartily want that you must write this video at least\nFor now there is only so much in this video\nThankyou so much guys for watching this video\nAnd i will see you next time."
    },
    {
        "topic": "Operations on queues",
        "url": "https://www.youtube.com/watch?v=zp6pBNbUB2U",
        "transcript": "in this video we are going to talk about\nqueues in data structure see what is the\ndata structure it is a way of storing\nand organizing the data right we have\ndiscussed few data structures like\narrays linked lists and stacks in this\nvideo we will see what is U so Q is what\nit is a linear data structure you can\nsee or you can say Q is an abstract data\ntype in this video we will discuss Q as\nan abstract data type ADT means when I\nsay edit E it means we are going to\ndefine we are going to see the features\nor operations of Q we will not go in\ndetail implementation right see we can\nimplement Q's using arrays linked lists\nas well as using stack that\nimplementation we will discuss in next\nvideo in this video we will see what is\nQ and what are different operations\nperformed on Q fundamental operations\nfine as well as we will see some\napplications of Q's so let us understand\nthis concept with a real-life scenario\nfirst of all right let us suppose there\nis a ticket counter fine that's a movie\nticket counter you can consider right\nand now there is no one there in the\nqueue or in the line fine first of all\nsuppose you go and you stand there and\nafter that second third fourth fifth\nfive persons are there so obviously you\nif you are the first then you will get\nthe ticket first then you will go after\nthat second person then third and fourth\nand then fifth and suppose before you\nthere are five persons and after that\nyou reach there so you have you will\nhave to stand at sixth position right\nand you will get ticket after be after\nyou know these five persons fine\nso here the simple funda is what\nfirst-in first-out or you can say first\ncome first so the person who is first in\nthe row will get the ticket first right\nso now in the queue this funda is known\nas first in first out FIFO so Q is\nbasically what it is a structure\nit is an ordered list as stack we have\ndiscussed staff is an ordered list that\nfollow the principle of Li for last in\nfirst out queue is an collection or\nqueue is an ordered list which follow\nwhat principle first-in first-out\nright now what is that principle see you\ncan say Q is a structure that is going\nto follow some restrictions on insertion\nand deletion operation fine or that is\ngoing to follow a rule that is going to\nfollow a principle and what is that rule\ninsertion and deletion in case of queue\ninsertion would be performed from one\nend right and the name of that and that\nend is known as rear or till right and\ndeletion would be performed from another\nend and that end is known as head or you\ncan say friend right in queue if you say\nmore technically then we will use a rear\nend front not head and pain and rather\nthan insertion insertion means adding a\ndata in the queue fine\nso the technical name in the for in in\nthis in the context of queue it is known\nas in queue right and deletion is known\nas DQ by and in stab this insertion and\ndeletion is not known as push and pop\nfine\nso NQ operation should be performed from\none end and DQ operation would be\nperformed from another end right so we\nwill see the logical representation of\nqueue if you logically represent the\nqueue it means it will have two ends to\nopen it right in stab we have only one\nend one opponent like and queue would be\nrepresented something like this\nit is having two and one is this one is\nthis right suppose I am taking this end\nis rear right and this is what friend\nobviously when you are going to\nimplement this cue you will have to take\nfront and rear two variables like that\nis must so insertion or you can see NQ\noperation would be performed from rear\nfrom here we can insert data in the cube\nand if you want to delete data from the\nqueue it means from the front we can DQ\nwe can delete data right so this is what\na logical representation of a queue fine\nsuppose and queue I have right now two\nelements two and three at some point of\ntime right so at that time this front\nvariable would be pointing to here and\nthe rear variable would be pointing to\nhere right and the index is suppose zero\nand one at some point of time we are\nsuppose we are implementing the skew\nusing array and at some point of point\nof time p.m. only two elements in that\nqueue and index is zero and one so front\nis zero and rear is one now in this case\nif you want to insert third element from\nwhere we can insert from this end only\nso what you need to do if suppose the\nsize of this do we have taken five we\ncan insert five element the capacity is\nfive right so now first of all you will\nincrement this rear right so now rear\nplus plus that is real would be pointing\nto this node and now you can insert\nanother it suppose I have inserted five\nright and if you want to delete then\nfrom here only you can delete right so\nfirst in first out firstly we have\ninserted two and that is the first\nelement you can delete if suppose you\nwant to\nlater this five you cannot directly\ndelete this five first of all you will\nhave to delete this two from the queue\nthen three from that you after that only\nyou can delete this 5 right so it is\nthat is why it is no it is known as it\nwill follow FIFO principal love first-in\nfirst-out\nor you can say last in last out last in\nlast out somewhere it is also written\nlike this that the same thing last\ninteger that is in queued in this 2 is 5\nand that would be the last element you\ncan remove so last in last out this is Q\nso now we will see some operation that\ncan be performed on a Q so you can\ndefine Q as it is a ordered list or you\ncan say it is a collection in which\ninsertion can be performed from one end\nthat is from rear end and a deletion can\nbe performed from another end that is\nfrom front end of the queue fine and it\nis going to follow it is a structure you\ncan say that is going to follow the FIFO\nrules that is first-in first-out\nright so now we will see some operation\nthat can be performed on Q so two\noperation we have discussed that is\nfirst is n 2 and that is the second is\nDQ right these are two fundamental\noperations and Q and D Q n 2 means\ninserting or adding a data in the q DQ\nms deleting a data from the queue\nsee here in NQ I'm passing to as an\nargument because I want to suppose I\nwant to insert 2 in the queue then I can\npass this in the NQ in DQ no need to\npass anything because always the element\nwould be DQ'd from the front so the\nelement which is at the front index of\nthe queue that would be deleted right so\nno need to pass anything third may be\nfriend or you can say peek in stack it\nwas top it means the motto of this\noperator operation is what it is going\nto tell you what does the element at the\nfront of the queue right we will see\nwhat is the element at the front of the\nqueue without removing that\nfrom the queue or without deterring that\nelement from the queue right now is\nqueue full you can check by is full\nfunction it is it will return true if\nthe queue is full it will otherwise it\nwill return phones is empty same we have\ndiscussed in stack if the queue is empty\nthen it could return true otherwise it\nwill return false right now see the\nlogical representation of you so this is\nthe logical representation of queue fine\nany end you can take front or rear but\nyou have to take care of that thing\ndeletion from front and insertion from\nrear right so here I am taking this is\nwhat front and this is what rear I will\ninsert always from here delete from here\nyou can take front this side rear this\nside as you wish but insertion and\ndeletion would be according to the rule\nonly fine now if you want to insert some\ndata here obviously you need to specify\nthe size of this queue suppose the\ncapacity of queue is fine you can say\nsize I am taking is 5 how will take the\nsize 5 Huggle implement this through\nthat thing we will discuss in next video\nso it means I can insert 5 element in\nthis queue right here I have 3 this end\nand index is 0 1 2 3 & 4 so initially\nthere is nothing in the queue right in\nthat case what we will do both friend\nfront end this rear would point to minus\n1 hypothetically we assume that there is\na minus 1 index and these are pointing\nto minus 1 it means queue is empty right\nthat is the signal if this is minus 1 it\nmeans Q is impeding now I want to\ninclude 2 now what would happen see\nfriend is minus 1 rear is also minus 1\nobviously we will increase front and\nrear both so front plus plus and rear\nplus plus also right so now front is\nalso pointing to here and at this point\nof time rear is also pointing to here\nat the zero and now we can insert here\ntoo right now suppose again I want to NQ\nthree\nI have hold again function and Q and\nsuppose ten I want to insert in that\ncase what will happen\nsee friend will always point to this\nnode the front one the front element we\nwill not move this front for inserting\nthe data inserting would be always from\nthe rear part so the real variable we\nare going to move so first of all you\nwill increase the rear rear plus plus\nmeans now rear is pointing to here and\nnow here I can insert ten again suppose\nI am calling NQ minus 1 again what we\nwill not touch this front we will move\nthis rear insertion from drear only that\nthing you have to take care rear plus\nplus means rear would point here and now\nhere I can insert minus 1 say at this\npoint of time front is 0 and rear is now\n- right now suppose I am calling DQ\nfunction no need to pass anything\nbecause always the data would be deleted\nfrom front now when you can touch this\nfront now we will not touch this rear in\nDQ we will touch this friend right so\nnow suppose you want to print the data\nyou have DQ'd so you can write down\nprintf the data you have DQ'd is from\nthe queue you can print this value and\nafter that what you will do you will do\nfront plus plus right so now front is\npointing to here front is one rear is\ntwo or in DQ simply you will write front\nplus plus that is also fine because now\nthis is not a part of queue the part of\nqueue is only two elements whatever\nbetween front and rear that is part of\nyou this is now a garbage value and we\ndon't care what the garbage value lies\nhere in future if you will access this\nselling and usually if you will write\nhere something that this value would be\noverwritten that is fine fine now\nsuppose I am calling NQ function 3 times\nso now NQ 0 means from rerai I will know\ntouch this front from rear I'm where\nonly I can insert a year plus plus a\nyear would be pointing to here and here\nI can insert a 0 into one rear plus plus\nhere I can insert one into five then\nrear plus plus but what we have the size\ntill here only\nso if rear is what rear is equal to four\nit means rear is equal to this maximum\nsize minus one index is 4 now maximum\nsize is five in that case you will print\nwe cannot insert any data you means you\ncan say all flow condition this is all\nflow condition right so this will print\nwhat overflow condition this is an hour\nof overflow condition right and what is\nunder flow condition suppose you want to\nDQ and there is nothing in this list\nright both front and rear are minus one\nin that case what that is done under\nflow condition that is to is empathy\nright now suppose before calling this DQ\nfunction I am calling peak function\nafter this NQ but you can say front so\nit will return what front value is now n\nbecause C Q is between from front to\nrear that is here to here this is what\ngarbage value so I rub this one this is\ngarbage value right so now this will\nreturn 10 after that suppose you are\ncalling DQ function continuously three\ntimes what would happen first of all DQ\nit means front plus plus front foot\npoint here again DQ front plus plus AG +\nDQ front plus plus right means front and\nrear both are pointing to here now this\nis what a garbage value this is not a\ncure suppose I am removing these value\nfrom here from these cell because you\ncan have override these values right now\nas you can see both front and rear are\npointing to hair both are at same index\nso in de you can write down one\ncondition you can check that condition\nalso if front and rear is different is\nequal to is equal to read in that case\nwhat it means only one element is there\nin the queue so what you can do after\nremoving this what will what would\nhappen friend and driller is equal to\nminus one you can set front and rear is\nequal to minus one because this is the\nwe have set for em ptq right or if we\nwill not do this thing then simply same\nprocessor front plus plus right front\nplus plus means front foot point to here\nthat is five friend becomes five\nso another condition of checking the in\nparticular is what if front is greater\nthan this rear because rear is still\nfour front is five right in that case it\nmeans Q is empathy friend plus plus\nmeans we have deleted this Q right so\ndelete this element from the queue so it\nmeans Q is empathy\nso when friend becomes greater than we\nare then also it is empathy so we are\ngoing to see how to write down these\ncondition in next video\nfine now suppose if you talk about the\ntime complexity then in that case these\noperations would take order of one only\nbecause we are not going to write any\nloops or anything for performing these\noperations so it would take order of one\nonly right constraint time now suppose\nat some point of time both friend and\nBria are pointing to this node\nit means Q is having only one data this\nthis this this these four cells are\nempty right and now if you call NQ in\nthat case it would return what Q is full\nthat is the drawback why it will return\nQ is full because see see here near is\nwhat pointing to for or ear is for that\nis maximum size minus one and that is\ncondition of what or flow condition\nmeans the Q is full now it will show you\nQ is full right but see these spaces are\nfree but we cannot insert here this is\nwhat wastage of the space so this is a\ndrawback of this Q we have a solution of\nthis cube that is the circular queue\nthat also I will discuss later fine\nso but this is now a drawback you have\nspace but you cannot insert here data\nright now we will see some applications\nof Q so the most common application of\nthis queue data structure is what it is\nused where you want to you know serve\nthe request on a single shared resource\nsuppose you have a single resource and\nthat is shared\nlet us take you you can take an example\nof printer suppose you have one printer\nand that is shareable fine so what would\nhappen it's not like that suppose there\nare five pcs and these five pieces are\nsharing one printer it's not like that\nit will give command and this will print\nand at the same time it will print it\nwill give command and it will print\nright what this printer will do suppose\nthis this has given some command to\nprint a date and now the printer is\nprinting now at the same time computer\nthis tree it has given command to this\nprinter then what would happen the\nprinter is busy 'no so what printer will\ndo it will obviously it will have a\nprogram so that request would be stored\nin queue after that suppose this printer\nwould give the request so it would store\nhere after that this this would store\nhere so it will in the memory in the\nprinter memory it will what make a queue\nof all the requests right first of all\nit will print whatever the request it\nhas even then it will fulfill requests\nof three then two like this right and\nqueues are also used in real life\nscenario like you can take an example of\na new oil in customer care then\nsometimes they tell you that they tell\nyou to hold on for a few minutes because\ntheir representative is not free so what\nthey do they use queues to put the\npeople on hold right until their\nrepresentative are free fine\nnext you can take an example of\nprocessor see you have only one\nprocessor CPU you can see right so the\nprocesses would be placed in queue in\noperating system I guess we have\ndiscussed many times when we were\ndiscussing the concept of operating\nsystem then you can check out in the\nplaylist there are ready queue there are\nwaiting queue fine so the processes\nwould be put in the queue and as soon as\nprocessor gets free it will take from\nthe queue it will take the processes\nfrom the queue one by one right so all\nthe processes are also put in the queue\nright because processor is what it is a\nshareable resource any process all the\nprocesses can share this processor\nbut obviously we cannot execute all the\nprocesses at the same time so you have\nto put those processes and waiting or\nyou can say those processes are put in\nqueues right so these are some example\nthese are some applications of queue\ndata structure and there are many more\napplications of youth' we will discuss\nall these one-by-one in later videos so\nin next video basically we will discuss\nhow to implement queue using arrays and\nthen using linked lists and then using\nstacks fine so I'll send the next video\ntill then bye bye take care"
    },
    {
        "topic": "Applications of queues",
        "url": "https://www.youtube.com/watch?v=zp6pBNbUB2U",
        "transcript": "in this video we are going to talk about\nqueues in data structure see what is the\ndata structure it is a way of storing\nand organizing the data right we have\ndiscussed few data structures like\narrays linked lists and stacks in this\nvideo we will see what is U so Q is what\nit is a linear data structure you can\nsee or you can say Q is an abstract data\ntype in this video we will discuss Q as\nan abstract data type ADT means when I\nsay edit E it means we are going to\ndefine we are going to see the features\nor operations of Q we will not go in\ndetail implementation right see we can\nimplement Q's using arrays linked lists\nas well as using stack that\nimplementation we will discuss in next\nvideo in this video we will see what is\nQ and what are different operations\nperformed on Q fundamental operations\nfine as well as we will see some\napplications of Q's so let us understand\nthis concept with a real-life scenario\nfirst of all right let us suppose there\nis a ticket counter fine that's a movie\nticket counter you can consider right\nand now there is no one there in the\nqueue or in the line fine first of all\nsuppose you go and you stand there and\nafter that second third fourth fifth\nfive persons are there so obviously you\nif you are the first then you will get\nthe ticket first then you will go after\nthat second person then third and fourth\nand then fifth and suppose before you\nthere are five persons and after that\nyou reach there so you have you will\nhave to stand at sixth position right\nand you will get ticket after be after\nyou know these five persons fine\nso here the simple funda is what\nfirst-in first-out or you can say first\ncome first so the person who is first in\nthe row will get the ticket first right\nso now in the queue this funda is known\nas first in first out FIFO so Q is\nbasically what it is a structure\nit is an ordered list as stack we have\ndiscussed staff is an ordered list that\nfollow the principle of Li for last in\nfirst out queue is an collection or\nqueue is an ordered list which follow\nwhat principle first-in first-out\nright now what is that principle see you\ncan say Q is a structure that is going\nto follow some restrictions on insertion\nand deletion operation fine or that is\ngoing to follow a rule that is going to\nfollow a principle and what is that rule\ninsertion and deletion in case of queue\ninsertion would be performed from one\nend right and the name of that and that\nend is known as rear or till right and\ndeletion would be performed from another\nend and that end is known as head or you\ncan say friend right in queue if you say\nmore technically then we will use a rear\nend front not head and pain and rather\nthan insertion insertion means adding a\ndata in the queue fine\nso the technical name in the for in in\nthis in the context of queue it is known\nas in queue right and deletion is known\nas DQ by and in stab this insertion and\ndeletion is not known as push and pop\nfine\nso NQ operation should be performed from\none end and DQ operation would be\nperformed from another end right so we\nwill see the logical representation of\nqueue if you logically represent the\nqueue it means it will have two ends to\nopen it right in stab we have only one\nend one opponent like and queue would be\nrepresented something like this\nit is having two and one is this one is\nthis right suppose I am taking this end\nis rear right and this is what friend\nobviously when you are going to\nimplement this cue you will have to take\nfront and rear two variables like that\nis must so insertion or you can see NQ\noperation would be performed from rear\nfrom here we can insert data in the cube\nand if you want to delete data from the\nqueue it means from the front we can DQ\nwe can delete data right so this is what\na logical representation of a queue fine\nsuppose and queue I have right now two\nelements two and three at some point of\ntime right so at that time this front\nvariable would be pointing to here and\nthe rear variable would be pointing to\nhere right and the index is suppose zero\nand one at some point of time we are\nsuppose we are implementing the skew\nusing array and at some point of point\nof time p.m. only two elements in that\nqueue and index is zero and one so front\nis zero and rear is one now in this case\nif you want to insert third element from\nwhere we can insert from this end only\nso what you need to do if suppose the\nsize of this do we have taken five we\ncan insert five element the capacity is\nfive right so now first of all you will\nincrement this rear right so now rear\nplus plus that is real would be pointing\nto this node and now you can insert\nanother it suppose I have inserted five\nright and if you want to delete then\nfrom here only you can delete right so\nfirst in first out firstly we have\ninserted two and that is the first\nelement you can delete if suppose you\nwant to\nlater this five you cannot directly\ndelete this five first of all you will\nhave to delete this two from the queue\nthen three from that you after that only\nyou can delete this 5 right so it is\nthat is why it is no it is known as it\nwill follow FIFO principal love first-in\nfirst-out\nor you can say last in last out last in\nlast out somewhere it is also written\nlike this that the same thing last\ninteger that is in queued in this 2 is 5\nand that would be the last element you\ncan remove so last in last out this is Q\nso now we will see some operation that\ncan be performed on a Q so you can\ndefine Q as it is a ordered list or you\ncan say it is a collection in which\ninsertion can be performed from one end\nthat is from rear end and a deletion can\nbe performed from another end that is\nfrom front end of the queue fine and it\nis going to follow it is a structure you\ncan say that is going to follow the FIFO\nrules that is first-in first-out\nright so now we will see some operation\nthat can be performed on Q so two\noperation we have discussed that is\nfirst is n 2 and that is the second is\nDQ right these are two fundamental\noperations and Q and D Q n 2 means\ninserting or adding a data in the q DQ\nms deleting a data from the queue\nsee here in NQ I'm passing to as an\nargument because I want to suppose I\nwant to insert 2 in the queue then I can\npass this in the NQ in DQ no need to\npass anything because always the element\nwould be DQ'd from the front so the\nelement which is at the front index of\nthe queue that would be deleted right so\nno need to pass anything third may be\nfriend or you can say peek in stack it\nwas top it means the motto of this\noperator operation is what it is going\nto tell you what does the element at the\nfront of the queue right we will see\nwhat is the element at the front of the\nqueue without removing that\nfrom the queue or without deterring that\nelement from the queue right now is\nqueue full you can check by is full\nfunction it is it will return true if\nthe queue is full it will otherwise it\nwill return phones is empty same we have\ndiscussed in stack if the queue is empty\nthen it could return true otherwise it\nwill return false right now see the\nlogical representation of you so this is\nthe logical representation of queue fine\nany end you can take front or rear but\nyou have to take care of that thing\ndeletion from front and insertion from\nrear right so here I am taking this is\nwhat front and this is what rear I will\ninsert always from here delete from here\nyou can take front this side rear this\nside as you wish but insertion and\ndeletion would be according to the rule\nonly fine now if you want to insert some\ndata here obviously you need to specify\nthe size of this queue suppose the\ncapacity of queue is fine you can say\nsize I am taking is 5 how will take the\nsize 5 Huggle implement this through\nthat thing we will discuss in next video\nso it means I can insert 5 element in\nthis queue right here I have 3 this end\nand index is 0 1 2 3 & 4 so initially\nthere is nothing in the queue right in\nthat case what we will do both friend\nfront end this rear would point to minus\n1 hypothetically we assume that there is\na minus 1 index and these are pointing\nto minus 1 it means queue is empty right\nthat is the signal if this is minus 1 it\nmeans Q is impeding now I want to\ninclude 2 now what would happen see\nfriend is minus 1 rear is also minus 1\nobviously we will increase front and\nrear both so front plus plus and rear\nplus plus also right so now front is\nalso pointing to here and at this point\nof time rear is also pointing to here\nat the zero and now we can insert here\ntoo right now suppose again I want to NQ\nthree\nI have hold again function and Q and\nsuppose ten I want to insert in that\ncase what will happen\nsee friend will always point to this\nnode the front one the front element we\nwill not move this front for inserting\nthe data inserting would be always from\nthe rear part so the real variable we\nare going to move so first of all you\nwill increase the rear rear plus plus\nmeans now rear is pointing to here and\nnow here I can insert ten again suppose\nI am calling NQ minus 1 again what we\nwill not touch this front we will move\nthis rear insertion from drear only that\nthing you have to take care rear plus\nplus means rear would point here and now\nhere I can insert minus 1 say at this\npoint of time front is 0 and rear is now\n- right now suppose I am calling DQ\nfunction no need to pass anything\nbecause always the data would be deleted\nfrom front now when you can touch this\nfront now we will not touch this rear in\nDQ we will touch this friend right so\nnow suppose you want to print the data\nyou have DQ'd so you can write down\nprintf the data you have DQ'd is from\nthe queue you can print this value and\nafter that what you will do you will do\nfront plus plus right so now front is\npointing to here front is one rear is\ntwo or in DQ simply you will write front\nplus plus that is also fine because now\nthis is not a part of queue the part of\nqueue is only two elements whatever\nbetween front and rear that is part of\nyou this is now a garbage value and we\ndon't care what the garbage value lies\nhere in future if you will access this\nselling and usually if you will write\nhere something that this value would be\noverwritten that is fine fine now\nsuppose I am calling NQ function 3 times\nso now NQ 0 means from rerai I will know\ntouch this front from rear I'm where\nonly I can insert a year plus plus a\nyear would be pointing to here and here\nI can insert a 0 into one rear plus plus\nhere I can insert one into five then\nrear plus plus but what we have the size\ntill here only\nso if rear is what rear is equal to four\nit means rear is equal to this maximum\nsize minus one index is 4 now maximum\nsize is five in that case you will print\nwe cannot insert any data you means you\ncan say all flow condition this is all\nflow condition right so this will print\nwhat overflow condition this is an hour\nof overflow condition right and what is\nunder flow condition suppose you want to\nDQ and there is nothing in this list\nright both front and rear are minus one\nin that case what that is done under\nflow condition that is to is empathy\nright now suppose before calling this DQ\nfunction I am calling peak function\nafter this NQ but you can say front so\nit will return what front value is now n\nbecause C Q is between from front to\nrear that is here to here this is what\ngarbage value so I rub this one this is\ngarbage value right so now this will\nreturn 10 after that suppose you are\ncalling DQ function continuously three\ntimes what would happen first of all DQ\nit means front plus plus front foot\npoint here again DQ front plus plus AG +\nDQ front plus plus right means front and\nrear both are pointing to here now this\nis what a garbage value this is not a\ncure suppose I am removing these value\nfrom here from these cell because you\ncan have override these values right now\nas you can see both front and rear are\npointing to hair both are at same index\nso in de you can write down one\ncondition you can check that condition\nalso if front and rear is different is\nequal to is equal to read in that case\nwhat it means only one element is there\nin the queue so what you can do after\nremoving this what will what would\nhappen friend and driller is equal to\nminus one you can set front and rear is\nequal to minus one because this is the\nwe have set for em ptq right or if we\nwill not do this thing then simply same\nprocessor front plus plus right front\nplus plus means front foot point to here\nthat is five friend becomes five\nso another condition of checking the in\nparticular is what if front is greater\nthan this rear because rear is still\nfour front is five right in that case it\nmeans Q is empathy friend plus plus\nmeans we have deleted this Q right so\ndelete this element from the queue so it\nmeans Q is empathy\nso when friend becomes greater than we\nare then also it is empathy so we are\ngoing to see how to write down these\ncondition in next video\nfine now suppose if you talk about the\ntime complexity then in that case these\noperations would take order of one only\nbecause we are not going to write any\nloops or anything for performing these\noperations so it would take order of one\nonly right constraint time now suppose\nat some point of time both friend and\nBria are pointing to this node\nit means Q is having only one data this\nthis this this these four cells are\nempty right and now if you call NQ in\nthat case it would return what Q is full\nthat is the drawback why it will return\nQ is full because see see here near is\nwhat pointing to for or ear is for that\nis maximum size minus one and that is\ncondition of what or flow condition\nmeans the Q is full now it will show you\nQ is full right but see these spaces are\nfree but we cannot insert here this is\nwhat wastage of the space so this is a\ndrawback of this Q we have a solution of\nthis cube that is the circular queue\nthat also I will discuss later fine\nso but this is now a drawback you have\nspace but you cannot insert here data\nright now we will see some applications\nof Q so the most common application of\nthis queue data structure is what it is\nused where you want to you know serve\nthe request on a single shared resource\nsuppose you have a single resource and\nthat is shared\nlet us take you you can take an example\nof printer suppose you have one printer\nand that is shareable fine so what would\nhappen it's not like that suppose there\nare five pcs and these five pieces are\nsharing one printer it's not like that\nit will give command and this will print\nand at the same time it will print it\nwill give command and it will print\nright what this printer will do suppose\nthis this has given some command to\nprint a date and now the printer is\nprinting now at the same time computer\nthis tree it has given command to this\nprinter then what would happen the\nprinter is busy 'no so what printer will\ndo it will obviously it will have a\nprogram so that request would be stored\nin queue after that suppose this printer\nwould give the request so it would store\nhere after that this this would store\nhere so it will in the memory in the\nprinter memory it will what make a queue\nof all the requests right first of all\nit will print whatever the request it\nhas even then it will fulfill requests\nof three then two like this right and\nqueues are also used in real life\nscenario like you can take an example of\na new oil in customer care then\nsometimes they tell you that they tell\nyou to hold on for a few minutes because\ntheir representative is not free so what\nthey do they use queues to put the\npeople on hold right until their\nrepresentative are free fine\nnext you can take an example of\nprocessor see you have only one\nprocessor CPU you can see right so the\nprocesses would be placed in queue in\noperating system I guess we have\ndiscussed many times when we were\ndiscussing the concept of operating\nsystem then you can check out in the\nplaylist there are ready queue there are\nwaiting queue fine so the processes\nwould be put in the queue and as soon as\nprocessor gets free it will take from\nthe queue it will take the processes\nfrom the queue one by one right so all\nthe processes are also put in the queue\nright because processor is what it is a\nshareable resource any process all the\nprocesses can share this processor\nbut obviously we cannot execute all the\nprocesses at the same time so you have\nto put those processes and waiting or\nyou can say those processes are put in\nqueues right so these are some example\nthese are some applications of queue\ndata structure and there are many more\napplications of youth' we will discuss\nall these one-by-one in later videos so\nin next video basically we will discuss\nhow to implement queue using arrays and\nthen using linked lists and then using\nstacks fine so I'll send the next video\ntill then bye bye take care"
    },
    {
        "topic": "Definition and classification of trees",
        "url": "https://www.youtube.com/watch?v=oeKBs41MkNo",
        "transcript": "Error fetching transcript for video oeKBs41MkNo: \nCould not retrieve a transcript for the video https://www.youtube.com/watch?v=oeKBs41MkNo! This is most likely caused by:\n\nSubtitles are disabled for this video\n\nIf you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!"
    },
    {
        "topic": "Operations on binary trees",
        "url": "https://www.youtube.com/watch?v=uTyxscVC_-U",
        "transcript": "Error fetching transcript for video uTyxscVC_-U: \nCould not retrieve a transcript for the video https://www.youtube.com/watch?v=uTyxscVC_-U! This is most likely caused by:\n\nNo transcripts were found for any of the requested language codes: ('en',)\n\nFor this video (uTyxscVC_-U) transcripts are available in the following languages:\n\n(MANUALLY CREATED)\nNone\n\n(GENERATED)\n - hi (\"Hindi (auto-generated)\")[TRANSLATABLE]\n\n(TRANSLATION LANGUAGES)\n - ab (\"Abkhazian\")\n - aa (\"Afar\")\n - af (\"Afrikaans\")\n - ak (\"Akan\")\n - sq (\"Albanian\")\n - am (\"Amharic\")\n - ar (\"Arabic\")\n - hy (\"Armenian\")\n - as (\"Assamese\")\n - ay (\"Aymara\")\n - az (\"Azerbaijani\")\n - bn (\"Bangla\")\n - ba (\"Bashkir\")\n - eu (\"Basque\")\n - be (\"Belarusian\")\n - bho (\"Bhojpuri\")\n - bs (\"Bosnian\")\n - br (\"Breton\")\n - bg (\"Bulgarian\")\n - my (\"Burmese\")\n - ca (\"Catalan\")\n - ceb (\"Cebuano\")\n - zh-Hans (\"Chinese (Simplified)\")\n - zh-Hant (\"Chinese (Traditional)\")\n - co (\"Corsican\")\n - hr (\"Croatian\")\n - cs (\"Czech\")\n - da (\"Danish\")\n - dv (\"Divehi\")\n - nl (\"Dutch\")\n - dz (\"Dzongkha\")\n - en (\"English\")\n - eo (\"Esperanto\")\n - et (\"Estonian\")\n - ee (\"Ewe\")\n - fo (\"Faroese\")\n - fj (\"Fijian\")\n - fil (\"Filipino\")\n - fi (\"Finnish\")\n - fr (\"French\")\n - gaa (\"Ga\")\n - gl (\"Galician\")\n - lg (\"Ganda\")\n - ka (\"Georgian\")\n - de (\"German\")\n - el (\"Greek\")\n - gn (\"Guarani\")\n - gu (\"Gujarati\")\n - ht (\"Haitian Creole\")\n - ha (\"Hausa\")\n - haw (\"Hawaiian\")\n - iw (\"Hebrew\")\n - hi (\"Hindi\")\n - hmn (\"Hmong\")\n - hu (\"Hungarian\")\n - is (\"Icelandic\")\n - ig (\"Igbo\")\n - id (\"Indonesian\")\n - iu (\"Inuktitut\")\n - ga (\"Irish\")\n - it (\"Italian\")\n - ja (\"Japanese\")\n - jv (\"Javanese\")\n - kl (\"Kalaallisut\")\n - kn (\"Kannada\")\n - kk (\"Kazakh\")\n - kha (\"Khasi\")\n - km (\"Khmer\")\n - rw (\"Kinyarwanda\")\n - ko (\"Korean\")\n - kri (\"Krio\")\n - ku (\"Kurdish\")\n - ky (\"Kyrgyz\")\n - lo (\"Lao\")\n - la (\"Latin\")\n - lv (\"Latvian\")\n - ln (\"Lingala\")\n - lt (\"Lithuanian\")\n - lua (\"Luba-Lulua\")\n - luo (\"Luo\")\n - lb (\"Luxembourgish\")\n - mk (\"Macedonian\")\n - mg (\"Malagasy\")\n - ms (\"Malay\")\n - ml (\"Malayalam\")\n - mt (\"Maltese\")\n - gv (\"Manx\")\n - mi (\"M\u0101ori\")\n - mr (\"Marathi\")\n - mn (\"Mongolian\")\n - mfe (\"Morisyen\")\n - ne (\"Nepali\")\n - new (\"Newari\")\n - nso (\"Northern Sotho\")\n - no (\"Norwegian\")\n - ny (\"Nyanja\")\n - oc (\"Occitan\")\n - or (\"Odia\")\n - om (\"Oromo\")\n - os (\"Ossetic\")\n - pam (\"Pampanga\")\n - ps (\"Pashto\")\n - fa (\"Persian\")\n - pl (\"Polish\")\n - pt (\"Portuguese\")\n - pt-PT (\"Portuguese (Portugal)\")\n - pa (\"Punjabi\")\n - qu (\"Quechua\")\n - ro (\"Romanian\")\n - rn (\"Rundi\")\n - ru (\"Russian\")\n - sm (\"Samoan\")\n - sg (\"Sango\")\n - sa (\"Sanskrit\")\n - gd (\"Scottish Gaelic\")\n - sr (\"Serbian\")\n - crs (\"Seselwa Creole French\")\n - sn (\"Shona\")\n - sd (\"Sindhi\")\n - si (\"Sinhala\")\n - sk (\"Slovak\")\n - sl (\"Slovenian\")\n - so (\"Somali\")\n - st (\"Southern Sotho\")\n - es (\"Spanish\")\n - su (\"Sundanese\")\n - sw (\"Swahili\")\n - ss (\"Swati\")\n - sv (\"Swedish\")\n - tg (\"Tajik\")\n - ta (\"Tamil\")\n - tt (\"Tatar\")\n - te (\"Telugu\")\n - th (\"Thai\")\n - bo (\"Tibetan\")\n - ti (\"Tigrinya\")\n - to (\"Tongan\")\n - ts (\"Tsonga\")\n - tn (\"Tswana\")\n - tum (\"Tumbuka\")\n - tr (\"Turkish\")\n - tk (\"Turkmen\")\n - uk (\"Ukrainian\")\n - ur (\"Urdu\")\n - ug (\"Uyghur\")\n - uz (\"Uzbek\")\n - ve (\"Venda\")\n - vi (\"Vietnamese\")\n - war (\"Waray\")\n - cy (\"Welsh\")\n - fy (\"Western Frisian\")\n - wo (\"Wolof\")\n - xh (\"Xhosa\")\n - yi (\"Yiddish\")\n - yo (\"Yoruba\")\n - zu (\"Zulu\")\n\nIf you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!"
    }
]
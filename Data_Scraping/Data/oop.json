[
    {
        "topic": "Definition and Principles of OOP",
        "url": "https://www.youtube.com/watch?v=AEo4KgwKYoU",
        "transcript": "Error fetching transcript for video AEo4KgwKYoU: \nCould not retrieve a transcript for the video https://www.youtube.com/watch?v=AEo4KgwKYoU! This is most likely caused by:\n\nNo transcripts were found for any of the requested language codes: ('en',)\n\nFor this video (AEo4KgwKYoU) transcripts are available in the following languages:\n\n(MANUALLY CREATED)\nNone\n\n(GENERATED)\n - hi (\"Hindi (auto-generated)\")[TRANSLATABLE]\n\n(TRANSLATION LANGUAGES)\n - ab (\"Abkhazian\")\n - aa (\"Afar\")\n - af (\"Afrikaans\")\n - ak (\"Akan\")\n - sq (\"Albanian\")\n - am (\"Amharic\")\n - ar (\"Arabic\")\n - hy (\"Armenian\")\n - as (\"Assamese\")\n - ay (\"Aymara\")\n - az (\"Azerbaijani\")\n - bn (\"Bangla\")\n - ba (\"Bashkir\")\n - eu (\"Basque\")\n - be (\"Belarusian\")\n - bho (\"Bhojpuri\")\n - bs (\"Bosnian\")\n - br (\"Breton\")\n - bg (\"Bulgarian\")\n - my (\"Burmese\")\n - ca (\"Catalan\")\n - ceb (\"Cebuano\")\n - zh-Hans (\"Chinese (Simplified)\")\n - zh-Hant (\"Chinese (Traditional)\")\n - co (\"Corsican\")\n - hr (\"Croatian\")\n - cs (\"Czech\")\n - da (\"Danish\")\n - dv (\"Divehi\")\n - nl (\"Dutch\")\n - dz (\"Dzongkha\")\n - en (\"English\")\n - eo (\"Esperanto\")\n - et (\"Estonian\")\n - ee (\"Ewe\")\n - fo (\"Faroese\")\n - fj (\"Fijian\")\n - fil (\"Filipino\")\n - fi (\"Finnish\")\n - fr (\"French\")\n - gaa (\"Ga\")\n - gl (\"Galician\")\n - lg (\"Ganda\")\n - ka (\"Georgian\")\n - de (\"German\")\n - el (\"Greek\")\n - gn (\"Guarani\")\n - gu (\"Gujarati\")\n - ht (\"Haitian Creole\")\n - ha (\"Hausa\")\n - haw (\"Hawaiian\")\n - iw (\"Hebrew\")\n - hi (\"Hindi\")\n - hmn (\"Hmong\")\n - hu (\"Hungarian\")\n - is (\"Icelandic\")\n - ig (\"Igbo\")\n - id (\"Indonesian\")\n - iu (\"Inuktitut\")\n - ga (\"Irish\")\n - it (\"Italian\")\n - ja (\"Japanese\")\n - jv (\"Javanese\")\n - kl (\"Kalaallisut\")\n - kn (\"Kannada\")\n - kk (\"Kazakh\")\n - kha (\"Khasi\")\n - km (\"Khmer\")\n - rw (\"Kinyarwanda\")\n - ko (\"Korean\")\n - kri (\"Krio\")\n - ku (\"Kurdish\")\n - ky (\"Kyrgyz\")\n - lo (\"Lao\")\n - la (\"Latin\")\n - lv (\"Latvian\")\n - ln (\"Lingala\")\n - lt (\"Lithuanian\")\n - lua (\"Luba-Lulua\")\n - luo (\"Luo\")\n - lb (\"Luxembourgish\")\n - mk (\"Macedonian\")\n - mg (\"Malagasy\")\n - ms (\"Malay\")\n - ml (\"Malayalam\")\n - mt (\"Maltese\")\n - gv (\"Manx\")\n - mi (\"M\u0101ori\")\n - mr (\"Marathi\")\n - mn (\"Mongolian\")\n - mfe (\"Morisyen\")\n - ne (\"Nepali\")\n - new (\"Newari\")\n - nso (\"Northern Sotho\")\n - no (\"Norwegian\")\n - ny (\"Nyanja\")\n - oc (\"Occitan\")\n - or (\"Odia\")\n - om (\"Oromo\")\n - os (\"Ossetic\")\n - pam (\"Pampanga\")\n - ps (\"Pashto\")\n - fa (\"Persian\")\n - pl (\"Polish\")\n - pt (\"Portuguese\")\n - pt-PT (\"Portuguese (Portugal)\")\n - pa (\"Punjabi\")\n - qu (\"Quechua\")\n - ro (\"Romanian\")\n - rn (\"Rundi\")\n - ru (\"Russian\")\n - sm (\"Samoan\")\n - sg (\"Sango\")\n - sa (\"Sanskrit\")\n - gd (\"Scottish Gaelic\")\n - sr (\"Serbian\")\n - crs (\"Seselwa Creole French\")\n - sn (\"Shona\")\n - sd (\"Sindhi\")\n - si (\"Sinhala\")\n - sk (\"Slovak\")\n - sl (\"Slovenian\")\n - so (\"Somali\")\n - st (\"Southern Sotho\")\n - es (\"Spanish\")\n - su (\"Sundanese\")\n - sw (\"Swahili\")\n - ss (\"Swati\")\n - sv (\"Swedish\")\n - tg (\"Tajik\")\n - ta (\"Tamil\")\n - tt (\"Tatar\")\n - te (\"Telugu\")\n - th (\"Thai\")\n - bo (\"Tibetan\")\n - ti (\"Tigrinya\")\n - to (\"Tongan\")\n - ts (\"Tsonga\")\n - tn (\"Tswana\")\n - tum (\"Tumbuka\")\n - tr (\"Turkish\")\n - tk (\"Turkmen\")\n - uk (\"Ukrainian\")\n - ur (\"Urdu\")\n - ug (\"Uyghur\")\n - uz (\"Uzbek\")\n - ve (\"Venda\")\n - vi (\"Vietnamese\")\n - war (\"Waray\")\n - cy (\"Welsh\")\n - fy (\"Western Frisian\")\n - wo (\"Wolof\")\n - xh (\"Xhosa\")\n - yi (\"Yiddish\")\n - yo (\"Yoruba\")\n - zu (\"Zulu\")\n\nIf you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!"
    },
    {
        "topic": "Benefits and Advantages of OOP",
        "url": "https://www.youtube.com/watch?v=Sxkd_Qk29gA",
        "transcript": "what are the advantages of oops First\nAdvantage is reuse of code through\ninheritance for example create one\nmethod in base class then reuse the\nmethod in multiple derived class without\neven rewriting the method second\nAdvantage is flexibility of code using\npolymorphism for example same name\nmethod can do different things via\noverloading or overriding third\nAdvantage is secure applications by\nusing en capsulation meaning your data\nwill only be accessible via the\nfunctions not without that because\nencapsulation is wrapping of data and\nfunction together next Advantage is oops\nbased applications are easy to scale and\nfrom small to larger applications this\nmeans if you follow oops then you can\nadd more and more functionalities in\nyour application in future which is good\nfor enterprise level applications"
    },
    {
        "topic": "Classes and Objects",
        "url": "https://www.youtube.com/watch?v=L677QCBCuWk",
        "transcript": "Error fetching transcript for video L677QCBCuWk: \nCould not retrieve a transcript for the video https://www.youtube.com/watch?v=L677QCBCuWk! This is most likely caused by:\n\nNo transcripts were found for any of the requested language codes: ('en',)\n\nFor this video (L677QCBCuWk) transcripts are available in the following languages:\n\n(MANUALLY CREATED)\nNone\n\n(GENERATED)\n - hi (\"Hindi (auto-generated)\")[TRANSLATABLE]\n\n(TRANSLATION LANGUAGES)\n - ab (\"Abkhazian\")\n - aa (\"Afar\")\n - af (\"Afrikaans\")\n - ak (\"Akan\")\n - sq (\"Albanian\")\n - am (\"Amharic\")\n - ar (\"Arabic\")\n - hy (\"Armenian\")\n - as (\"Assamese\")\n - ay (\"Aymara\")\n - az (\"Azerbaijani\")\n - bn (\"Bangla\")\n - ba (\"Bashkir\")\n - eu (\"Basque\")\n - be (\"Belarusian\")\n - bho (\"Bhojpuri\")\n - bs (\"Bosnian\")\n - br (\"Breton\")\n - bg (\"Bulgarian\")\n - my (\"Burmese\")\n - ca (\"Catalan\")\n - ceb (\"Cebuano\")\n - zh-Hans (\"Chinese (Simplified)\")\n - zh-Hant (\"Chinese (Traditional)\")\n - co (\"Corsican\")\n - hr (\"Croatian\")\n - cs (\"Czech\")\n - da (\"Danish\")\n - dv (\"Divehi\")\n - nl (\"Dutch\")\n - dz (\"Dzongkha\")\n - en (\"English\")\n - eo (\"Esperanto\")\n - et (\"Estonian\")\n - ee (\"Ewe\")\n - fo (\"Faroese\")\n - fj (\"Fijian\")\n - fil (\"Filipino\")\n - fi (\"Finnish\")\n - fr (\"French\")\n - gaa (\"Ga\")\n - gl (\"Galician\")\n - lg (\"Ganda\")\n - ka (\"Georgian\")\n - de (\"German\")\n - el (\"Greek\")\n - gn (\"Guarani\")\n - gu (\"Gujarati\")\n - ht (\"Haitian Creole\")\n - ha (\"Hausa\")\n - haw (\"Hawaiian\")\n - iw (\"Hebrew\")\n - hi (\"Hindi\")\n - hmn (\"Hmong\")\n - hu (\"Hungarian\")\n - is (\"Icelandic\")\n - ig (\"Igbo\")\n - id (\"Indonesian\")\n - iu (\"Inuktitut\")\n - ga (\"Irish\")\n - it (\"Italian\")\n - ja (\"Japanese\")\n - jv (\"Javanese\")\n - kl (\"Kalaallisut\")\n - kn (\"Kannada\")\n - kk (\"Kazakh\")\n - kha (\"Khasi\")\n - km (\"Khmer\")\n - rw (\"Kinyarwanda\")\n - ko (\"Korean\")\n - kri (\"Krio\")\n - ku (\"Kurdish\")\n - ky (\"Kyrgyz\")\n - lo (\"Lao\")\n - la (\"Latin\")\n - lv (\"Latvian\")\n - ln (\"Lingala\")\n - lt (\"Lithuanian\")\n - lua (\"Luba-Lulua\")\n - luo (\"Luo\")\n - lb (\"Luxembourgish\")\n - mk (\"Macedonian\")\n - mg (\"Malagasy\")\n - ms (\"Malay\")\n - ml (\"Malayalam\")\n - mt (\"Maltese\")\n - gv (\"Manx\")\n - mi (\"M\u0101ori\")\n - mr (\"Marathi\")\n - mn (\"Mongolian\")\n - mfe (\"Morisyen\")\n - ne (\"Nepali\")\n - new (\"Newari\")\n - nso (\"Northern Sotho\")\n - no (\"Norwegian\")\n - ny (\"Nyanja\")\n - oc (\"Occitan\")\n - or (\"Odia\")\n - om (\"Oromo\")\n - os (\"Ossetic\")\n - pam (\"Pampanga\")\n - ps (\"Pashto\")\n - fa (\"Persian\")\n - pl (\"Polish\")\n - pt (\"Portuguese\")\n - pt-PT (\"Portuguese (Portugal)\")\n - pa (\"Punjabi\")\n - qu (\"Quechua\")\n - ro (\"Romanian\")\n - rn (\"Rundi\")\n - ru (\"Russian\")\n - sm (\"Samoan\")\n - sg (\"Sango\")\n - sa (\"Sanskrit\")\n - gd (\"Scottish Gaelic\")\n - sr (\"Serbian\")\n - crs (\"Seselwa Creole French\")\n - sn (\"Shona\")\n - sd (\"Sindhi\")\n - si (\"Sinhala\")\n - sk (\"Slovak\")\n - sl (\"Slovenian\")\n - so (\"Somali\")\n - st (\"Southern Sotho\")\n - es (\"Spanish\")\n - su (\"Sundanese\")\n - sw (\"Swahili\")\n - ss (\"Swati\")\n - sv (\"Swedish\")\n - tg (\"Tajik\")\n - ta (\"Tamil\")\n - tt (\"Tatar\")\n - te (\"Telugu\")\n - th (\"Thai\")\n - bo (\"Tibetan\")\n - ti (\"Tigrinya\")\n - to (\"Tongan\")\n - ts (\"Tsonga\")\n - tn (\"Tswana\")\n - tum (\"Tumbuka\")\n - tr (\"Turkish\")\n - tk (\"Turkmen\")\n - uk (\"Ukrainian\")\n - ur (\"Urdu\")\n - ug (\"Uyghur\")\n - uz (\"Uzbek\")\n - ve (\"Venda\")\n - vi (\"Vietnamese\")\n - war (\"Waray\")\n - cy (\"Welsh\")\n - fy (\"Western Frisian\")\n - wo (\"Wolof\")\n - xh (\"Xhosa\")\n - yi (\"Yiddish\")\n - yo (\"Yoruba\")\n - zu (\"Zulu\")\n\nIf you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!"
    },
    {
        "topic": "Class Definition and Structure",
        "url": "https://www.youtube.com/watch?v=uO9P-J356vw",
        "transcript": "Error fetching transcript for video uO9P-J356vw: \nCould not retrieve a transcript for the video https://www.youtube.com/watch?v=uO9P-J356vw! This is most likely caused by:\n\nSubtitles are disabled for this video\n\nIf you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!"
    },
    {
        "topic": "Object Instantiation and Properties",
        "url": "https://www.youtube.com/watch?v=LfSaSANJPLg",
        "transcript": "okay in computer science we want to\nmodel things that exist in the real\nworld\nand we're going to use code here we're\ngoing to use java code to model those\nthings\nso we're going to have something called\na class which is like a blueprint for an\nobject so if this dog is my object it's\njust a little stuffed dog you can\nimagine that i've got a blueprint\nthat's the instructions for how to make\na dog okay that blueprint\nis called a class so with that class\nthat's my blueprint i can make\ndogs those dogs are my objects\ni can make a bunch of them and they all\nfollow the instructions of that\nclass which is my blueprint but then i\ncan have\nactually different ones so these are\ndifferent instances\nof the class uh dog or whatever this\nstuffed dog is that i'm making\nuh so these are objects of that class\nand then you can imagine each object can\nhave different\nattributes so these are different\nproperties about it we'll use the key\nterm\nattribute and then we'll also use\ninstance variables so you can see these\nones are different colors\nand so you can think about those\ndifferent colors or the different\nattributes or the different instance\nvariables so they still use\nthe same blueprint because it's like\nstill the same dog\nso they still use the same class but\nthere were details about them those were\nthe\ninstance variables or the attributes\nthose were the things that were\ndifferent between each\nobject of the class or each instance and\nwe'll use instance\nand object interchangeably so this is\none object\nand then the things about these objects\nthose are the attributes or their\ninstance variables"
    },
    {
        "topic": "Data Types and Variables",
        "url": "https://www.youtube.com/watch?v=X0zdAG7gfgs",
        "transcript": "So guys, so far in this Java\ncourse, we saw a lot of things\nYou guys saw the whole program of Java\nThat which thing is what in Java\nIn today's this video, I will tell you\nguys about Variable and Data Type\nVariable is like a container\nIn which Values are stored\nJust like I can put\nwater inside this bottle\nThis bottle is the Data Type\nWhich means its the kind of\nData Type which can contain water\nAnd the water is a Value\nSo in Java, Data Type can be Integer\nIt can be our Floating Point Number\nIt can be a character\nSo these are the kind of Data\nTypes in Java Programming Language\nNow here we will learn about Data\nTypes in Java, from starting to end\nIn a very fun way, in an\ninteractive way, with animations\nAlong with notes, I have already\ngiven you the cheatsheet before\nWe will learn along\nwith that, very properly\nIf you guys haven't liked this\nvideo, then you have to give it a like\nBecause I am putting a lot of\nhardwork in this Java course\nAfter giving this video a like, you\nmust write \"Amazing Java course\" below\nSo now we will see Data Type in\nJava, what are primitive data types\nHow many types of primitive data\ntypes are there, how are variables made\nWhat are the rules to make variables,\nwe are going to learn about these things\nIn our previous video, we saw\nthe anatomy of Java Program\nWe saw how we can write\ncodes in Java Program\nHere I want to tell you about\nthe components of Java Program\nFirst of all, we have a\ndocumentation section in Java\nAlong with that, our\ndocumentation section is suggested\nThese are some set of comments\nwhich you can write if you wish to\nLike the name of the author,\ndate, why have you written the code\nWhat does the code do\nAlong with that, we have another\nstatement in Java, that is Package\nHere you have to tell that your class\nof Java belongs to which Package\nYou can group your classes in Package\nAnd once again, this\nis also optional for us\nNow once you have written the\ndocumentation section and package statement\nThen we have some Input statements\nLike you can use scanner class by importing it,\nyou can take inputs from any user through keyboard\nSo those Input statements in Java\nprogram, once again, are optional\nIf you are using this type\nof code, then you will use them\nOtherwise you won't use them\nBut here, our Interface Statements,\nwe will talk about their use in future\nRight now we won't learn about Interface\nBut I just want to tell you guys this much,\nInterface statements are also something\nWe will talk about them definitely\nAt this point, only this much is important for you guys\nto know that Interface statements are also optional\nAlong with this, we also\nhave some Class Definition\nLike, let us say, you wrote Employee\nClass, you wrote Programmer Class\nYou wrote a custom scanner\nclass named My Scanner\nYou can add those type of\nclasses in your Java Program\nAnd once again, these\nclasses are also optional\nBut something happens\nhere which is not optional\nAnd that is our class for main method\nWhich includes the\ndefinition of our main method\nJust like we saw, we wrote\nPublic Static Point Main\nThat method is the entry point of Java\nFrom where the Java\nprogram starts to execute\nAnd this is not optional\nBut I would say here that it is essential\nWithout this, your Java program won't run\nYou have to make it, it is essential\nSo this is the anatomy of a Java program\nIn a Java program, you\nwill get to see all these things\nDocumentation package, Input statements,\nInterface statements, Class Definitions\nAfter that our essestial, Main method\nclass which will be your entry point\nFor Java Program\nA while ago we talked about Variables\nAnd there we discussed\nthat Variables are containers\nIn which we can put some values\nNow the type of this value\nis determined by Data Type\nLike, I can have an Integer Data\nType, I can have a Character Data Type\nAn Integer Data Type means,\nI can store inside that container\nAnd Character data type means, I can store\nany character like A, B, C, D, E, F, G, H,\nLike this, I can store any one character\nInside the character container\nNow the data type which we have\nhere in Java, they are of two types\nFirst of all comes our Primitive Data Type\nAfter that comes our,\nNon-Primitive Data Type\nOur primitive data types\nFurther there are many\ntypes of them like Byte\nInt\nFloat\nLong\nChar\nDouble\nBool\nAnd Short\nThese eight Primitive data\ntypes are supported by Java\nNow if you talk about\nByte, it stores numbers\nAnd the numbers\ngo from -127 to 128\nThen Float, once again,\nstores decimal numbers\nChar stores character\nThen Boolean could\nbe either True or False\nIn Integer, a normal integer is stored\nLong stores large integers\nDouble stores a large\nfloating point number\nAnd just like that, Short\nalso stores an integer\nSo about this, I have made very\nbeautiful notes for you guys\nYou guys should download\nthem, I will give it to you\nBut let's talk a little bit\nabout Non-Primitve data types\nNow the non-primitve data types are\nderived from the primitive data types\nAnd we will read about\nthem later in this course\nWe will have a proper\ndiscussion about them\nThere is nothing to worry, I\nwill tell you everything properly\nBut at this point, the things that I have told\nyou about data types, you should know them\nGuys at this point, I want to tell you guys one\nthing that, you don't have to mug up anything\nIf you think that \"I have to memorize\nthis thing, I have to memorize that thing\"\nThen let me tell you, you\ndon't have to memorize anything\nAs I keep telling you about things,\nas I keep giving you the notes\nYou just have to read\nthem after watching the video\nAlong with that, as I make you guys practice\nthroughout the course, you have to do it with me\nAnd everything else will\nhappen automatically on its own\nDon't take the tension of\nmemorizing anything, at all\nRemember that you don't\nhave to make a hard disk\nYou have to make yourself a good CPU\nWho can optimally implement\nthe logic of a good Java program\nSo guys these are the notes\nwhich I have made for you\nChapter 0 is the Intro to Java,\nwhich I have discussed with you guys\nEverything that I have discussed\nwith you, I've written it here in the notes\nLike we saw the basic structure of Java program\nin the previous video, we saw naming convention\nI have written it here\nMy thumb came in between while I was\ntaking the picture, so don't mind it, okay\nI receive a lot of comments\nasking \"What is this?\"\nSo this is my hand, I took\nthe picture while holding it\nSo I want to show you\nguys the notes of Chapter 1\nAnd they are going\nto help you guys a lot\nWe will talk about Variables and Data Types\nJust like we have some rules\nthat we follow to speak english\nLike when you speak\nenglish, you follow some rules\nLike where should \"has\"come, where\nshould \"had\" come, where should \"is\" come\n\"Are\" will be used for plural\nJust like that when you write program\nin Java, you have to follow some rules\nWhen you are in school,\nyou have to follow some rules\nJust like that when you are in Java\nalso, you have to follow some rules\nAnd that set of rules is called Syntax\nYou can understand it like vocabulary or grammer,\nlike in english there is vocabulary and grammer\n For Java there is syntax\nI would like to tell you guys, that in Java\nprogram there are some reserved key words\nLike, here we have\n\"static\", which is a keyword\nVoid is a keyword\nThese are reserved by Java, these names are some\nof the names which are already booked by Java\nLike for the public, these names are booked\nand you can't make an integer of this name\nThese are called keywords, okay\nNow I'll come back to the\nnotes and let me talk about Variables\nThat what is a Variable\nI told you a while ago, that a Variable\nis a container which stores values\nThese values are called\nvariables because you can change it\nIf we see the meaning of Variable in english,\nthen it means something that can be changed\nContants can not be changed\nAnd the Variables can be changed\nYou can make a variable as Int\nnumber is equals to Int, in this way\nInt means data type, like we\nsaw data types a little while ago\nHere I will tell you this again after a while,\nI have written those data types in notes as well\nBut data type means which type do you\nwant to make, you want to make a Byte\nYou want to make a Short,\nYou want to make a Bool\nWhat do you want to make, write that\nAfter that choose a name\nAnd you can't choose any name, it also\nhas some rules but here \"number\" will work\nYou can choose the name \"number\"\nYou can not use any keywords here, you can't choose\nthe name Void, you can't choose the name Static\nYou can't choose all these class\nnames, Java has reserved all these, okay\nSo you have to keep this thing in mind\nThen, is equal to, what is\nthe value you want to put in it\n\"Is equal to\" means assignment, you\nare assigning this value inside Number\nWhich is 8, the value 8 will\ncome inside the Number, okay\nSo in future if you print\nNumber, then it will print 8\nBecause Number is a container\nand value 8 has come into it, okay\nNow let's talk about rules, here I have talked about\nrules that what are the rules to make a Variable\nFirst of all you can choose any name\nbut you have to follow some rules like\nYour name should not start with a digit\nHow would you feel if I tell you that my\nneighbour's name is 177892 x 10 to be power 8\nThen you would say \"what's this\nname?\", just like this in Java also\nThere are some rules for name, like\nhere it does not start with a number\nDoes your name has a\nnumber? It does not, right?\nJust like that here in Java also\nyou can not start with a digit like\n\"1arry\" is very invalid, it\nwon't be accepted as a name\nI will show you, if you want\nIf I make here int arr, if I make\n1arr in this way and put a semi-colon (;)\nFirst of all here only, IntelliJ idea has made it\nred saying that \"What is this, what are you doing\"\nBut even if then if I run\nit, then it will show error\nAnd its telling me here that \"What\nhave you written, it is not even valid\"\nBut if I make it int arr, in this way\nThen it will run here and\n\"Hello World\" will print here\nSo here \"arr\" is allowed\nand \"1arr\" is not allowed\nSimilarly, name is case sensitive\nFor example, if I made two variable,\n\"harry\" and \"Harry\" with a capital H\nThen these two will be\ntreated as different variable\nI can store one\ninteger 7 in \"harry\"\nAnd in \"Harry\" which starts\nwith a capital H, I can store 21\nAnd that's totally fine,\nthere won't be any problem\nThird rule, it should not be a keyword\nI have told you about keyword before, there are\nsome name or words which are reserved by Java\nFor itself, and it can't\nbe used by anyone else\nSo here you guys can't use\n\"Void\", even if you make it here\nIf you make int void, let\nme show you by doing it\nSo here you will get a problem, \"What are you\ndoing, I told you not to do it\" Java will say\n\"You are making it even after that\"\nBut here you can make a capital\nVoid, I'm telling that it is case sensitive\nThe name of the Variable in Java\nBut its not a good practice that you are\nmaking something like this of the keyword\nThat's not a good practice, you\ncan do it, but why do you need to do it\nChoose a nice name for you like \"harry\"\nAnd run your program,\nit will run nicely\nSo here you can't use\nkeyword, it was the third rule\nFourth rule was, it is,\nwhite space is not allowed\nLike, here if I write in this way and\nmake an integer named \"code_with harry\"\nThen it will get confused, it will ask\n\"What is the meaning of this space?\"\nIts not allowed\nThat's why we use camel case\nnotation because we can not use space\nIn any identifier, here in the name\nof Variable, we can't use it, okay\nSo I can write in this way\nBut I can't put a space, so this is valid,\nbut it won't be valid if I put a space\nOkay\nNext rule, can contain alphabets, $, $ character, _\ncharacter and digits if the other conditions are met\nThe conditions which I have\ntold you here, from one to four\nIf the name of your variable follows these conditions then\nyou can keep alphabets, $, _ and digits as well in the name\nYou can keep digits as\nwell, Let me show you guys\nIf here I write codeWithHarry and put\n5 and 3 in this way, even then it will run\nIt will run properly,\nsee it is running here\nSo numbers can come in between\nbut it can't start from a number\nThe name of the variable\nSo no rules should be violated, you can\nchoose the name of the variable in this way\nI would say keep the name\nof the variable simple only, like\nAge, name, then blog, product,\nkeep these type of name like fund\nWe should choose a name that is related to the\nthing that your variable is talking about because\nIt will make our lives easier\nThis type of name\nWhen we will read the program,\nit will increase the readability\nWhen your program will have one thousand line\nof code and then you will read your program\nThen it will enhance the readability, you will\nget to know \"why I made this variable\", okay\nComing back to the notes,\nlet's talk about data types\nSo, like we saw a while ago, the data types\nin Java mainly fall into two categories\nFirst, Primitive Data Type,\nSecond, Non-Primitive Data Type\nPrimitive data types are intrinsic,\nthey are primitive in their own\nNon-primitive are derived, they\nare derived from other data type\nOkay, we will talk about them after a while\nBut we will dissect the Primitve data types\nBefore we know primitve data types, let me tell\nyou that Java langugage is statically typed\nWhat does it mean, statically typed\nmeans you have to declare the variable\nYou have to tell that \"this\nis integer and this is float\"\nIf you are coming from python programming\nthen if you write A is equal to 9, it will run\nYou can't do that here, okay\nThere are eight primitive\ndata types supported by Java\nI told you guys a while ago\nBut now I will tell you\nmore details about them\nFirst is Byte, what does\nit do, it stores an integer\nAnd takes one byte\nOne bytes means 8 bits\nAnd in one bit you can\nput either 0 or 1, okay\nAnd because it takes one byte, it\nstores values from -128 to 127, okay\nNow from where did this\n128 and 127 come from\nWhat you have to do is, first of all you have\nto multiple this my 8, so there is 1 byte\nListen carefully, see this thing is very\nimportant, here I need your full concentration\nThis 1 byte written here, multiple this by\n8, that will give the number of bits, okay\nThe number of bits, from minus\n(-) 2 to the power bits minus 1 to\nHere, let us say its 2 to the power 16, I have\ndivided it by 2 so it became 2 to the power 15\nSo here what do you have to do, if\nyou need this number, you have to\n2 to the power 8 divided by\n2, meaning 2 to the power 7\nFrom minus (-) 2 to the power\n7 to 2 to the power 7 minus 1\nYou can store the numbers, I\ndon't want to tell the proof of this\nI don't want to make this course boring\nBut I have told you the proof of\nthis in other places in this channel\nSo if you guys do C programming or all these\nthings someday, then you can see it but\nIts totally fine, if somone asks you\nhow large value can come in one byte\nAnd how small value can come\nFirst of all you have to put a minus (-)\n2 to the power, you\nhave to multiple this by 8\nThen you have to divide it by 2\nFrom there, then you have to put a minus (-) 1,\nminus (-) 1 comes because zero is also one value\nThat's why we have to\nreduce one value from here\nSo you can put it in this way,\nnote these minus (-) here and here\nSurely note the minus and you don't\nhave to remember these values but again\nIf someone asks you, if someone\ntell you that byte takes one byte, okay\nNow tell me, what will\nbe the range of the value\nThen you have to multiple this by 2 to the\npower 8 because there are 8 bits in one byte\nThen you have to divide\nthis by 2 and after that\nThis in plus, and this minus 1, okay\nYou will understand better here in Short,\nit takes 1 byte and its default value is 0\nFor a byte, let's talk about Short\nFrom where to where will the value\ngo, I will do 2 to the power, first of all\nThe number of bytes it is taking\nbecause Short takes 2 bytes\nI will multiple it by 8\n8 multiplied by 2 is 16\nThen I will write 2 to the power\n16 here and then I will divide it by 2\nBecause I am going before 0 as well as\nafter 0, that's why I will divide it by 2\nAnd I will put a minus here, then by writing\nthe same thing I will minus 1 from it\nBecause one place is taken by 0 as well\nSo I have to reduct one number\nSo if you learn to make this formula\nThen you can tell from where\nto where does the value ranges\nCalculator is allowed anyway\nSo you can find out its value in a calculator,\nthe dangerous value minus this to this\nFor the people who say you should mug it\nup, no brother, you don't have to mug it up\nYou don't have to become a hard disk\nYou have to become a good CPU\nThat you are able to calculate,\n2 bytes you know 8 twos are 16\nYou memorized this formula, you\ncan memorized this much atleast\nAnd this also has a logic, by\nlearning its logic, you can make it\nSo it will be applicable for others too,\nthis Short stores value from this to this\nNow here I will show you a very fun\npage of Java, for documentation and\nThat is my favourite page\nof documentation for Java\nI will show it to you in a while\nLet's see Int\nIt takes 4 bytes, default\nvalue is 0, the value range\nI have written 8 fours are 32\nhere, made the exact same formula\nSimilarly, the Float here,\nits value is a bit tricky to find\nSo you can see the docs if you want\nit, but no one will ever ask you that\nFrom where to where\ndoes the value ranges\nfor Float, because it\ndepend upon a lot of factors\nYou have your decimal\nand after that you are writing\nSo all these things are there\nSo that's why, no one will ever ask you\nthe value so you don't have to memorize it\nYou just have to remember,\nthe Float takes 4 bytes\nWhat is the default value, it is 0.0\nAnd we put a F to denote\nthat it is a floating point number\nSimilarly, the Long also stores\nan integer, a very large integer\nMeaning it stores an integer of 8 bytes\nAnd 8 multiplied by 8 is\n64, 2 to the power 64 by 2\nI made this formula only\nlike I made it here and here\nYou should how to make this formula\nSo here let me give you a task\nAnd the task is, in the comments below\nIf it takes N bytes, if any data type,\nif any integer data type take N bytes\nThen give me this formula\nwritten in the comments below\nIf this is N then\nSo that if I put 8 in place of N I\nget this, if I put 4 in place N I get this\nIf I put 2 in place of N I get this formula\nSo I want if I put 1 in\nplace of N I get this formula\nSo tell me the generalised formula\nof this in the comments below\nI have explained a lot\nabout this to you guys, okay\nLet's talk about Double\nValue ranges from, again its tricky\nbecause its a number with point\nIts a number with decimal\nIt takes 8 bytes, 0.0D, D for double\nNow the Char, let me talk about Char\nThe value of Char ranges from 0 to 65535,\nthere is no negative value in it that's why\nI haven't done 2 to the power by 2\nI did 0 to 2 to the power 16 minus\n1, and where did 16 came from\n8 multiplied by 2, because it take 2 bytes\nOne thing that I want to tell you here is\nyou don't have to mug up these things\nDon't have to mug up at all\nYou will get to know these things on its\nown, for Char you can remember 2 bytes\nYou can memorize 2 bytes atleast, if you are\ncoming from C langugage, character takes 1 byte\nBut here it takes 2 bytes\nbecause it supports unicode\nASCII character is a\nsubset of Unicode, okay\nASCII characters supports unicode\ncharacters in Java\nYou can write in Hindi and in Urdu and you\ncan write in different types of typography\nIn different types of\nlanguages, you can write\nIts default value is zero\nHere I want to take you to a page which I\nhave bookmarked as well, where did it go\n....Yes, see\nBut let's talk about Boolean\nbefore that and end the discussion\nAfter that we will go to that page\nHere is the page, I will come to this\npage later, but let's talk about boolean\n Value can be true or false\nIts size depends on JVM, I\nshould have written JVM here\nDepends on JVM, it depends on your machine\nAnd its default value if false\nYou guys can put JVM here\nI don't know why I haven't written it\nSize depends on JVM, default value false\nand the value can either be true or false\nThis page of Primitive data types\nof Java documentation is very fun\nYou guys can read it, but again, all\nthe main things are already there in notes\nSo there is nothing to worry for you guys\nBut here I want to show you guys\nsomething, the docs of Java says itself\nThat \"its range of values is beyond\nthe scope of this discusssion\", okay\nSo no one will ask you, the docs of Java\nare saying itself, you can see for yourself\nSo no one will be able to ask you this in\nexam that from where to where does it range\nSo these were the eight\nprimitive types of Java, okay\nSo here I would like to\ntell you something that\nYou should use the smallest\ntype to store the integer\nLike if I know that my integer is\ngoing to stay between -128 to 128\nThen I will use Byte\nOr else I will use Short\nOr if I know that my integer is going to be\nlarge then I will use Int or I will use Long\nSame goes for Floating point number,\nits the same story for the decimal numbers\nIf its small, use Float, if its\nlarge then use Double, okay\nSo here I have given you a quiz that\nwrite a Java program to add three numbers\nTo add three numbers, I have\nasked you the Java program, so\nHow will you write the Java\nprogram to add three numbers\nSimply what you will do is\nI will write here int num1 = 6;\nint num2 = 5; and int num3 = 7;\nAnd then you have to write\nSystem.out.println, what do you have to do\nYou have to print the sum,\nwhere sum is equal to what\nWhere sum is equal to num1+num2+num3, okay\nIn this way, as you will run this\nThen see, after Hello World it will show 18\nAnd I will change the Hello World\nto \"The sum of these numbers is\"\nAnd here it will show 18\nHave you noted one thing here\nAnd that thing is, what is println doing\nPrintln is adding a new line, whatever it is\nprinting, it is adding a new line after that\nIf in place of System.out.println,\nI use System.out.print\nThen what will it do, it will\nprint it in one line, see this\nIt is giving me the print in one line, can\nyou see this, its coming after that directly\nI will put a colon\nand space here\nNo that I don't face\nany problem, in this way\nI will write it so that the\nformatting becomes better\nSo see, sum of these numbers\nis, it is showing 18 here, okay\nSo this was our program,\nyou can minimize it in this way\nAnd I will show you this by zooming\nout a little, I made this program for you\nSo I hope you guys understood\nthis, I hope you like the notes\nIf you liked the video then make sure to give\na like on this video if you haven't done it\nAlong with that, you should access\nthis playlist of Java programming\nWhere did the playlist go for Java\nprogramming, Java programming\nLet's find out the playlist for Java programming, see if\nthe playlist is not bookmarked, it gets difficult to find\nBut you will find it here, the playlist for\nJava programming, bookmark it in this way\nAnd save it by clicking here\nI have bookmarked it and I\nwill bring it infront of my sight\nSo whenever I will click on Beginners on\nJava Tutorials, I will find this playlist\nDon't forget to download these notes\nI will keep adding content as I will keep\nteaching the chapters in the notes ahead\nI will also keep giving the notes, I\nwill also keep putting practice questions\nThings will be very interactive\nIf you guys want to support\nthen please share this playlist\nBy taking a picture, what do you have to do is, by taking a\nscreenshot on your phone you have to share it on Insta and other\nI have given the Insta handle in the description,\nyou guys can share, I will repost your stories\nSo guys I hope you liked this video\nMake sure you guys\ndownload your copy of notes\nAnd the cheatsheet which I\ngave you in the previous video\nYou might not understand few things in that because\nI have written a lot of things about the entire Java\nYou will be able to appreciate its\nuse after we go forward in this course\nRight now just download\nit and keep it with yourself\nAnd keep revising the notes which\nI am giving you from time to time\nIt will be very useful for you guys\nThat's all for this video guys\nThank you so much guys\nfor watching this video\nAnd I will see you next time"
    },
    {
        "topic": "Primitive Data Types",
        "url": "https://www.youtube.com/watch?v=oKuUSBqv4rg",
        "transcript": "Error fetching transcript for video oKuUSBqv4rg: \nCould not retrieve a transcript for the video https://www.youtube.com/watch?v=oKuUSBqv4rg! This is most likely caused by:\n\nSubtitles are disabled for this video\n\nIf you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!"
    },
    {
        "topic": "Object Data Types",
        "url": "https://www.youtube.com/watch?v=cnT1oW5_ePM",
        "transcript": "Error fetching transcript for video cnT1oW5_ePM: \nCould not retrieve a transcript for the video https://www.youtube.com/watch?v=cnT1oW5_ePM! This is most likely caused by:\n\nNo transcripts were found for any of the requested language codes: ('en',)\n\nFor this video (cnT1oW5_ePM) transcripts are available in the following languages:\n\n(MANUALLY CREATED)\nNone\n\n(GENERATED)\n - hi (\"Hindi (auto-generated)\")[TRANSLATABLE]\n\n(TRANSLATION LANGUAGES)\n - ab (\"Abkhazian\")\n - aa (\"Afar\")\n - af (\"Afrikaans\")\n - ak (\"Akan\")\n - sq (\"Albanian\")\n - am (\"Amharic\")\n - ar (\"Arabic\")\n - hy (\"Armenian\")\n - as (\"Assamese\")\n - ay (\"Aymara\")\n - az (\"Azerbaijani\")\n - bn (\"Bangla\")\n - ba (\"Bashkir\")\n - eu (\"Basque\")\n - be (\"Belarusian\")\n - bho (\"Bhojpuri\")\n - bs (\"Bosnian\")\n - br (\"Breton\")\n - bg (\"Bulgarian\")\n - my (\"Burmese\")\n - ca (\"Catalan\")\n - ceb (\"Cebuano\")\n - zh-Hans (\"Chinese (Simplified)\")\n - zh-Hant (\"Chinese (Traditional)\")\n - co (\"Corsican\")\n - hr (\"Croatian\")\n - cs (\"Czech\")\n - da (\"Danish\")\n - dv (\"Divehi\")\n - nl (\"Dutch\")\n - dz (\"Dzongkha\")\n - en (\"English\")\n - eo (\"Esperanto\")\n - et (\"Estonian\")\n - ee (\"Ewe\")\n - fo (\"Faroese\")\n - fj (\"Fijian\")\n - fil (\"Filipino\")\n - fi (\"Finnish\")\n - fr (\"French\")\n - gaa (\"Ga\")\n - gl (\"Galician\")\n - lg (\"Ganda\")\n - ka (\"Georgian\")\n - de (\"German\")\n - el (\"Greek\")\n - gn (\"Guarani\")\n - gu (\"Gujarati\")\n - ht (\"Haitian Creole\")\n - ha (\"Hausa\")\n - haw (\"Hawaiian\")\n - iw (\"Hebrew\")\n - hi (\"Hindi\")\n - hmn (\"Hmong\")\n - hu (\"Hungarian\")\n - is (\"Icelandic\")\n - ig (\"Igbo\")\n - id (\"Indonesian\")\n - iu (\"Inuktitut\")\n - ga (\"Irish\")\n - it (\"Italian\")\n - ja (\"Japanese\")\n - jv (\"Javanese\")\n - kl (\"Kalaallisut\")\n - kn (\"Kannada\")\n - kk (\"Kazakh\")\n - kha (\"Khasi\")\n - km (\"Khmer\")\n - rw (\"Kinyarwanda\")\n - ko (\"Korean\")\n - kri (\"Krio\")\n - ku (\"Kurdish\")\n - ky (\"Kyrgyz\")\n - lo (\"Lao\")\n - la (\"Latin\")\n - lv (\"Latvian\")\n - ln (\"Lingala\")\n - lt (\"Lithuanian\")\n - lua (\"Luba-Lulua\")\n - luo (\"Luo\")\n - lb (\"Luxembourgish\")\n - mk (\"Macedonian\")\n - mg (\"Malagasy\")\n - ms (\"Malay\")\n - ml (\"Malayalam\")\n - mt (\"Maltese\")\n - gv (\"Manx\")\n - mi (\"M\u0101ori\")\n - mr (\"Marathi\")\n - mn (\"Mongolian\")\n - mfe (\"Morisyen\")\n - ne (\"Nepali\")\n - new (\"Newari\")\n - nso (\"Northern Sotho\")\n - no (\"Norwegian\")\n - ny (\"Nyanja\")\n - oc (\"Occitan\")\n - or (\"Odia\")\n - om (\"Oromo\")\n - os (\"Ossetic\")\n - pam (\"Pampanga\")\n - ps (\"Pashto\")\n - fa (\"Persian\")\n - pl (\"Polish\")\n - pt (\"Portuguese\")\n - pt-PT (\"Portuguese (Portugal)\")\n - pa (\"Punjabi\")\n - qu (\"Quechua\")\n - ro (\"Romanian\")\n - rn (\"Rundi\")\n - ru (\"Russian\")\n - sm (\"Samoan\")\n - sg (\"Sango\")\n - sa (\"Sanskrit\")\n - gd (\"Scottish Gaelic\")\n - sr (\"Serbian\")\n - crs (\"Seselwa Creole French\")\n - sn (\"Shona\")\n - sd (\"Sindhi\")\n - si (\"Sinhala\")\n - sk (\"Slovak\")\n - sl (\"Slovenian\")\n - so (\"Somali\")\n - st (\"Southern Sotho\")\n - es (\"Spanish\")\n - su (\"Sundanese\")\n - sw (\"Swahili\")\n - ss (\"Swati\")\n - sv (\"Swedish\")\n - tg (\"Tajik\")\n - ta (\"Tamil\")\n - tt (\"Tatar\")\n - te (\"Telugu\")\n - th (\"Thai\")\n - bo (\"Tibetan\")\n - ti (\"Tigrinya\")\n - to (\"Tongan\")\n - ts (\"Tsonga\")\n - tn (\"Tswana\")\n - tum (\"Tumbuka\")\n - tr (\"Turkish\")\n - tk (\"Turkmen\")\n - uk (\"Ukrainian\")\n - ur (\"Urdu\")\n - ug (\"Uyghur\")\n - uz (\"Uzbek\")\n - ve (\"Venda\")\n - vi (\"Vietnamese\")\n - war (\"Waray\")\n - cy (\"Welsh\")\n - fy (\"Western Frisian\")\n - wo (\"Wolof\")\n - xh (\"Xhosa\")\n - yi (\"Yiddish\")\n - yo (\"Yoruba\")\n - zu (\"Zulu\")\n\nIf you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!"
    },
    {
        "topic": "Inheritance",
        "url": "https://www.youtube.com/watch?v=bkaWQ5HlE5U",
        "transcript": "this game like life requires forethought\nso that's not about where you are where\nyou will be in 10 moves or 10 years\nour attack how that even happened that\nwas in better shape than either of us\nyeah there's something I need to discuss\nwith you what is it your father left\nthis for you\n[Music]\nand you alone does any daughter really\nknow her father\nshow me your face Lauren Elizabeth\nMontero you're not like him I suspect\nyou're better than he ever was\nwho are you I'd like to think I'm a\nmember of the family\nare there any old enemies of dads that I\nshould be aware of they both know he was\nno saint someone was threatening our\nfamily dumped his body in the river\nyou said you could have the truth I know\nthings I'll take to the grave give me\nwhat I asked for and I will tell you\neverything\nyou think this is a game\nwhat else was my dad hiding a lawyer a\nbanker a politician who'd you talk to\nwe found the Holy Trinity the father had\nno right to do what he did\nall right the family\nwhen all is said and done you will know\nthe truth\nand you will send me free\nthe truth must stay buried\n[Music]\n[Music]"
    },
    {
        "topic": "Parent and Child Classes",
        "url": "https://www.youtube.com/watch?v=V3Klx9WEGFA",
        "transcript": "[Music]\nmy little a is already shooting for the\nmoon and one day she'll be running\ntoward everything the world has to offer\nbut she has to learn to walk before she\ncan run the little Jimm's parent child\nprogram has given Avera me a safe space\nto work together on her balance her\ncoordination and her\nindependence every day at The Little Gym\nis a step in the right Direction and\ntoday marks one very small step and one\ngiant leap for Avery\n[Music]"
    },
    {
        "topic": "Subclassing and Overriding",
        "url": "https://www.youtube.com/watch?v=E-0MMeNi5Cw",
        "transcript": "hey how's it going everybody it's you\nbro hope you're doing well and in this\nvideo i'm going to teach you guys about\nmethod overriding in java so\nsit back relax enjoy the show\nif you find this video helpful please\nremember to like\ncomment and subscribe your support will\nhelp keep this channel running\nall right guys i'm going to teach you\nall about method overriding\nthis is done by declaring a method in a\nsubclass\nwhich is already present in a parent\nclass and this is done so that a child\nclass\ncan have its own implementation of that\nmethod\nso here's an example i have two\nadditional classes\na class called animal and a class called\ndog that extends animal\nso the dog class is going to inherit\neverything that the animal class has\nso let's say our animal class has one\nmethod maybe a speak method\nvoid speak and all that this method will\ndo\nis just display a message to the console\nwindow such as\nthe animal speaks i don't know what kind\nof animal it is but\nit's speaking so let's create a dog\nobject and our dog class is going to\ninherit everything from the animal class\njust a speak method really so let's\ncreate a dog object\ndog dog equals new dog\nand we can have our dog object use the\nspeak method\nwhich will display the animal speaks\nnow what we could do is that we can give\nthis class\nits own implementation of our method\nspeak so it's going to have the same\nname speak\nand i'm just going to copy everything i\nhave here paste it\nand what we are doing now is called\nmethod overriding we're giving this dog\nclass its own\nimplementation of this method speak and\nwe can have this method\ndo something more specific for dogs such\nas displaying a message\nlike the dog goes\nbark and if we were to compile and run\nthis again\nour new message says the dog goes bark\nnow our speak method within the dog\nclass\nis considered the overriding method and\nthe one that it inherits from its parent\nclass\nis considered the overridden method so\nif we're overriding\na method the overriding method should\nhave\nthis annotation on the top override\nthis isn't necessary but it's considered\ngood practice to add\nthis note in just to let other users\nknow that this is an\noverriding method but it doesn't add any\nadditional functionality\nso if we were to create an animal object\nthis time\nanimal let's call this animal equals new\nanimal and we have our animal object use\nthe speak method\nit's going to use its own implementation\nof the speak method\nwhich just states the animal speaks and\nif we use dog\nthis will display the dog goes bark\nso each class is going to use the method\nthat is more closely associated with\nit with our dog class if we removed\nthe overriding speak method well it's\ngoing to next\nuse the closest speak method available\nto it\nwhich is the one it inherits from the\nanimal class so\nthis will now display the animal speaks\nand that's all really that method\noverriding is\nit allows a child class to have its own\nimplementation of a method\nthat it inherits from a parent class so\nthat with this method\nyou could do something that is more\nspecific to this class\nsuch as changing the message from the\nanimal speaks to\nthe dog goes bark so that's the basics\nof method overriding in java if you'd\nlike a copy of all this code i will post\nall of this in the comments down below\nbut yeah that's the basics of method\noverriding in java\nhey you yeah i'm talking to you if you\nlearn something new\nthen you can help me help you in three\neasy steps\nby smashing that like button drop a\ncomment down below\nand subscribe if you'd like to become a\nfellow bro\n[Music]\nyou"
    },
    {
        "topic": "Polymorphism",
        "url": "https://www.youtube.com/watch?v=jhDUxynEQRI",
        "transcript": "if you've been taking a java class or\nany object-oriented programming class\nyou've probably heard of this thing\ncalled polymorphism\nand you've probably been told that it's\nreally important that it's one of the\nfour core concepts of object-oriented\nprogramming but the word just sounds\nreally complicated right what exactly\ndoes that mean\na lot of classes and books over\ncomplicated so in this video we are\ngoing to make polymorphism super simple\nmy name is john and i put up a new java\ntutorial video\nevery single week so be sure to leave a\nlike and hit the subscribe button so you\ndon't miss each week's video i also have\na full java course available in the link\ndown in the description if you're\ninterested\nif not awesome i'm thrilled to have you\nhere and let's get started polymorphism\nwhat does that\nword mean well it really just means many\nshapes or many forms\npoly many morphism forms\nso you're probably thinking okay it\nmeans many forms cool but what exactly\ndoes that mean to me\nin java that just means that your\nclasses can do\nthe same thing in different ways i think\nit's easiest to talk about what exactly\npolymorphism means in java with an\nexample so i've got a very simple piece\nof code here where i have an\nanimal class and here i say animal my\nanimal equals new\nanimal and then i call this method on my\nanimal eat\nmyanimal.eat and we can go over to the\nanimal class and see what that eat\nmethod\ndoes and all it does is print out the\nword munch to the console so we can go\nback here and run our program\nand of course it just prints out the\nword munch but now let's say i've also\ngot this\ndog class and my dog class is a subclass\nof animal it's a child class so here\ni've got public class\ndog extends animal and as you probably\nknow when you create a subclass of\nanother class you automatically get all\nthe fields and methods of that parent\nclass\nso what does that mean here this eat\nmethod that's in the animal class\ni don't have it written in the dog class\nbut because dog\nextends animal i can go back to my main\nmethod and i can create\na dog my dog equals new\ndog and i can call my dog dot\neat you can see that that method is\navailable even though we don't\nexplicitly have an eat method\nin our dog class and we can go ahead and\nrun this program as well and we'll see\nour animal eat and\nour dog eat and they both print out\nmunch but now here's where polymorphism\ncomes in\neven though this dog class automatically\ngets that eat method and i don't have to\ndo anything\nby default it has the exact same\nbehavior in other words if i don't do\nanything my dog is going to\neat in exactly the same way as any other\nanimal it just prints out munch\nbecause i didn't specify anything else\nin my dog class but what i can do here\nin this dog class is\noverride that eat method from the parent\nanimal class\nand if you want to override a parent\nmethod you have to implement the exact\nsame method signature as that parent\nmethod so we can see the method\nsignature here is public void\neat it's a public method it doesn't have\na return type so it's void\nthe method name is eat and it doesn't\ntake in any parameters\nso over in our dog class we want to\nimplement the exact same method\nsignature to override it\nso we can just have public void\neat and open and close the curly braces\nwhat this allows us to do is implement\nthis eat method in a different way for\ndog than it does for other animals so\ninstead of munch we can say\nsystem.out.printline oh maybe\nchomp chomp we can save that and go back\nto our main method\nwhere we have a regular animal eating\nand a dog eating but now this\ndog will eat in a different way than the\ngeneric animal eats let's run our\nprogram and see what that looks like our\nanimal says munch but our dog says\nchomp chomp at its core that's what\npolymorphism is in the java world\nit's when you have a method in a child\nclass like our eat method in our dog\nclass\noverrides a method in its parent class\nour dog classes eat method\nis overriding the functionality of the\neat method in the animal class\nand because of that we're now doing the\nsame thing in a different form\nso that's polymorphism our dog class\neats in a different way than the animal\ndoes\nour animal class gives a certain default\nfunctionality for eating but our dog\nchild\nclass overrides that functionality and\ndoes the same thing in a different way\nand you can have other subclasses that\ndo the exact same thing so i've also got\nthis\ncat class that also extends animal it's\na child of the animal class also\nback in our main method we can create a\ncat\nmy cat equals new cat and even though in\nour cat class we don't yet\nimplement that eat method because we're\na child of animal\nwe have it available my cat dot eat\nand again we can run our program and now\nour basic animal says munch\nour dog says chomp chomp because we\noverrode the eat method from the animal\nclass\nbut when the cat eats it also just says\nmunch because it's not overwriting that\neat method yet but we can do that same\nthing in our cat class\npublic void eat and instead of munch or\nchomp chomp we can say\nsystem.out.printline nom nom nom\nsave that go back to our main method and\nrun our program again\nand now our animal says munch our dog\nsays chomp chomp and our cat says\nthis is just more polymorphism we're\ndoing the same thing in three different\nways\nmany forms we have our parent animal\nclass and we have our dog and cat\nclasses that are both child classes\nof animal and all of these classes\nimplement that eat method but they do it\nin a different way\nsame thing in many forms polymorphism\nnow there is one other form of\npolymorphism in java and that's called\nmethod\noverloading now it's really easy to\nconfuse method overloading\nwith method overriding method overriding\nis what we already talked about where\nyou have a child\nclass that implements the exact same\nmethod signature as a method\nin the parent class but you can also do\nwhat's called method overloading to put\nit very simply\nall that method overloading is is when\nyou have two methods in a class that\nhave exactly the same\nname but take different parameters for\nexample here we have\na public void eat method that takes no\nparameters now of course java won't let\nus just copy and paste that method and\nhave it twice because we can't have\nthe exact same method with the same\nparameters but what we can do is have\nexactly the same method\nname but with different parameters for\nexample this version of the eat method\ncould take in\nan int and we'll call it like number of\ntimes now you can see that java is no\nlonger complaining about a duplicate\nbecause even though these two methods\nhave the same name they have different\nparameters and that is allowed that is\ncalled\nmethod overloading of course if you do\nmethod overloading like this you would\nwant the different versions of your\nmethod to do something a little bit\ndifferent\nso because this takes in an int of\nnumber of times maybe this method can\nprint out chomp chomp the number of\ntimes\nthat is sent in this parameter we can do\nthat with a simple for loop where we\nhave\nfour and i equals zero i less than\nnumber\nof times i plus plus that's the number\nof times we can\nhave it print out chom chomp so let's\nsave that go back to our main method\nand instead of calling the eat method\nwithout any parameters let's call the\neat method that\ntakes an in parameter and we can send in\njust three and run our program again\nand now we see that chomp chomp printing\nout three times but if we want to that\nregular eat method that doesn't take any\nparameters is also still available to us\nso that's another form of polymorphism\nin java method overloading\nthat's where in one class you have\nmultiple methods with the exact same\nmethod name\nbut that take different parameters if\nyou enjoyed this video or learned\nsomething please be sure to leave a like\nand hit the subscribe button so you\ndon't miss the new video every week i\nreally do appreciate you taking the time\nto watch subscribe and share it's the\nonly way these videos get out to help\nmore people so thanks again and i'll see\nyou next time"
    },
    {
        "topic": "Method Overloading and Overriding",
        "url": "https://www.youtube.com/watch?v=DSZI90Db24I",
        "transcript": "Error fetching transcript for video DSZI90Db24I: \nCould not retrieve a transcript for the video https://www.youtube.com/watch?v=DSZI90Db24I! This is most likely caused by:\n\nNo transcripts were found for any of the requested language codes: ('en',)\n\nFor this video (DSZI90Db24I) transcripts are available in the following languages:\n\n(MANUALLY CREATED)\nNone\n\n(GENERATED)\n - hi (\"Hindi (auto-generated)\")[TRANSLATABLE]\n\n(TRANSLATION LANGUAGES)\n - ab (\"Abkhazian\")\n - aa (\"Afar\")\n - af (\"Afrikaans\")\n - ak (\"Akan\")\n - sq (\"Albanian\")\n - am (\"Amharic\")\n - ar (\"Arabic\")\n - hy (\"Armenian\")\n - as (\"Assamese\")\n - ay (\"Aymara\")\n - az (\"Azerbaijani\")\n - bn (\"Bangla\")\n - ba (\"Bashkir\")\n - eu (\"Basque\")\n - be (\"Belarusian\")\n - bho (\"Bhojpuri\")\n - bs (\"Bosnian\")\n - br (\"Breton\")\n - bg (\"Bulgarian\")\n - my (\"Burmese\")\n - ca (\"Catalan\")\n - ceb (\"Cebuano\")\n - zh-Hans (\"Chinese (Simplified)\")\n - zh-Hant (\"Chinese (Traditional)\")\n - co (\"Corsican\")\n - hr (\"Croatian\")\n - cs (\"Czech\")\n - da (\"Danish\")\n - dv (\"Divehi\")\n - nl (\"Dutch\")\n - dz (\"Dzongkha\")\n - en (\"English\")\n - eo (\"Esperanto\")\n - et (\"Estonian\")\n - ee (\"Ewe\")\n - fo (\"Faroese\")\n - fj (\"Fijian\")\n - fil (\"Filipino\")\n - fi (\"Finnish\")\n - fr (\"French\")\n - gaa (\"Ga\")\n - gl (\"Galician\")\n - lg (\"Ganda\")\n - ka (\"Georgian\")\n - de (\"German\")\n - el (\"Greek\")\n - gn (\"Guarani\")\n - gu (\"Gujarati\")\n - ht (\"Haitian Creole\")\n - ha (\"Hausa\")\n - haw (\"Hawaiian\")\n - iw (\"Hebrew\")\n - hi (\"Hindi\")\n - hmn (\"Hmong\")\n - hu (\"Hungarian\")\n - is (\"Icelandic\")\n - ig (\"Igbo\")\n - id (\"Indonesian\")\n - iu (\"Inuktitut\")\n - ga (\"Irish\")\n - it (\"Italian\")\n - ja (\"Japanese\")\n - jv (\"Javanese\")\n - kl (\"Kalaallisut\")\n - kn (\"Kannada\")\n - kk (\"Kazakh\")\n - kha (\"Khasi\")\n - km (\"Khmer\")\n - rw (\"Kinyarwanda\")\n - ko (\"Korean\")\n - kri (\"Krio\")\n - ku (\"Kurdish\")\n - ky (\"Kyrgyz\")\n - lo (\"Lao\")\n - la (\"Latin\")\n - lv (\"Latvian\")\n - ln (\"Lingala\")\n - lt (\"Lithuanian\")\n - lua (\"Luba-Lulua\")\n - luo (\"Luo\")\n - lb (\"Luxembourgish\")\n - mk (\"Macedonian\")\n - mg (\"Malagasy\")\n - ms (\"Malay\")\n - ml (\"Malayalam\")\n - mt (\"Maltese\")\n - gv (\"Manx\")\n - mi (\"M\u0101ori\")\n - mr (\"Marathi\")\n - mn (\"Mongolian\")\n - mfe (\"Morisyen\")\n - ne (\"Nepali\")\n - new (\"Newari\")\n - nso (\"Northern Sotho\")\n - no (\"Norwegian\")\n - ny (\"Nyanja\")\n - oc (\"Occitan\")\n - or (\"Odia\")\n - om (\"Oromo\")\n - os (\"Ossetic\")\n - pam (\"Pampanga\")\n - ps (\"Pashto\")\n - fa (\"Persian\")\n - pl (\"Polish\")\n - pt (\"Portuguese\")\n - pt-PT (\"Portuguese (Portugal)\")\n - pa (\"Punjabi\")\n - qu (\"Quechua\")\n - ro (\"Romanian\")\n - rn (\"Rundi\")\n - ru (\"Russian\")\n - sm (\"Samoan\")\n - sg (\"Sango\")\n - sa (\"Sanskrit\")\n - gd (\"Scottish Gaelic\")\n - sr (\"Serbian\")\n - crs (\"Seselwa Creole French\")\n - sn (\"Shona\")\n - sd (\"Sindhi\")\n - si (\"Sinhala\")\n - sk (\"Slovak\")\n - sl (\"Slovenian\")\n - so (\"Somali\")\n - st (\"Southern Sotho\")\n - es (\"Spanish\")\n - su (\"Sundanese\")\n - sw (\"Swahili\")\n - ss (\"Swati\")\n - sv (\"Swedish\")\n - tg (\"Tajik\")\n - ta (\"Tamil\")\n - tt (\"Tatar\")\n - te (\"Telugu\")\n - th (\"Thai\")\n - bo (\"Tibetan\")\n - ti (\"Tigrinya\")\n - to (\"Tongan\")\n - ts (\"Tsonga\")\n - tn (\"Tswana\")\n - tum (\"Tumbuka\")\n - tr (\"Turkish\")\n - tk (\"Turkmen\")\n - uk (\"Ukrainian\")\n - ur (\"Urdu\")\n - ug (\"Uyghur\")\n - uz (\"Uzbek\")\n - ve (\"Venda\")\n - vi (\"Vietnamese\")\n - war (\"Waray\")\n - cy (\"Welsh\")\n - fy (\"Western Frisian\")\n - wo (\"Wolof\")\n - xh (\"Xhosa\")\n - yi (\"Yiddish\")\n - yo (\"Yoruba\")\n - zu (\"Zulu\")\n\nIf you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!"
    },
    {
        "topic": "Virtual Methods and Dynamic Binding",
        "url": "https://www.youtube.com/watch?v=fB3JHNnlRfI",
        "transcript": "Guys, in today's video we are going to see virtual functions.\nI know you guys were waiting for this topic.\nAnd we have completed the background to understand this topic.\nPointer to derive class and polymorphism.\nWe also saw this pointer.\nNow we will see virtual functions.\nAnd virtual functions will seem very easy to you now.\nI will tell you this before.\nBecause the concept of virtual functions\ndepends a lot on\nunderstanding pointer to derived class\nand polymorphism\nso\nwhat I am going to do here\nI will come here\nand make a file\nwith the name of\ntude56.cpp\nwhat we did in the 55 file\nwe made a pointer\nwhich was pointing\nto the derived class\nfirst we made a pointer\nwhich is of base class\nthen we made it point\nto the derived class object\nthen we saw that\nwe are running any function of it\nwith the help of that pointer\nso the base class is running the derived class is not running\nyou must be thinking why is this happening\nbut here what we will do\nwe will see if we want\nlisten carefully\nif we want\nthat our function\nshould run in the derived class\nand not in the base class\neven\nif our pointer is in the base class and not of base class\neven if the pointer is of base class\nand pointing to the derived class\nthen we want the function to be of derived class\nlisten carefully\nif the pointer is pointing to the derived class\nand I run the function then it will run\nbut if the pointer is of base class type but it is pointing to the derived class object\nthen also the same display run will be there which is present in the base class\nand you can access this from that pointer which you have derived from the base class\nwhat happens in virtual function is that things change\nif you make this function virtual\nthen what will happen\nthis display will run\nif you make this function virtual\nthen it means that I want to do run time polymorphism\nmeans I want that my function\nif I am pointing this\nthen this function should be executed\nnot this one\nearlier only base class was executed\nso let's go quickly\nI will copy these two classes\nfirst I will put boilerplate code\nand then I will copy and paste these two classes\nI will copy this class and paste it here\nand after copying and pasting it\nwhat I will do here is first of all\nI will make a pointer of base class\nso I will write here base class star bptr\nok I have made a pointer of base class\nand I have made that before also, I have made base class\nwith the name of pointer, ok I will make base class with the name of pointer here also\nif you are getting more convenience from this\nso I will make it like this\nso that the variable names of 55 and 56\nwe will paste here\nso here I have made base class star\nbase class pointer\nnow I will say that this base class pointer\nshould be point from a derived class object\nso for that I have to make a derived class object\nso I will do the same\nwhat I did earlier\nI will make a base class object\nand a derived class object\nand listen carefully\nbecause if you get distracted\nI can guarantee you that you will not understand\nthis is such a thing\nthat if you get distracted\nyou will't understand it this is a thing that you will not understand even if you have a little bit of attention\nyou need more than 100%\nconcentration\ngive 100%\nconcentration in this\nand if possible give more than 100%\nso here base class\nmade obj base and made an object of derived class\nnow what i will do\nthat the base class pointer\ni will say that you point to my obj derived object\nnow i will do var based or var derived\nnow if i do with base class pointer\nso i will do pointer I will type bpointer pointer here and if I\nrun it\ndisplay and\nI will run its display function\nso it will run the\nfunction of displaying base\nbase class variable var base\nthis display will run\nso I will write 1 here and 2 here\njust for understanding sake\nand I will give a space I will write 1 and 2 here for understanding sake and I will give space\nI will save it and run this program\nand as you can see here\nwhen I run this program, it is running the function of base class\nI had run the pointer with derived class\nand I had pointed it\nso why is it running the base class\nwe saw in the last video that this is the default behavior\nnow to change this default behavior\nwe have virtual function\nnow i have to do a small thing to execute 2\nthat what i have to do here\ni have to do this\nby the way this 4200064 is garbage value\ni will do one thing here, let me change it to 1\nand 2, and now I will run the program\nand it will be 1, because it's value is 1\nso here it is, var base 1\nnow if I make it virtual, I am saying\nthat if my pointer, base class is saying\nthat if my type of pointer\npoints to the derived class object\nthen run its display\nok, don't run my display\nlike you used to do earlier\nrun its display\nso here it will be the same, see its display will be run\nlet me show you\nsee this, displaying base class variable\nvar base1 and displaying derived class variable\nvar derived2\nthat's it, that's all virtual function\nmany people use virtual function\nand say many things\nand show it like\nsome concept\nthat's it\nto overwrite default behavior\nbut if we talk about\nwhy it is used\nwhat is the use of it\nthen you will go deep\nand you can understand it\nbut again, understanding the concept is very important\nso what is the meaning of polymorphism\npolymorphism is a property\nby which\nobjects which belong to different classes\nrespond to a message\nlisten again\nobjects which belong to different classes\nrespond to a message\nhere run display function\nit is a kind of message\nit is displaying something\nnow what happens in C++\nif you have made a pointer of base class\nand you have made a point of derived class\nthen you can do it\nbut then you can use only the properties of base class\nbut if you have made it virtual then you can run the inherited method\nso this achieves runtime polymorphism\nhow? the binding of the function is done on runtime\nbinding on runtime does not mean that the decision is taken on runtime\nthat which one will work\nyou can already see the decision of this program and decide which one will work you can decide this program by looking at it\nyou can find out the output of every program by looking at it\nbut the point here is that\nthe actual compiler that binds the object to the address of the function\nit does that on run time\nand we saw in detail here\ncompile time polymorphism\nfunction overloading and operator overloading\nwhen we did overload function\nmeans we made two different functions\nso we saw here that\nyou can overload operator\nand you can overload function\nok, you can make different functions\nwith different arguments\nand they will behave differently\nand that is polymorphism is here in compile time\nhere what happens is that you have put virtual here\nand sometimes this run will be yours and sometimes this run will be yours\nyou have made this function virtual or not in base class\nthis thing will decide\nthat what is your actual function\nwith which your object will bind\nthat is, the object can be bind from this display or this display\nso this is the virtual function\nI hope you all understood\nand I want you to execute it more\nmake one more example like I made a very simple one\nyou can make a very typical example by using A,B,C,D\nand definitely do it once and I highly recommend you to do it once, okay?\nSo this was virtual function, now after this we will go to the next video and\nwe will see examples and along with that we will see the rules of virtual functions if we want to make it, what are those rules\nwhich when you do late binding implementation with the help of virtual function\nwhat you can do, what you can't do\nwe will talk about some rules in the next video\nand we will also see an example of virtual functions\nbut I hope you have understood the virtual keyword and virtual functions you must have understood this\nGuys, if you have not accessed this playlist yet\nby any chance, then you can access it\nby clicking and bookmarking or by clicking and saving it\nand along with that I would like that in any concept\nif you suddenly feel that now I am not able to do this\nI have forgotten, I have read it earlier\nthen it happens, it is normal.\nEither you can go from the website and read the notes,\nI am still making notes, but you may get the notes by the time you are watching this video.\nAnd I am adding a lot of notes daily, so you will definitely get to see it here.\nBut I just want to tell you that if you have not accessed all the resources, then do it.\nBecause a lot of things are like this, if you just know about them once, then you get a lot of benefit.\nSo here I just want to say that if you have not shared the playlist, then share it because there there will be many people who don't know this playlist. That C++ can be learned so easily in Hindi.\nAnd maybe they are struggling with their C++ journey.\nI want you to share it in a WhatsApp group.\nSo that's it for this video.\nDon't forget to like this video.\nThank you so much guys for watching this video.\nAnd I will see you next time. Don't forget to like the video. Bye!"
    },
    {
        "topic": "Encapsulation",
        "url": "https://www.youtube.com/watch?v=P-8N1xVF6h0",
        "transcript": "what is the encapsulation so\nencapsulation means we bind a code and a\ndata in a single specifier is called as\nan encapsulation for example you can\ntake a capsule and that we uh we mixes a\nseveral medicines medicines in a one one\ncapsule\nyeah so that is in gap switch"
    },
    {
        "topic": "Access Modifiers",
        "url": "https://www.youtube.com/watch?v=vgg9T4_0CNA",
        "transcript": "Error fetching transcript for video vgg9T4_0CNA: \nCould not retrieve a transcript for the video https://www.youtube.com/watch?v=vgg9T4_0CNA! This is most likely caused by:\n\nNo transcripts were found for any of the requested language codes: ('en',)\n\nFor this video (vgg9T4_0CNA) transcripts are available in the following languages:\n\n(MANUALLY CREATED)\nNone\n\n(GENERATED)\n - hi (\"Hindi (auto-generated)\")[TRANSLATABLE]\n\n(TRANSLATION LANGUAGES)\n - ab (\"Abkhazian\")\n - aa (\"Afar\")\n - af (\"Afrikaans\")\n - ak (\"Akan\")\n - sq (\"Albanian\")\n - am (\"Amharic\")\n - ar (\"Arabic\")\n - hy (\"Armenian\")\n - as (\"Assamese\")\n - ay (\"Aymara\")\n - az (\"Azerbaijani\")\n - bn (\"Bangla\")\n - ba (\"Bashkir\")\n - eu (\"Basque\")\n - be (\"Belarusian\")\n - bho (\"Bhojpuri\")\n - bs (\"Bosnian\")\n - br (\"Breton\")\n - bg (\"Bulgarian\")\n - my (\"Burmese\")\n - ca (\"Catalan\")\n - ceb (\"Cebuano\")\n - zh-Hans (\"Chinese (Simplified)\")\n - zh-Hant (\"Chinese (Traditional)\")\n - co (\"Corsican\")\n - hr (\"Croatian\")\n - cs (\"Czech\")\n - da (\"Danish\")\n - dv (\"Divehi\")\n - nl (\"Dutch\")\n - dz (\"Dzongkha\")\n - en (\"English\")\n - eo (\"Esperanto\")\n - et (\"Estonian\")\n - ee (\"Ewe\")\n - fo (\"Faroese\")\n - fj (\"Fijian\")\n - fil (\"Filipino\")\n - fi (\"Finnish\")\n - fr (\"French\")\n - gaa (\"Ga\")\n - gl (\"Galician\")\n - lg (\"Ganda\")\n - ka (\"Georgian\")\n - de (\"German\")\n - el (\"Greek\")\n - gn (\"Guarani\")\n - gu (\"Gujarati\")\n - ht (\"Haitian Creole\")\n - ha (\"Hausa\")\n - haw (\"Hawaiian\")\n - iw (\"Hebrew\")\n - hi (\"Hindi\")\n - hmn (\"Hmong\")\n - hu (\"Hungarian\")\n - is (\"Icelandic\")\n - ig (\"Igbo\")\n - id (\"Indonesian\")\n - iu (\"Inuktitut\")\n - ga (\"Irish\")\n - it (\"Italian\")\n - ja (\"Japanese\")\n - jv (\"Javanese\")\n - kl (\"Kalaallisut\")\n - kn (\"Kannada\")\n - kk (\"Kazakh\")\n - kha (\"Khasi\")\n - km (\"Khmer\")\n - rw (\"Kinyarwanda\")\n - ko (\"Korean\")\n - kri (\"Krio\")\n - ku (\"Kurdish\")\n - ky (\"Kyrgyz\")\n - lo (\"Lao\")\n - la (\"Latin\")\n - lv (\"Latvian\")\n - ln (\"Lingala\")\n - lt (\"Lithuanian\")\n - lua (\"Luba-Lulua\")\n - luo (\"Luo\")\n - lb (\"Luxembourgish\")\n - mk (\"Macedonian\")\n - mg (\"Malagasy\")\n - ms (\"Malay\")\n - ml (\"Malayalam\")\n - mt (\"Maltese\")\n - gv (\"Manx\")\n - mi (\"M\u0101ori\")\n - mr (\"Marathi\")\n - mn (\"Mongolian\")\n - mfe (\"Morisyen\")\n - ne (\"Nepali\")\n - new (\"Newari\")\n - nso (\"Northern Sotho\")\n - no (\"Norwegian\")\n - ny (\"Nyanja\")\n - oc (\"Occitan\")\n - or (\"Odia\")\n - om (\"Oromo\")\n - os (\"Ossetic\")\n - pam (\"Pampanga\")\n - ps (\"Pashto\")\n - fa (\"Persian\")\n - pl (\"Polish\")\n - pt (\"Portuguese\")\n - pt-PT (\"Portuguese (Portugal)\")\n - pa (\"Punjabi\")\n - qu (\"Quechua\")\n - ro (\"Romanian\")\n - rn (\"Rundi\")\n - ru (\"Russian\")\n - sm (\"Samoan\")\n - sg (\"Sango\")\n - sa (\"Sanskrit\")\n - gd (\"Scottish Gaelic\")\n - sr (\"Serbian\")\n - crs (\"Seselwa Creole French\")\n - sn (\"Shona\")\n - sd (\"Sindhi\")\n - si (\"Sinhala\")\n - sk (\"Slovak\")\n - sl (\"Slovenian\")\n - so (\"Somali\")\n - st (\"Southern Sotho\")\n - es (\"Spanish\")\n - su (\"Sundanese\")\n - sw (\"Swahili\")\n - ss (\"Swati\")\n - sv (\"Swedish\")\n - tg (\"Tajik\")\n - ta (\"Tamil\")\n - tt (\"Tatar\")\n - te (\"Telugu\")\n - th (\"Thai\")\n - bo (\"Tibetan\")\n - ti (\"Tigrinya\")\n - to (\"Tongan\")\n - ts (\"Tsonga\")\n - tn (\"Tswana\")\n - tum (\"Tumbuka\")\n - tr (\"Turkish\")\n - tk (\"Turkmen\")\n - uk (\"Ukrainian\")\n - ur (\"Urdu\")\n - ug (\"Uyghur\")\n - uz (\"Uzbek\")\n - ve (\"Venda\")\n - vi (\"Vietnamese\")\n - war (\"Waray\")\n - cy (\"Welsh\")\n - fy (\"Western Frisian\")\n - wo (\"Wolof\")\n - xh (\"Xhosa\")\n - yi (\"Yiddish\")\n - yo (\"Yoruba\")\n - zu (\"Zulu\")\n\nIf you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!"
    }
]
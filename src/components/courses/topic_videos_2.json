[
    {
        "topic": "Overview of mobile app development",
        "url": "https://www.youtube.com/watch?v=FXUt1p4LH2Q",
        "transcript": "foreign"
    },
    {
        "topic": "Types of mobile apps",
        "url": "https://www.youtube.com/watch?v=ZikVtdopsfY",
        "transcript": "[Music]\nalright guys in this video what I want\nto do is take a look at the different\ntypes of mobile applications that exist\nand do a little bit of comparison from\nthe standpoint of a company looking to\nbuild or hire someone to build a mobile\napplication and this is a huge choice it\ncould make or break a company's success\nin the mobile app world so we're going\nto compare web apps native and hybrid\napps and we'll talk about the\ndifferences we'll also look at the\nadvantages and disadvantages of each so\nlet's go ahead and get started this\nvideo is sponsored by Z car if you'd\nlike to complete more online tutorials\nand spend less time struggling with the\ndifficult parts head over to zeker and\nschedule a live one-on-one video call\nwith a web development expert of your\nchoice to get personal guidance and\nfeedback sign up at zeger comm or click\non the link in the description below so\nthere's basically three main types of\nmobile apps there is a grey area which\nI'll get into later but for the most\npart we have web apps native apps and\nhybrid apps so let's dig in and let's\ntake a look at what each of these\nactually are and take a look at some\nadvantages and disadvantages of each all\nright so first one we'll look at is web\napps\nok so web applications or mobile web\nsites are built using standard web\ntechnologies including HTML CSS and\nJavaScript\nthey run inside of a standard web\nbrowser like Chrome Firefox Safari\nthey're built and hosted just like any\nweb application or website on the\nInternet\nthe only real difference is that they're\nbuilt to look good and to function well\non mobile devices this usually means\nthat they're responsive and they're\ndesigned with a mobile-first approach\nmeaning they start with focusing on the\nmobile view but also make it work for\ndesktops as well all right so let's take\na look at some of the advantages of\nbuilding a web app so first they're\nbuilt using just regular web standards\nlike HTML CSS JavaScript you don't need\nto learn any difficult languages like\nJava or Swift or anything like that any\nweb developer can build a simple web app\nor mobile web site this also makes the\napp very easy to host and maintain\nsimply upload to a whole\nstaying account with a domain if you're\nbuilding like a lie guys have standards\nlike a static HTML site you can host it\nabsolutely anywhere all right another\nadvantage is that you can use any type\nof web technology and stack that you\nwant if you want to laravel app or\npython nodejs\nwhatever you want you don't have you\ndon't have limitations in that aspect\nokay web apps are also by far the\ncheapest option like by far if you're\nnot a web developer yourself hiring a\nweb developer is much much cheaper than\nhiring for instance a Swift programmer\nall right so price also goes into this\nthis next advantage which is that you\ncan build one application for all\nplatforms so iOS Android the for people\nthat use blackberry and Windows Phones\nyour app is going to run on any device\nwith that head as long as it can run a\nbrowser all right even an old-school\nflip phone this year your web app will\nrun on as long as it has some kind of\nbrowser it may not look right but it\nwill run it this is obviously much much\ncheaper than both native and hybrid apps\nnot only that but your app is accessible\nto two desktop PCs and laptops as well\nas long as they have an internet\nconnection all right so let's talk about\nsome of the disadvantages and there is\nquite a bit to building a web app so the\nbiggest is that it needs a browser to\nrun this means that the user has to\nactually go into Safari on their iOS\ndevice or Chrome or whatever browser\nthey use on their phone type in the URL\nof the app and this is a really really\npoor user experience web apps are also\nusually much slower than native apps\nthe reason being native apps are created\nfor that specific device they're\noptimized to run on that device as well\nas possible all right web apps are less\ninteractive and less intuitive buttons\ndon't have the same type of interacting\neffect as a native app does all right\nlike I said you need you need to run the\napp in the browser so you don't have an\nicon on your mobile desktop as you would\nif you downloaded it from the app store\nwhich also you know doesn't give a very\nwell\nuser experience web apps also cannot be\nsubmitted to app stores so you would\nneed to turn you need to turn your web\napp into some kind of hybrid app and\nI'll go over that later all right if you\nwanted to put it in a web store so most\nweb apps cannot interact with device\nutilities there's no API for instance\nfor the camera for a geolocation or any\nof those features for the most part all\nright so let's talk about native apps so\na native application is the most common\ntype of mobile app when you search the\nApp Store and you download an\napplication it's most likely native\nhowever hybrid apps are growing in\npopularity and these can be added to the\nApp Store as well but a native app is\nbuilt for a specific platform and an\nAndroid app is coded in Java and it uses\nthe SDK for that platform same thing\nwith iOS it's written in Swift or\nsometimes objective-c and it's written\nfor the iOS platform all right with that\nsaid native apps are very very fast and\nthat's because like I just said they're\nbuilt for that specific platform ok\nAndroid iOS Windows Phones\nthey all have their own they own their\nown language and SDKs native apps are\nalso very easily distributed into app\nstores whether it's the Apple Store\nGoogle Play or the Windows Store native\napps can be approved very easily native\napps are also much more interactive and\nintuitive things run much smoother as\nfar as user input and output they can\nalso easily interact with almost any\nfeature of the phone whether it's the\ncamera location storage the compass\nthere's an extensive API to work with\njust about any part of the hardware and\nnative applications can really get into\nthat and do some really awesome things\nall right so for the disadvantages there\nare actually some pretty hardcore cons\nabout building a native app so one\nthey're built for a single platform you\nbuild an Android app in Java and it's\nonly going to work on Android your Swift\napp however will only work on iPhone if\nyou want an app for both Android and\niPhone or even Windows or blackberry\nyou're going to you're going to go\nbankrupt because you\nyou have to treat all these as separate\nprojects that are really expensive all\nright now these are also much hotter\nlanguages to learn you know Swift Java\nmuch much harder than learning\nJavaScript and HTML and CSS or even some\nback-end web stacks Swift and Java are\njust much more intricate hiring\ndevelopers for these languages are very\nvery expensive relative to your standard\nweb developer in addition to being\nsingle platform harder to create way\nmore expensive they're also harder to\nmaintain all right so these are some\nserious disadvantages when it comes to\nbuilding native mobile apps if you're a\nstartup some of these things make it\nimpossible for native to be or your\nfirst choice all right so that brings us\nto the final choice which is a hybrid\nmobile app and a hybrid app is basically\na combination of a web app and a native\napp it does use HTML and CSS JavaScript\nbut it also runs inside of some kind of\ncontainer or webview usually through a\nframework so on the surface it can\nactually be perceived as a native app\nall right so there's actually quite a\nfew advantages to building a hybrid app\nso they're built on web technology such\nas HTML CSS JavaScript so this makes\nthem much easier to build of course\ncertain frameworks have you know you can\nuse angular with ionic and you can use\nreact native but under that you have\njust basically JavaScript ok they're\nalso much much cheaper than a native app\nif you're going to hire developers a web\ndeveloper is way more cheaper than a\nSwift developer another huge advantage\nis that you only need a single app for\nall platforms if you use a technology\nlike Cordova PhoneGap which is like a\nwrapper for hybrid apps they can\nactually you can build this you can use\nthat one code base that same application\nfor iOS and Android and I believe even\nWindows Phone and Blackberry so you\nessentially have one code base to\nmaintain as opposed to multiple apps all\nright of course since hybrid apps run in\na web view there's no browser needed\nlike with a web app ok they can be\npublished on all of the app stores\nthere's really not\nanyways for a customer to even figure\nout that it is a hybrid app and not a\nnative app all right they can be\ninstalled the exact same way hybrid apps\nalso have access to device internal\napi's and they can access features like\nthe camera geolocation storage things\nlike that a lot of this does depend on\nthe actual framework you use because\nthere are quite a few but most of them\ndo allow you to do stuff like that\nhybrid app development is also much much\nfaster than native app development\nbecause you do have that single code\nbase and you do have you know easier\nlanguages to work with so instead of you\nknow having a an Android app and iOS app\na Windows app and maintaining all three\nof those separately if one code base and\nthat that really really speeds things up\nall right so what about disadvantages of\nhybrid apps well they usually are slower\nthan native apps like I said native apps\nare specifically built for certain\nplatforms in a certain language hybrid\napps do have sort of a middleman to go\nthrough they may feel a little bit more\nclunky err but that's getting better as\nthese mobile frameworks are progressing\nall right now hybrid apps while much\ncheaper than native apps they are more\nexpensive than just you know standard\nweb apps because you have that wrapper\nframework to work with and maintain but\nthere's very very few situations where I\nwould choose a web app over a hybrid app\nand less desktops who are really big\nfocus okay unless it wasn't truly a\nmobile app now they can also be a bit\nless interactive with button presses and\nthings like that but as I said you know\nthese things are getting better all the\ntime\nhybrid frameworks are relatively new\ntechnologies and they're getting better\nevery day\nnow there is an exception or even a\nfourth type of mobile app and that is a\nbuilt with platforms that use web\ntechnologies but convert the app into\nnative components rather than just\noutputting into a webview okay that's\nwhat frameworks like react native and\nxamarin do I don't have much experience\nwith xamarin but from what I've heard\nand seen it does kind of the same thing\nunlike ionic and PhoneGap where these\nare essentially just web apps wrapped\ninside of a webview but in my opinion\nreact\nnative a react native app is very very\nclose to a real native app in terms of\nperformance so these these technologies\nare getting better every day so what's\nthe conclusion I would say that unless\nyou have an unlimited source of funds\nand highly highly skilled programmers in\nJava and Swift\nI do think hybrid or you know web-based\nnative is the way to go\nso here's some of the frameworks that\ncan be used to create mobile apps with\nonly knowledge of you know technologies\nlike HTML CSS JavaScript JSX now react\nnative and xamarin are almost a league\nof their own because they do in fact\ncreate native apps and any web developer\nthat knows the act can actually use\nreact native you also have other hybrid\nframeworks like ionic which is really\nnice mobile angular UI which I haven't\nlooked into very much Cordova and\nPhoneGap are basically wrappers that\nallow you to turn literally any web app\ninto a hybrid app and then you have\nother frameworks like Sanka touch in\nframework 7 which I don't have much\nexperience with but overall my final\nconclusion would be that native is going\nto be it's going to perform the best but\nthe practicality the pricing of the\nhybrid app overwrite overrules that big\ntime at least in my opinion ok you may\nthink different but that's just what I\nthink all right so if you guys want to\nlearn more about creating mobile apps\nfrom web technologies I do have a pretty\nbig course with a G wanax where we have\nfive projects in PhoneGap jQuery Mobile\nwhich is basically just a UI library\nreact native ionic and meteor okay so\nyou may want to check that out the link\nis there it's also in the description\nhopefully you guys liked this video and\nhopefully it's shed a little bit of\nlight on the differences between the\ndifferent types of mobile apps so that's\nit thanks for watching and I will see\nyou in the next video"
    },
    {
        "topic": "Mobile app development platforms",
        "url": "https://www.youtube.com/watch?v=yye7rSsiV6k",
        "transcript": "to become a mobile app developer there\nare five essential skills let's go over\nthem one by\none there are basically two ways to\nbuild mobile apps native or\ncrossplatform with Native development we\ncan build an app that runs only on a\nparticular platform like iOS or Android\nthis approach gives us full control over\nthe capabilities of the target platform\nresulting in great performance and the\nbest user experience however the\ndownside is that if you want to build\nthe same app for a different platform\nform we have to create a separate\nproject in an entirely different\nlanguage and ecosystem this means two\nseparate projects and two sets of bugs\nto fix that's where crossplatform or\nmultiplatform development comes to the\nrescue with crossplatform development we\ncan reduce development Time by reusing\nthe same code for different platforms\nand potentially reduce bugs fixing a bug\nonce means it's fixed across multiple\nplatforms now for Native development we\nhave a few options for iOS we can use\nObjective C which is an older language\nor Swift which is modern and preferred\nfor Android we can use Java which is a\ntraditional language or cotland which is\nmodern and preferred for crossplatform\ndevelopment the option depends on the\nframework or toolkit we use there are\nseveral crossplatform toolkits like\nreact native flutter cotland\nmultiplatform Maui and a few others\nlet's dive into each one first off we\nhave react native which was released by\nFacebook in 2015 this toolkit lets you\nbuild mobile apps using JavaScript and\nand react which is a popular library for\nbuilding web user interfaces some big\nnames using react native include\nMicrosoft Office scype and even Facebook\nitself then we have flut which is a\nGoogle product that came out in 2017\nflut uses a programming language called\nDart which takes the best parts of\nJavaScript Java and C some examples of\napps built with flutter are eBay Alibaba\nand Google pay it's really powerful and\ngaining a lot of traction now let's talk\nabout cotland multiplatform this is the\nnewest player released by jetbrains the\nsame company behind tools like intellig\npycharm and webstorm in my opinion the\nbest idees in the world it uses the\ncotlin programming language which is a\nmodern language inspired by Java apps\nlike McDonald's Netflix and cash app are\nbuilt with cotton multiplatform finally\nwe have Maui which stands for net\nmultiplatform appui introduced by\nMicrosoft Maui allows you to build\nnative mobile and desktop apps using C\nand . net these days most companies\nprefer to use multiplatform development\nto reduce their costs this means we can\nrule out native development for now and\nfocus on cross-platform options now\nwhich framework is the best well there\nis no such a thing as the best framework\nyes there are people out there like our\nSuperstar highly opinionated developer\nMr John Smith who swears by react native\nbut there are others with a different\nopinion the reality is that neither of\nthese Frameworks is perfect each has its\nown problems and quirks that you you\nwill discover once you start building\nreal applications Beyond YouTube\ntutorials and the reason for that is\nthat they try to support two entirely\ndifferent platforms at the same time so\nwhich crossplatform solution should you\nchoose well it depends on two things\nfirst on what languages and Technologies\nyou're familiar with for example if\nyou're a c developer Maui might be the\neasier route if you know web\nTechnologies like JavaScript and react\nyou might want to go for react native\nit's an easier transition from web to\nmobile development the other factor is\njob opportunities there are often more\njobs available for react native and\nflutter here you can see the number of\nopen positions for different types of\nmobile app developers in the US now this\nis the current situation here and maybe\ndifferent where you live maybe there are\nmore job opportunities for a flutter\ndeveloper so I recommend doing your own\nresearch rather than taking my or\nsomeone else's advice about which route\nto choose but realistically if you're\nlooking for a career in Mobile\ndevelopment you would have to choose\nbetween react native and flutter if you\nhave basic web development skills react\nnative is a better route otherwise I\nwould recommend flutter because Dart\nwhich is the programming language that\nflutter uses is a nicer language to work\nwith than JavaScript it's more modern\nand doesn't have the quirks and weird\nParts you find in JavaScript so decide\nbetween JavaScript or Dart and commit to\na study plan I believe if you dedicate 3\nto 5 hours every day you can learn the\nessence of either of these languages in\nabout 2 months to help you on this\njourney I've created a free\nsupplementary PDF that breaks down the\nspecific Concepts you need to learn for\neach skill it also includes several\nproject ideas to help you practice and\napply what you have learned it's a great\nresource to review your progress find\ngaps in your knowledge and prepare for\ninterviews you can find the link in the\ndescription Box by the way I have a\nbunch of tutorials on this channel and\ncomplete courses on my website if you're\nlooking for structur learning again\nlinks are in the description box the\nnext thing you need to learn is a\nVersion Control System them like git git\nis not a programming language it's a\ntool we use to track changes to our code\nand collaborate with others git and\nGitHub which is a platform that hosts\ngit repositories are essential for every\ndeveloper now git has a ton of features\nbut you don't need to know them all for\neveryday use think of it like the 8020\nrule 80% of the time you use 20% of\ngit's features 1 to two weeks of\npractice is enough to get up and running\nnow building mobile apps often involves\nworking with data structures and\nimplementing complex algorithms this is\nwhere a lot of self-taught programmers\nstruggle because they try to skip ahead\nand learn more and more languages and\ntools without learning the fundamentals\nof computer science data structures and\nalgorithms are critical subjects taught\nto computer science students and they're\noften covered in Tech interviews\nespecially at big companies like apple\nGoogle and Microsoft while you can skip\nthis step and go to the next as someone\nwho has had the privilege of teaching\nmillions of people I highly recommend\nyou not to overlook this step otherwise\nyou're going to feel the pain later in\nyour career so spend 1 to 2 months\nstudying classic data structures and\nalgorithms this will give you a strong\nfoundation in programming and problem\nsolving the next thing I would recommend\nlearning which again a lot of\nself-taught developers Miss is design\npatterns design patterns are proven\nsolutions to Common software design\nproblems there are 23 classic design\npatterns documented in the book design\npatterns by the gang of four many of\nthese patterns are used in Mobile\nFrameworks so learning them will give\nyou a deeper understanding of\nobject-oriented design principles and\nhow these mobile Frameworks work under\nthe hood now I have to tell you this\nbook is pretty old and written in C++\nhonestly it's a difficult read because\nmany of the examples in the book are dry\nand not quite relevant to Modern\nsoftware that's why I've created a very\nHands-On and pragmatic course on this\ntopic where I use Java and modern\nexamples found in applications we use\nevery day you can see how design\npatterns are used to solve problems in\nmodern applications whether you want to\ntake my course or use a different\nresource I believe if you dedicate a few\nhours every day you can have a pretty\nsolid understanding of design patterns\nin about 2 months all right the next\nthing you need to learn is a mobile\nframework which we talked about before\nfor Dart you should learn flutter and\nfor JavaScript you should learn react\nnative assuming you have a solid\nbackground in programming you can learn\neither of these Frameworks in about 2\nmonths so if you dedicated a few hours\nevery day and follow this road map\nyou'll have the necessary knowledge to\napply for an entry-level mobile\ndeveloper job in about 8 to 12 months if\nyou have any questions please let me\nknow in the comments below I'll do my\nbest to answer you right here or in my\nfuture videos If you enjoyed this video\nplease give it a like And subscribe for\nmore useful content"
    },
    {
        "topic": "Android development using Java",
        "url": "https://www.youtube.com/watch?v=mXjZQX3UzOs",
        "transcript": "Error fetching transcript for video mXjZQX3UzOs: \nCould not retrieve a transcript for the video https://www.youtube.com/watch?v=mXjZQX3UzOs! This is most likely caused by:\n\nNo transcripts were found for any of the requested language codes: ('en',)\n\nFor this video (mXjZQX3UzOs) transcripts are available in the following languages:\n\n(MANUALLY CREATED)\nNone\n\n(GENERATED)\n - hi (\"Hindi (auto-generated)\")[TRANSLATABLE]\n\n(TRANSLATION LANGUAGES)\n - ab (\"Abkhazian\")\n - aa (\"Afar\")\n - af (\"Afrikaans\")\n - ak (\"Akan\")\n - sq (\"Albanian\")\n - am (\"Amharic\")\n - ar (\"Arabic\")\n - hy (\"Armenian\")\n - as (\"Assamese\")\n - ay (\"Aymara\")\n - az (\"Azerbaijani\")\n - bn (\"Bangla\")\n - ba (\"Bashkir\")\n - eu (\"Basque\")\n - be (\"Belarusian\")\n - bho (\"Bhojpuri\")\n - bs (\"Bosnian\")\n - br (\"Breton\")\n - bg (\"Bulgarian\")\n - my (\"Burmese\")\n - ca (\"Catalan\")\n - ceb (\"Cebuano\")\n - zh-Hans (\"Chinese (Simplified)\")\n - zh-Hant (\"Chinese (Traditional)\")\n - co (\"Corsican\")\n - hr (\"Croatian\")\n - cs (\"Czech\")\n - da (\"Danish\")\n - dv (\"Divehi\")\n - nl (\"Dutch\")\n - dz (\"Dzongkha\")\n - en (\"English\")\n - eo (\"Esperanto\")\n - et (\"Estonian\")\n - ee (\"Ewe\")\n - fo (\"Faroese\")\n - fj (\"Fijian\")\n - fil (\"Filipino\")\n - fi (\"Finnish\")\n - fr (\"French\")\n - gaa (\"Ga\")\n - gl (\"Galician\")\n - lg (\"Ganda\")\n - ka (\"Georgian\")\n - de (\"German\")\n - el (\"Greek\")\n - gn (\"Guarani\")\n - gu (\"Gujarati\")\n - ht (\"Haitian Creole\")\n - ha (\"Hausa\")\n - haw (\"Hawaiian\")\n - iw (\"Hebrew\")\n - hi (\"Hindi\")\n - hmn (\"Hmong\")\n - hu (\"Hungarian\")\n - is (\"Icelandic\")\n - ig (\"Igbo\")\n - id (\"Indonesian\")\n - iu (\"Inuktitut\")\n - ga (\"Irish\")\n - it (\"Italian\")\n - ja (\"Japanese\")\n - jv (\"Javanese\")\n - kl (\"Kalaallisut\")\n - kn (\"Kannada\")\n - kk (\"Kazakh\")\n - kha (\"Khasi\")\n - km (\"Khmer\")\n - rw (\"Kinyarwanda\")\n - ko (\"Korean\")\n - kri (\"Krio\")\n - ku (\"Kurdish\")\n - ky (\"Kyrgyz\")\n - lo (\"Lao\")\n - la (\"Latin\")\n - lv (\"Latvian\")\n - ln (\"Lingala\")\n - lt (\"Lithuanian\")\n - lua (\"Luba-Lulua\")\n - luo (\"Luo\")\n - lb (\"Luxembourgish\")\n - mk (\"Macedonian\")\n - mg (\"Malagasy\")\n - ms (\"Malay\")\n - ml (\"Malayalam\")\n - mt (\"Maltese\")\n - gv (\"Manx\")\n - mi (\"M\u0101ori\")\n - mr (\"Marathi\")\n - mn (\"Mongolian\")\n - mfe (\"Morisyen\")\n - ne (\"Nepali\")\n - new (\"Newari\")\n - nso (\"Northern Sotho\")\n - no (\"Norwegian\")\n - ny (\"Nyanja\")\n - oc (\"Occitan\")\n - or (\"Odia\")\n - om (\"Oromo\")\n - os (\"Ossetic\")\n - pam (\"Pampanga\")\n - ps (\"Pashto\")\n - fa (\"Persian\")\n - pl (\"Polish\")\n - pt (\"Portuguese\")\n - pt-PT (\"Portuguese (Portugal)\")\n - pa (\"Punjabi\")\n - qu (\"Quechua\")\n - ro (\"Romanian\")\n - rn (\"Rundi\")\n - ru (\"Russian\")\n - sm (\"Samoan\")\n - sg (\"Sango\")\n - sa (\"Sanskrit\")\n - gd (\"Scottish Gaelic\")\n - sr (\"Serbian\")\n - crs (\"Seselwa Creole French\")\n - sn (\"Shona\")\n - sd (\"Sindhi\")\n - si (\"Sinhala\")\n - sk (\"Slovak\")\n - sl (\"Slovenian\")\n - so (\"Somali\")\n - st (\"Southern Sotho\")\n - es (\"Spanish\")\n - su (\"Sundanese\")\n - sw (\"Swahili\")\n - ss (\"Swati\")\n - sv (\"Swedish\")\n - tg (\"Tajik\")\n - ta (\"Tamil\")\n - tt (\"Tatar\")\n - te (\"Telugu\")\n - th (\"Thai\")\n - bo (\"Tibetan\")\n - ti (\"Tigrinya\")\n - to (\"Tongan\")\n - ts (\"Tsonga\")\n - tn (\"Tswana\")\n - tum (\"Tumbuka\")\n - tr (\"Turkish\")\n - tk (\"Turkmen\")\n - uk (\"Ukrainian\")\n - ur (\"Urdu\")\n - ug (\"Uyghur\")\n - uz (\"Uzbek\")\n - ve (\"Venda\")\n - vi (\"Vietnamese\")\n - war (\"Waray\")\n - cy (\"Welsh\")\n - fy (\"Western Frisian\")\n - wo (\"Wolof\")\n - xh (\"Xhosa\")\n - yi (\"Yiddish\")\n - yo (\"Yoruba\")\n - zu (\"Zulu\")\n\nIf you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!"
    },
    {
        "topic": "iOS development using Swift",
        "url": "https://www.youtube.com/watch?v=nAchMctX4YA",
        "transcript": "swift a multi-paradigm compiled language\ncreated by apple famous for building\napps that grow inside of apple's walled\ngarden it was first introduced in 2014\nat the worldwide developers conference\nand was designed as a modern successor\nto objective-c the original apple\nplatform language that had been in use\nsince the 1980s swift interops with\nobjective-c but provides a shorter more\nreadable syntax and features like memory\nsafety and type inference to improve\ndeveloper productivity today it's used\nto build mobile apps on ios desktop apps\non mac os wearable apps for watch os but\nis also open source which means it can\nbe used to build software outside of\napple platforms it compiles to native\nmachine code and is built on top of the\nllvm tool chain like many other modern\nlanguages however it also supports a\nreadable print loop allowing you to\nexperiment with code in a playground\nwithout needing to recompile making it a\ngreat language for beginners in addition\nit provides memory safety by preventing\nyou from writing unsafe code by default\nand uses automatic reference counting to\nmanage memory automatically to get\nstarted install it then create a file\nending in.swift your code will start\nexecuting in the global scope there's no\nneed for a main function create a\nvariable with the var keyword followed\nby its name and value var creates a\nmutable variable which means its value\ncan change in the future let on the\nother hand creates an immutable variable\nor constant it uses type inference to\nstrongly type the value as a string but\nwe can explicitly type it by adding a\nsemicolon after the variable name every\nvariable must be initialized with a\nvalue unless the type has a question\nmark which makes it an optional type\nallowing it to also contain a nil value\nit also supports optional chaining\nmaking it really easy to work with nil\nvalues functions are declared with the\nfun keyword and will use named\nparameters by default place an\nunderscore before the name to use\npositional arguments instead now use a\nbackslash with parentheses to\ninterpolate these values into a string\nfunctions in swift are first class\nobjects they can be passed as arguments\nused as return values and nested to\ncreate closures it also supports\nobject-oriented patterns like classes\nand inheritance to encapsulate the var\nand fung keywords that you just learned\nnow pull up the terminal and run the\nswift compiler to convert your code into\na high performance executable\ncongratulations your code is now ready\nto seek approval on the apple app store\nthis has been the swift programming\nlanguage in 100 seconds if you want to\nsee more short videos like this make\nsure to hit the like button and\nsubscribe thanks for watching and i will\nsee you in the next one"
    },
    {
        "topic": "Cross-platform development using Kotlin or React Native",
        "url": "https://www.youtube.com/watch?v=X8ipUgXH6jw",
        "transcript": "if you're building a cross-platform\nmobile app today there are two\nheavyweights competing for your\nmindshare in the red corner we have\nflutter from google and in the blue\ncorner we have react native from\nfacebook these tools can achieve the\nsame fundamental goal build apps for\nmultiple platforms like ios android and\nthe web from a single code base but\nthere's a world of difference in both\nhow they work and the developer\nexperience no matter which one you\nchoose the other one automatically\nbecomes your arch nemesis because you\ndon't choose anything but the absolute\nbest technology out there to figure out\nwhich one is best i built the exact same\nchat app with both react native and\nflutter using firebase as the back end\nin today's video we'll dive into a\ndetailed side-by-side comparison of\nfeatures tooling developer experience\nperformance and of course the code by\nthe end of the video you'll know exactly\nwhich one fits best into your ideology\nbut this isn't a line by line coding\ntutorial if you want to learn how to\nbuild these apps from scratch i created\ntwo separate pro lessons on fireship\nthat will teach you how to build them\nstep by step let's start by comparing\nthe programming languages between these\ntwo frameworks in react native we code\napps in javascript with react being a\nrequired ui library so it's almost like\nan extension of the javascript language\nand it also supports typescript if you\nwant to add a type system on top of\njavascript javascript was never really\ndesigned to build mobile apps so flutter\nwas implemented with a different\nlanguage called dart which is a language\noptimized for compiling to multiple\nplatforms with ahead of time and just in\ntime compilation that results in various\nperformance advantages but it's a\nlanguage that not many people know\noutside of flutter it has a syntax that\nsomewhat resembles typescript so curly\nbrace developers generally have an easy\ntime getting started with it but that's\na major question to ask yourself do i\nwant to learn a whole new language or do\ni want to stick with what i already know\nnow let's look at the ecosystem behind\nthese frameworks they're both two of the\nmost actively worked on github repos in\nthe world react native comes from\nfacebook which has been criticized as\nbeing an evil tech corporation while\nflutter comes from google which has been\ncriticized for being an evil tech\ncorporation building high quality\ncross-platform mobile apps is an\nextremely difficult technical challenge\nand that's why you need to bring in an\nevil tech corporation to get the job\ndone right but you'll notice a huge\ndifference in development philosophy\nreact native just like react for the web\nis designed to be minimal it provides\nsome base components but leaves\neverything else to the open source\ncommunity and that means a complete\nreact native project generally requires\na lot of third-party dependencies\ndepending on the features that you need\nflutter on the other hand comes with a\nhuge widget library out of the box and\nthe flutter team maintains many plugins\nthat you'll commonly need like ones to\naccess the native camera on a device\ndart also has a package manager called\npub and there's a huge ecosystem of open\nsource packages for flutter as well the\nbottom line is they both have huge\ncommunities to get pretty much anything\nyou can imagine done now let's look at\ntheir underlying architectures first off\nhow does react native work under the\nhood it runs two separate javascript\nthreads one is the main thread to run\nyour app on whatever native platform and\nthe other is a thread to run the\nbusiness logic of your application these\nthreads are isolated from each other but\nsometimes they need to interact so\nthere's a bridge in the middle where\nthey can pass serialized messages back\nand forth the cool thing about this\nsystem is that it allows a javascript\napp to communicate with the native\nplatform so when react native renders a\ncomponent it's a truly native component\non the corresponding platform it's not\njust like a react website bundled as a\nmobile app it's truly rendering native\ncomponents and that means your ui will\nlook exactly like those native\ncomponents are intended even when things\nchange in the future now how does\nflutter work instead of using native ui\ncomponents flutter has its own high\nperformance rendering engine built with\nc plus and skia that renders its own\ncustom pixels to the screen with\ncompiled native code that allows it to\nrender pixel perfect versions of ios and\nandroid widgets while also making it\npossible to paint your own custom pixels\nto the screen kind of like a gaming\nengine like unity this allows it to\npaint smooth graphics without the need\nfor a bridge although it does have a\nsystem called platform channels that\nallows you to communicate with the\nnative system when you need native\nfeatures or if you want to integrate\nnative code at the end of the day though\narchitecture doesn't matter a whole lot\nwhat matters is that you create a good\nuser experience and have fun doing it so\nnow let's compare the developer\nexperience starting with the initial\nsetup to get started with react native\nyou can generate a new app by running\nnpx react native init from the command\nline and you can optionally pass in a\ntemplate here with something like native\nbase to give you a nice looking ui out\nof the gate and you might also use expo\nhere instead of the default react native\ncli to give you a more complete starting\npoint when you open the app you'll\nnotice quite a few files here in the\nroot directory these are mostly config\nfiles like metro and watchmen for hot\nreloading buck is your build tool and\nbabel to transpile your javascript it\neven ships with flow by default so it\nfeels very facebooky the app source code\nis contained in the single app.js file\nif we go ahead and open that file you'll\nnotice a bunch of react code this might\nlook familiar if you're a web developer\nand the only real difference is that\nwe're importing special components from\nreact native and we use those in the jsx\ninstead of the typical html elements\nthat's our starting point for react\nnative now let's take a look at flutter\nafter installing the flutter sdk run\nflutter create from the command line\nyou'll notice that it's considerably\nfaster because it doesn't have to reach\nout to npm to download a bunch of\npackages go ahead and open the project\nin vs code and make sure that you have\nthe flutter extension installed it will\nactually manage any additional packages\nyou install automatically in the\nbackground the project structure here is\na little more simplified your main\nconfig file is this pubspec.yaml file\nwhich is equivalent to the package json\nand the react native project this is\nwhere you register and install\nthird-party packages the app source code\nis contained in the main.dart file now\nif you're a web developer who's never\ntouched typescript this code might look\nkind of crazy with keywords like extends\nsuper and override but if you have a\nbackground in typescript java or c-sharp\nthen you'll likely feel right at home\nwith this code now that we have a\nproject set up i want to talk about\ntooling which is really important when\nbuilding cross-platform mobile apps\nbecause without good tooling your life\nwill be miserable let's start by serving\nthe react native app locally here i have\nan android emulator running then i need\nto run this adb command to connect to it\nfrom there i run npm start to run metro\nto watch my code for changes in the\nbackground then in a separate terminal\nenter npm run android to build the\nandroid app this will install the app on\nthe emulator and listen to code changes\nin the background to automatically\nupdate the application we can also type\nan r into the watchman terminal to hot\nreload the app that's extremely useful\nbecause it preserves the state of the\napplication while still reflecting your\ncode changes if you're iterating on the\ndesign so that's essential but when it\ncomes to tooling with react native it's\nreally a create your own adventure story\nit's just a javascript project so you\ncan throw in typescript or you might\nwant to use the ignite cli to\nautomatically generate boilerplate for\nyou or use expo to quickly launch the\napp on your own device it's nice to have\na lot of options but that can also lead\nto decision fatigue and an over reliance\non third parties now if we switch over\nto the flutter app you'll notice a\nbutton down here in vs code that allows\nus to grab an emulator that's configured\non the local system we can then open the\nterminal and enter flutter run and we\ncan also hot reload because dart\nsupports just in time compilation by\nalso typing an r into the terminal now\nbecause dart has a sound type system\nit's able to provide really nice tooling\nas you write your code notice how when i\nhover over any class it provides the\nfull documentation for it but more\nimportantly dart makes it really hard to\nwrite code that results in runtime\nerrors if i try to pass an argument that\nhas the wrong data type it'll tell me\nthis code sucks right away instead of\nwaiting for it to pop up as an error at\nruntime and that's especially important\nfor mobile apps because you live and die\nby reviews in the app stores now you can\nalso add typescript to react native to\nget similar results but dart does other\nthings like null safety to make your\ncode even more reliable now the other\ninteresting thing in the code is that\nboth frameworks create a tree of\ncomponents or widgets in react native it\nlooks like html or jsx where you have a\ntag like view and then you add another\ncomponent inside of that and then maybe\nmore components inside of that\ncomponents might have state that changes\nthroughout the life cycle of the app and\nreact native will automatically\nre-render the ui whenever the state\nchanges flutter works in the exact same\nway and was actually very much inspired\nby react but it goes about it in a much\ndifferent way instead of functions you\nhave classes that have a build method\nwhich returns a tree of widgets each\nwidget is just a class instance and\nmight have a variety of different\nproperties that take other widgets as\narguments so it does the same basic\nthing as react but it's just a different\napproach to building declarative uis\nwhen coding by hand it makes refactoring\nmore difficult in my opinion you can't\njust copy and paste a component like you\nwould in react however flutter once\nagain has really good tooling that makes\nit possible to wrap and reposition\nwidgets by simply clicking a button in\nvs code now after building a chat app\nwith both frameworks one drawback i\nfound with flutter is that i would often\nend up with these deeply nested widget\ntrees that are hard to follow you can\nalways extract this logic into your own\ncustom widgets but i just don't find the\nprocess as intuitive as react where you\nsimply create a new function for each ui\ncomponent now the problem with react is\nthere often isn't a component to do\nexactly what you want to do that means\nyou need to start with a base component\nand then make it do what you want to do\nor install a third-party package on top\nof that a lot of react libraries aren't\ncompatible with react native like if you\nwant awesome animations with frame\nremotion that's not going to fly and\nreact native now the final thing i want\nto look at is performance you might be\nwondering is flutter faster than react\nnative and the answer is most likely yes\nthe goal is generally to render at 60\nframes per second and because flutter\napps are compiled directly to machine\ncode and don't require a javascript\nbridge they tend to perform better based\non most benchmarks i could find on the\ninternet there's a good article that\ni'll link to in the description that\nbreaks down a variety of different\nbenchmarks and as you can see flutter\ngets much closer to native performance\nhowever you have to ask yourself does\nperformance really matter for the\nmajority of apps out there performance\ndifferences will be indistinguishable to\nthe end user but i suppose in react\nnative you might run into performance\nbottlenecks sooner and if you really\ncare about performance your best option\nis to just go truenative i'm gonna go\nahead and wrap things up there but if\nyou want to build these chat apps from\nscratch check out fireship pro for a\ncouple of extra bonus videos there and\nhere's a special discount code for those\nof you who watched the entire video\nthanks for watching and i will see you\nin the next one"
    },
    {
        "topic": "Principles of mobile app design",
        "url": "https://www.youtube.com/watch?v=MoVO8eVe3gI",
        "transcript": "today we will explore how do we make\nthis UI to go from good to great in\nunder one hour before we begin let's\nshow in the disclaimer\nwith that out of the way let's begin\nlooking at this design it looks very\nclean sleek and modern Wanda did a very\ngreat job at this but what we are here\ntoday is to explore how do we take this\nto the next level and learn from it\ntogether a redesign is not about\nchanging your UI completely to the point\nwhere users don't remember your brand\nanymore to me a redesign is keeping what\nworks retaining the brand identity this\nis an e-commerce platform we are\ndesigning the checkout experience where\nthe users are choosing the payment\nmethod before we design anything at all\nlet's start outlining what should the\nuser do on the payment method screen\nstep one is to choose your payment\nmethod\nyour shipping address to your order\nso you won't pay until you finish\nreviewing order now let's look at this\nscreen and critique how we can improve\nit further now first of all I think that\nthis payment method text doesn't provide\nenough context to the user it doesn't\ntell the user what actions should they\nmake and I think there should be at\nleast a back button here this progress\nindicator is really good especially in\ncheckout because it outlines where the\nuser is at this point in time but we\ncould do better to indicate that this is\nthe current step we can also introduce\nsome text in these places I like what\nWanda has done with the UI it's very\nmodern it's very clean notice that she\nused a blue shadow at the bottom here so\nthis is a really great tip use the\nshadow color that is complementing the\nobject that is being elevated in this\ncase this is a blue card and hence Fonda\nadded some blue Shadows at the bottom so\nthese texts are not very readable\nespecially when you're having a white\ntext on a blue background we will need\nto increase the contrast between the\ntext and the background so it would be\neasier to read the hierarchy is really\ngreat and we will also keep this layout\nand this little line is super beautiful\nfor me I generally prefer my buttons to\nhave a minimum of 44 pixels height these\nthree icons feel a little bit\ninconsistent so we will try and see how\nwe can improve this UI the radio button\nis a little bit too small and the\ndeselected state is not obvious let's\nmove on to the add card page there's one\nthing missing here which is safe card\nfor future purchases the expiration date\ncould be cut off here and the CVV as\nwell so CVV is not month and year it\nshould be three digits so this button\ninstead of calling it add call it add\ncard it's good to also be specific on\nwhat type of card that you want to add\nso perhaps we can use a lighter color so\nthat the user knows that hey this text\nfield hasn't been filled up yet and I\nthink this one could be a cross as well\nI'm really nervous because it's been a\nwhile since I've done something like\nthat but I am not perfect and I'm\nlearning as well so let's see what good\ncomes out of this episode all right I\nhave my coffee here and I'm ready to\nredesign this even though I've been\ndesigning for years I still go back to\nreference Real World products to study\ntheir design patterns and improve upon\nmy own design skills first I'm going to\ngive this a light pale blue background I\nfind that having a light pale background\nis easier on the eyes and it gives\nbetter contrast\nand then I'm going to add the Bottom bar\nand the status bar I'll start by\noutlining the elements on the screen\nI'll reuse the brand color redesign the\nstepper add subtitles to each step and\nsince the text is too long we'll shorten\nit this way to indicate clearly to the\nuser which Step they're on we're going\nto make the second and third step on the\nlower opacity and making the payment tax\nsemi-bold now we have a problem 20\nminutes have passed and I haven't\nstarted redesigning this thing we really\ngot to speed up a little bit so after\nadding an icon to the payment step I can\nmove forward and start designing the\ncard section I'll create a component for\nthis card I looked up the aspect ratio\nof the standard credit card and I\ndecided to follow that so I played\naround with the gradient background at\nthe back I felt that removing that\nrounded border and making it appear Fade\nOut would look more attractive and takes\naway the tension so that the users can\nfocus on the cards\nusers can add a new card at the end of\nthe carousel so that it flows better as\ncompared to a button at the bottom of\nthe screen\nstarted adding The Ore divider I used a\npale blue to align with the brand color\neven on the text now we tweak the\nspacing and start creating the other\nlist items in the bottom again create\nthe first item as the component so that\nwhen I change one thing Everything\nChanges I went back to the blue\nbackground and started exploring how can\nI make this better looking I added\nradial gradients to achieve this look\nI added a radio button here and made the\nsize larger than before\nadding the text label to each item you\ncan also add secondary text below the\npayment method so that in future users\ncan get more context I'm experimenting\nwith different methods of showing the\npayment logo and see which one works\nbetter if I were to show the logo like\nthis it would be very messy and hard to\nscan and I tweaked each logo's sizes so\nthat they look visually consistent I\naligned all of those logos to the right\nas well I tweaked the spacing and\nstarted designing the selected radio\nbutton States during checkout it's\nimportant to assure your customers that\nyou won't be charged yet so that they\nwill happily continue to The Next Step\nI've added a tiny text and experimented\nwith different layouts to see which one\nworks better\nthen I moved on to the card designs the\ncard designs took a little bit longer\nI've also went on dribble to get\ninspiration honestly card design is\ntough I took a break and experimented\nwith different card designs\ncards with different banks have\ndifferent color schemes on the add card\npage I included the toggles to enable\nthis as a default card or save for next\ntime I've added the scan my card button\nusers don't have to manually input the\ncard details every time I've also added\na helper icon for the CVV field in case\nthe users don't know where to find their\nsecurity code number the checkout\nexperience should be fast intuitive for\nthe user to pay quickly and get out of\nthe way and this is the result\nif you enjoyed this redesign series let\nme know in the comments below if you\nwant me to continue making this sort of\nstuff although this redesign isn't\nperfect I still hope that this has been\nuseful to you with enough practice and\ndedication I believe that you can do\nbetter than what I've already done here\nif you are learning UI ux design and you\ndon't know where to start watch this\nvideo I'll see you there and goodbye\nforeign\n[Music]"
    },
    {
        "topic": "Creating user interfaces using Figma or Adobe XD",
        "url": "https://www.youtube.com/watch?v=wIuVvCuiJhU",
        "transcript": "so you know figma but you want to know\nhow to design a website app game or any\nother product UI design tools are easy\nto learn and hard to master what helps\nyou master them is knowing what exactly\nyou need to do so let's learn UI and ux\ndesign no just what you need to\nget started fundamentals standard\nprocedures and helpful resources a\ndesign starts with a main idea solution\nto a problem or a use case for example I\nreally needed a web application to\ncollect element specific designs like\nthese so designers and Vel opers like\nyou and me can find inspiration got a\ngood idea let's go step by step step one\nuser flow the people you hope to use\nyour product probably have certain\nexpectations they're looking for some\ninfo when to buy something or just use\nthe service you need to map out that\nmain Journey from the moment they land\non your side till that key objective is\nachieved in this project for example\nwhen users land on the site they should\nimmediately find the category and the\nwebsites in it we call this a userflow\ndiagram step two wireframing from the\nuser flow diagram we'll try to create C\nresponding screens or pages each page or\nscreen is supposed to contribute to\nreaching that key objective in a way if\nusers are supposed to shop for something\nthen there's a store Page product page\ncard payment page and success page you\ncan start drawing layouts for different\nscreens in the form of wireframes which\nrequires real hard thinking and Analysis\nof user Behavior back in 1800s we used\npen and paper to draw wireframes but\nthanks to technology nowadays we're\nlucky enough to do them on tools like\nbalsamic Envision freehand or just fake\nmot fake Jam like a normal person for\nexample in this project we want a simple\nand a straight to the point design so\njust one single screen we need some\nnavigation in the header and footer our\nmain goal is showing users designs in\ndifferent categories how could we\nImplement that maybe a little drop- down\nmenu a filter H it has to be simpler and\nmore accessible like right in front of\neveryone's eyes how about just a simple\nsidebar with the categories like font\nawesome for example that's a good\ninspiration we also want to showcase\ndifferent designs a lot of them on this\nremain side we have several sources of\ninspiration for this that have proven to\nwork like dribble so we need our designs\nin a little grid over here and this grid\nshould have a link to the source of the\ndesign its name and just a simple image\npreview what we just did was a brief\nversion of user experience or ux design\nit can be extended and have you go\nthrough other steps as well depending on\nhow complicated your project is step\nthree design system this marks the\nbeginning of our user interface or UI\ndesign Journey where we deal with\nvisuals every design project is led by\nguideline that specifies reusable\ncomponents as you can imagine this makes\neverything consistent like colors fonts\nbuttons forms boxes cards icons and so\non it can be very big or very small like\nthe one we have here starting with\ncolors they should reflect your projects\nindustry value or brand identity meaning\nlogo product or brand colors for this\nproject I just know I want it to be in\ndark mode with mostly neutral colors\nlike black white and gray and maybe one\nprimary Vivid color I'm not really sure\nwhat I want yet so I'm using real-time\ncolors to simulate my color choices on a\nreal side making sure they're accessible\nand look good but generally speaking you\nwant your colors to be as comprehensive\nas possible for example background color\ntext color primary secondary accent and\nsemantic colors each of them can have\ndifferent variations too like Shades\ngradients and transparent versions next\nup we have fonts which directly impact\nthe readability of your content plus the\nfonts can give off a certain Vibe look\nat these fonts funky elegant serious\nchildish and oh God what is this again\nI'm using realtime colors to test out\nsome fonts from Google fonts quickly\nwhich lead me to two fonts space\ngrotesque and Ubuntu then I'm using\ntypes scale to find a good ratio and\nreadable sizes for these fonts and make\na list of them on figma I'm using these\nstandard responsive sizes of 18 pixels\nfor body text 14 pixels for small text\nand 32 pixels for the title for icons\nthere is a massive library of resources\nand plugins on figma itself you can even\nmake them yourself like I did here there\nare different types of icons like flat\nskoric glyph duone 3D outlined and so on\nother major parts are buttons inputs\ncards and really whatever your project\nneeds for example for this project we\nneed buttons category inputs and website\ncards the style I'm choosing is outlined\nand transparent how do you choose a\nstyle you ask well there are about five\nuh 10 no no no wait wait yeah there's an\ninfinite number of styles actually\nthat's where you come in to design one\ngood news is that there are many\nresources to get inspired like dribble\nbehance and even the site we're\ndesigning right now step four the actual\ndesigning now you have all the\ningredients and it's time to cook a\ndesign let him cook keep these six basic\ndesign principles in mind visual\nhierarchy helps show the order of\nimportance among elements contrast helps\ndistinguish elements and make them\nreadable or accessible balance helps\nmoderate the spacing alignment or the\nplacement of different elements\nconsistency helps keep elements\nharmonical and avoids user confusion\nSimplicity keeps things clear and a\nstraightforward for users and for extra\ninteraction feedback keeps users engaged\nand gives them some clear reaction for\ntheir actions now designing is not just\nassembling the elements you will need to\ntest iterate prototype and refine a lot\nin the step nowadays we browse tens of\napplications and websites on a daily\nbasis and already have some expectations\nso you don't need to escape the matrix\nor calculate the answer to life universe\nand everything to come up with a design\nthat users are already accustomed to the\nonly remaining step is filling it up\nwith some text like ux copy or marketing\ncopy you either use some good old lauram\nipsum dollar sit and M conector adip\nsync\nAIT or hear me out writing some actual\ncontent even if they're not going to be\nused at all this helps with testing and\ncreates realistic expectations of\ndifferent sections before finalizing\nthem by now we're also done assembling\nthe design for this project but still\none step remains bonus step\nillustrations and visuals if you need to\nadd graphics there are thousands of free\nand paid resources that provide you with\nthem you can make them yourself too\nwhich is much cooler luckily you don't\neven need fancy software like Adobe\nIllustrator or prre to make\nillustrations you can literally just use\nfigma for most of styles or a spline for\n3D designing for this project we didn't\nreally plan for any illustration because\nit's supposed to be very minimal the\ngood news is that I've turned this\ndesign into a live site and now you can\nuse it to get some Inspirations for\ndesigning your own project elements you\ncan contribute to it too by adding your\nfavorite designs to it this is just the\nbeginning of a journey from here on you\ncan build upon your knowledge by\ndesigning designing and more designing\nand that's all for this video if you\nliked it make sure you do your magic\ndown there and see you on the next one"
    },
    {
        "topic": "Implementing user interfaces in code",
        "url": "https://www.youtube.com/watch?v=iM3kjbbKHQU",
        "transcript": "what is going on guys welcome back in\ntoday's video we're going to learn how\nto build modern looking graphical user\ninterfaces in Python so let us get right\ninto it it's not a g it's a\n[Music]\nred all right so we're going to build\nmodern looking graphical user interfaces\nin this video today and for that we're\ngoing to use an external python module\ncalled custom TK inter which is very\neasy to use if you have already worked\nwith a core python module TK inter which\nis used to build simple basic graphical\nuser interfaces in core python so\nwithout relying on external packages and\nif you want to learn about TK inter\nfirst before watching this video you can\ngo to my channel and check out the TK\ninter crash course but you can also just\nwatch this video you don't need to\nunderstand TK inter first uh the only\nthing is that when you know how to build\ngraphical user interfaces with TK inter\nit's basically the same process with\ncustom TK enter just with slightly\ndifferent class names and slightly\ndifferent function names so what we're\ngoing to do first we're going to open up\nthe command line and we're going to say\npip install custom TK enter and once the\nmodule is installed we're going to go\ninto our python script and we're going\nto import it so import custom TK enter\nand just as a reminder here if we're\nusing tkin what we usually do is we say\nwe have a root element we call it tk. TK\nand then we Define stuff like label\nequals TK inter. label we set it to the\nroot element or we put it inside of the\nroot element then we set some text some\nfont size and all that and then we do\nlabel. pack for example and then we\nDefine buttons and entries and stuff\nlike that and this is how you do it in\nTK enter now in custom TK enter it's\nbasically the same but instead of saying\nTK inter. TK you say TK or you say\ncustom TK inter. ctk and custom tk. ctk\nlabel but the rest is essentially the\nsame so we're going to start first by\ndefining some basic parameters we're\ngoing to set the appearance mode and\nwe're going to set a color scheme and\nfor that we're going to say custom TK\ninter. set appearance mode and here you\nhave three choices you can go with\nsystem you can go with dark and you can\ngo with light this is basically the way\nyour application will look if you go\nwith system it's just going to take the\nsetting of the system so my Windows\nsystem is set to dark mode so the dark\nmode will be the default setting for my\napplication but I can also provide the\nlight mode if I want to I'm going to go\nwith dark so that my application always\nhas the dark mode um actually I think\nit's a lowercase\nD uh but otherwise you would just pass\nsystem uh or light and then I'm also\ngoing to say custom TK inter. set\ndefault color theme and here we're going\nto say dark- blue in this case you can\nalso set blue and you can also set green\nso you have blue green and dark blue\nthose are the three themes that you can\nchoose from and now we can just do a\nvery very basic graphical user interface\nand for this video I'm just going to\nhave the idea of a login system so we're\njust going to build a simple graphical\nuser interface for a login system maybe\nyou can combine it with one of my recent\nvideos where I show you how to build a\nsecure login system you can connect this\ngraphical user interface to the code\nfrom this video if you want to um and\nwhat we're going to do here first is\nwe're going to say the root element is\ngoing to be custom TK inter.\nctk and we're going to say that the\ngeometry of the root ele is going to be\n500 * 350 pixels then we're going to\nDefine a simple function for the login\nnow here you can actually Implement an\nactual login function all I'm going to\ndo here is I'm going to just print um I\ndon't know test or something so this is\njust going to be some function that we\ncall of course if you're building an\nactual login system with functionality\nyou would implement the login logic in\nthis case I'm just going to do I'm just\ngoing to print test so nothing too\nspecial we're just going to connect this\nfunction to a button so that we see it\nworks the focus is on the graphical user\ninterface itself and what we want to add\nhere is we want to add a frame into\nwhich we're going to put all the stuff\nso we're going to say custom TK inter.\nctk frame and the master of this element\nis going to be the root\nelement and then we're just going to say\nframe. pack we can also use grit but\nwe're going to use pack and we're going\nto say that it has a uh vertical padding\nof 20 and a\nhorizontal padding of 60 we're going to\nsay fill equals both and we're going to\nsay expand equals true so this is going\nto be the frame and now we're going to\nadd a label two entries for username\npassword and we're going to add a button\nas well as a checkbox for remember me um\ninto this Frame so we're going to say\nnow first that the\nlabel is going to be equal to custom TK\ninter. ctk lab\nMaster equals frame so not rot we're not\nadding it to rot directly we're adding\nit to the frame which is inside of root\num and this the text is just going to be\na simple login\n[Music]\nsystem and we're going to say the text\nfont is going to be equal to\nRoboto 24 I'm not sure if I actually\nhave this font installed so maybe it's\njust going to default to another font uh\nbut you can set the font that you like\nthen we're going to say label pack with\na\npadding vertically of 12 and\nhorizontally of 10 and then we can\nactually I mean we're not going to copy\nthat but I'm going to now add two text\nentries so the username and the password\ntext entry for that we're going to say\nentry one is going to be equal to custom\nTK enter ctk\nentry Master equals frame the\nplaceholder text so we're not going to\nuse a label for this one we're going to\njust have a placeholder text that is\ndisplayed when we don't have any text\ninside of that entry uh this is going to\nbe\nusername and uh that's basically it for\nthis one we're going to then say entry\n1. Pac pading y12 pading x 10 again\nwe're going to copy this now and we're\ngoing to say entry\n2 um we'll have the placeholder text\npassword and we're going to also encode\nuh the actual input so when you enter\nyour password you don't want to show it\nin clear text so what we're going to do\nhere is we're going to say show equals\nand then a star\nsymbol we're going to pack this as well\nthen the button the login button itself\nwill be a custom TK ENT ctk button with\nthe master being equal to frame it will\nhave a\ntext which says login and we will\nconnect it to the command to the\nfunction login and of course again if\nyou're doing this actually if you're\nactually building a login system you\nwould Implement a logic inside of this\nlogin function here so then we're going\nto say button. pack as well padding Y is\ngoing to be 12 padding X is going to be\n10 and then finally we're going to say\ncheckbox is going to be a custom TK\ninter.\nctk\ncheckbox the master is going to be the\nframe again the text is going to be\nremember me or stay logged in or\nsomething like that and then we're going\nto do the same thing checkbox pack\npadding y12 padding\nX10 and finally root. main Loop that is\nit so this is a very simple graphical\nuser interface you can see it's not a\nlot of lines of code so we just have\nvery repetitive type of defining object\nsetting text setting certain things and\nthen adding them to the frame and the\nframe itself is added to the root then\nwe have functions we can connect to\nbuttons using the command keyword but\nthis graphical user interface this is\nvery similar to just writing it in TK\ninter we can replace custom TK enter\nhere with TK enter and we can replace\nall these ctk things uh with the same\nname without ctk and then we would have\na TK inter interface but it wouldn't\nlook like this so if I run this now you\ncan see this looks like a modern UI so\nthis is actually a cool UI we can see we\nhave the button here we can see we have\nthe check boox here I can write stuff\nyou can see it's also encoded it um and\nwe can also change now the color scheme\nup here so I can go and say make it\ngreen I can run this again and you can\nsee now the button is green um here we\nalso have a green checkbox and we can\nalso make this a light Mode app so I can\nsay\nlight and then you can see this is now\nin light mode and green so you can play\naround with that you can also set it to\nsystem I think it's is it capital S I'm\nnot\nsure yeah so it's now system it's dark\nbecause my system has the dark mode\nenabled um but what you can also do is\nyou can go to the GitHub repository of\ncustom TK ENT so you can just Google\ncustom TK inter GitHub and you can go to\nthe repository to look at some examples\nI've downloaded two of them just to show\nyou what's possible it's not too fancy\nhere but a simple example is this one it\nshows off a couple of elements you can\nsee we have here labels buttons combo\nboxes where you can choose options with\ndifferent styles we can also use the\ncheck boxes here the radio buttons and\nwe can also use sliders that are\nconnected to other\nelements so progress Bar connected with\nthe slider so we have in this uh code\nthat is provided in the GitHub\nrepository you can see that the slider\nhas a command which is the slider\ncallback the slider call back sets the\nprogress BAR value to the slider value\nso that's quite simple thing um and then\nwe also have a complex UI so we can run\nthis as well this is also from the\nexamples um and you can see that this\nlooks just way more modern and way more\ninteresting than the um the basic TK\ninterstyle I think you can easily make\nthe TK inter style like that but you\nwould have to do everything manually\nthis is by default a modern looking\ngraphical user interface so we can see\nhere we can switch the modes dark light\nsystem would stay dark obviously um I\ndon't think we can change the color\ntheme here but you can see how it works\nyou can see how all these elements look\nand I think we should be able to set\nthis to\ngreen and then we see a green UI if you\nprefer\nthat so yeah this is how you build\nmodern looking graphical user interfaces\nin Python so that's it for today's video\nI hope you enjoyed it and hope you\nlearned something if so let me know by\nhitting a like button and leaving a\ncomment in the comment section down\nbelow and of course don't forget to\nsubscribe to this Channel and hit the\nnotification Bell to not miss a single\nfuture video for free other than that\nthank you much for watching see you in\nthe next video and bye\n[Music]"
    },
    {
        "topic": "Introduction to backend development",
        "url": "https://www.youtube.com/watch?v=iEyA1dXZs_M",
        "transcript": "Error fetching transcript for video iEyA1dXZs_M: \nCould not retrieve a transcript for the video https://www.youtube.com/watch?v=iEyA1dXZs_M! This is most likely caused by:\n\nNo transcripts were found for any of the requested language codes: ('en',)\n\nFor this video (iEyA1dXZs_M) transcripts are available in the following languages:\n\n(MANUALLY CREATED)\nNone\n\n(GENERATED)\n - hi (\"Hindi (auto-generated)\")[TRANSLATABLE]\n\n(TRANSLATION LANGUAGES)\n - ab (\"Abkhazian\")\n - aa (\"Afar\")\n - af (\"Afrikaans\")\n - ak (\"Akan\")\n - sq (\"Albanian\")\n - am (\"Amharic\")\n - ar (\"Arabic\")\n - hy (\"Armenian\")\n - as (\"Assamese\")\n - ay (\"Aymara\")\n - az (\"Azerbaijani\")\n - bn (\"Bangla\")\n - ba (\"Bashkir\")\n - eu (\"Basque\")\n - be (\"Belarusian\")\n - bho (\"Bhojpuri\")\n - bs (\"Bosnian\")\n - br (\"Breton\")\n - bg (\"Bulgarian\")\n - my (\"Burmese\")\n - ca (\"Catalan\")\n - ceb (\"Cebuano\")\n - zh-Hans (\"Chinese (Simplified)\")\n - zh-Hant (\"Chinese (Traditional)\")\n - co (\"Corsican\")\n - hr (\"Croatian\")\n - cs (\"Czech\")\n - da (\"Danish\")\n - dv (\"Divehi\")\n - nl (\"Dutch\")\n - dz (\"Dzongkha\")\n - en (\"English\")\n - eo (\"Esperanto\")\n - et (\"Estonian\")\n - ee (\"Ewe\")\n - fo (\"Faroese\")\n - fj (\"Fijian\")\n - fil (\"Filipino\")\n - fi (\"Finnish\")\n - fr (\"French\")\n - gaa (\"Ga\")\n - gl (\"Galician\")\n - lg (\"Ganda\")\n - ka (\"Georgian\")\n - de (\"German\")\n - el (\"Greek\")\n - gn (\"Guarani\")\n - gu (\"Gujarati\")\n - ht (\"Haitian Creole\")\n - ha (\"Hausa\")\n - haw (\"Hawaiian\")\n - iw (\"Hebrew\")\n - hi (\"Hindi\")\n - hmn (\"Hmong\")\n - hu (\"Hungarian\")\n - is (\"Icelandic\")\n - ig (\"Igbo\")\n - id (\"Indonesian\")\n - iu (\"Inuktitut\")\n - ga (\"Irish\")\n - it (\"Italian\")\n - ja (\"Japanese\")\n - jv (\"Javanese\")\n - kl (\"Kalaallisut\")\n - kn (\"Kannada\")\n - kk (\"Kazakh\")\n - kha (\"Khasi\")\n - km (\"Khmer\")\n - rw (\"Kinyarwanda\")\n - ko (\"Korean\")\n - kri (\"Krio\")\n - ku (\"Kurdish\")\n - ky (\"Kyrgyz\")\n - lo (\"Lao\")\n - la (\"Latin\")\n - lv (\"Latvian\")\n - ln (\"Lingala\")\n - lt (\"Lithuanian\")\n - lua (\"Luba-Lulua\")\n - luo (\"Luo\")\n - lb (\"Luxembourgish\")\n - mk (\"Macedonian\")\n - mg (\"Malagasy\")\n - ms (\"Malay\")\n - ml (\"Malayalam\")\n - mt (\"Maltese\")\n - gv (\"Manx\")\n - mi (\"M\u0101ori\")\n - mr (\"Marathi\")\n - mn (\"Mongolian\")\n - mfe (\"Morisyen\")\n - ne (\"Nepali\")\n - new (\"Newari\")\n - nso (\"Northern Sotho\")\n - no (\"Norwegian\")\n - ny (\"Nyanja\")\n - oc (\"Occitan\")\n - or (\"Odia\")\n - om (\"Oromo\")\n - os (\"Ossetic\")\n - pam (\"Pampanga\")\n - ps (\"Pashto\")\n - fa (\"Persian\")\n - pl (\"Polish\")\n - pt (\"Portuguese\")\n - pt-PT (\"Portuguese (Portugal)\")\n - pa (\"Punjabi\")\n - qu (\"Quechua\")\n - ro (\"Romanian\")\n - rn (\"Rundi\")\n - ru (\"Russian\")\n - sm (\"Samoan\")\n - sg (\"Sango\")\n - sa (\"Sanskrit\")\n - gd (\"Scottish Gaelic\")\n - sr (\"Serbian\")\n - crs (\"Seselwa Creole French\")\n - sn (\"Shona\")\n - sd (\"Sindhi\")\n - si (\"Sinhala\")\n - sk (\"Slovak\")\n - sl (\"Slovenian\")\n - so (\"Somali\")\n - st (\"Southern Sotho\")\n - es (\"Spanish\")\n - su (\"Sundanese\")\n - sw (\"Swahili\")\n - ss (\"Swati\")\n - sv (\"Swedish\")\n - tg (\"Tajik\")\n - ta (\"Tamil\")\n - tt (\"Tatar\")\n - te (\"Telugu\")\n - th (\"Thai\")\n - bo (\"Tibetan\")\n - ti (\"Tigrinya\")\n - to (\"Tongan\")\n - ts (\"Tsonga\")\n - tn (\"Tswana\")\n - tum (\"Tumbuka\")\n - tr (\"Turkish\")\n - tk (\"Turkmen\")\n - uk (\"Ukrainian\")\n - ur (\"Urdu\")\n - ug (\"Uyghur\")\n - uz (\"Uzbek\")\n - ve (\"Venda\")\n - vi (\"Vietnamese\")\n - war (\"Waray\")\n - cy (\"Welsh\")\n - fy (\"Western Frisian\")\n - wo (\"Wolof\")\n - xh (\"Xhosa\")\n - yi (\"Yiddish\")\n - yo (\"Yoruba\")\n - zu (\"Zulu\")\n\nIf you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!"
    },
    {
        "topic": "Building RESTful APIs using Node.js or Python",
        "url": "https://www.youtube.com/watch?v=XGa4onZP66Q",
        "transcript": "Error fetching transcript for video XGa4onZP66Q: \nCould not retrieve a transcript for the video https://www.youtube.com/watch?v=XGa4onZP66Q! This is most likely caused by:\n\nNo transcripts were found for any of the requested language codes: ('en',)\n\nFor this video (XGa4onZP66Q) transcripts are available in the following languages:\n\n(MANUALLY CREATED)\nNone\n\n(GENERATED)\n - hi (\"Hindi (auto-generated)\")[TRANSLATABLE]\n\n(TRANSLATION LANGUAGES)\n - ab (\"Abkhazian\")\n - aa (\"Afar\")\n - af (\"Afrikaans\")\n - ak (\"Akan\")\n - sq (\"Albanian\")\n - am (\"Amharic\")\n - ar (\"Arabic\")\n - hy (\"Armenian\")\n - as (\"Assamese\")\n - ay (\"Aymara\")\n - az (\"Azerbaijani\")\n - bn (\"Bangla\")\n - ba (\"Bashkir\")\n - eu (\"Basque\")\n - be (\"Belarusian\")\n - bho (\"Bhojpuri\")\n - bs (\"Bosnian\")\n - br (\"Breton\")\n - bg (\"Bulgarian\")\n - my (\"Burmese\")\n - ca (\"Catalan\")\n - ceb (\"Cebuano\")\n - zh-Hans (\"Chinese (Simplified)\")\n - zh-Hant (\"Chinese (Traditional)\")\n - co (\"Corsican\")\n - hr (\"Croatian\")\n - cs (\"Czech\")\n - da (\"Danish\")\n - dv (\"Divehi\")\n - nl (\"Dutch\")\n - dz (\"Dzongkha\")\n - en (\"English\")\n - eo (\"Esperanto\")\n - et (\"Estonian\")\n - ee (\"Ewe\")\n - fo (\"Faroese\")\n - fj (\"Fijian\")\n - fil (\"Filipino\")\n - fi (\"Finnish\")\n - fr (\"French\")\n - gaa (\"Ga\")\n - gl (\"Galician\")\n - lg (\"Ganda\")\n - ka (\"Georgian\")\n - de (\"German\")\n - el (\"Greek\")\n - gn (\"Guarani\")\n - gu (\"Gujarati\")\n - ht (\"Haitian Creole\")\n - ha (\"Hausa\")\n - haw (\"Hawaiian\")\n - iw (\"Hebrew\")\n - hi (\"Hindi\")\n - hmn (\"Hmong\")\n - hu (\"Hungarian\")\n - is (\"Icelandic\")\n - ig (\"Igbo\")\n - id (\"Indonesian\")\n - iu (\"Inuktitut\")\n - ga (\"Irish\")\n - it (\"Italian\")\n - ja (\"Japanese\")\n - jv (\"Javanese\")\n - kl (\"Kalaallisut\")\n - kn (\"Kannada\")\n - kk (\"Kazakh\")\n - kha (\"Khasi\")\n - km (\"Khmer\")\n - rw (\"Kinyarwanda\")\n - ko (\"Korean\")\n - kri (\"Krio\")\n - ku (\"Kurdish\")\n - ky (\"Kyrgyz\")\n - lo (\"Lao\")\n - la (\"Latin\")\n - lv (\"Latvian\")\n - ln (\"Lingala\")\n - lt (\"Lithuanian\")\n - lua (\"Luba-Lulua\")\n - luo (\"Luo\")\n - lb (\"Luxembourgish\")\n - mk (\"Macedonian\")\n - mg (\"Malagasy\")\n - ms (\"Malay\")\n - ml (\"Malayalam\")\n - mt (\"Maltese\")\n - gv (\"Manx\")\n - mi (\"M\u0101ori\")\n - mr (\"Marathi\")\n - mn (\"Mongolian\")\n - mfe (\"Morisyen\")\n - ne (\"Nepali\")\n - new (\"Newari\")\n - nso (\"Northern Sotho\")\n - no (\"Norwegian\")\n - ny (\"Nyanja\")\n - oc (\"Occitan\")\n - or (\"Odia\")\n - om (\"Oromo\")\n - os (\"Ossetic\")\n - pam (\"Pampanga\")\n - ps (\"Pashto\")\n - fa (\"Persian\")\n - pl (\"Polish\")\n - pt (\"Portuguese\")\n - pt-PT (\"Portuguese (Portugal)\")\n - pa (\"Punjabi\")\n - qu (\"Quechua\")\n - ro (\"Romanian\")\n - rn (\"Rundi\")\n - ru (\"Russian\")\n - sm (\"Samoan\")\n - sg (\"Sango\")\n - sa (\"Sanskrit\")\n - gd (\"Scottish Gaelic\")\n - sr (\"Serbian\")\n - crs (\"Seselwa Creole French\")\n - sn (\"Shona\")\n - sd (\"Sindhi\")\n - si (\"Sinhala\")\n - sk (\"Slovak\")\n - sl (\"Slovenian\")\n - so (\"Somali\")\n - st (\"Southern Sotho\")\n - es (\"Spanish\")\n - su (\"Sundanese\")\n - sw (\"Swahili\")\n - ss (\"Swati\")\n - sv (\"Swedish\")\n - tg (\"Tajik\")\n - ta (\"Tamil\")\n - tt (\"Tatar\")\n - te (\"Telugu\")\n - th (\"Thai\")\n - bo (\"Tibetan\")\n - ti (\"Tigrinya\")\n - to (\"Tongan\")\n - ts (\"Tsonga\")\n - tn (\"Tswana\")\n - tum (\"Tumbuka\")\n - tr (\"Turkish\")\n - tk (\"Turkmen\")\n - uk (\"Ukrainian\")\n - ur (\"Urdu\")\n - ug (\"Uyghur\")\n - uz (\"Uzbek\")\n - ve (\"Venda\")\n - vi (\"Vietnamese\")\n - war (\"Waray\")\n - cy (\"Welsh\")\n - fy (\"Western Frisian\")\n - wo (\"Wolof\")\n - xh (\"Xhosa\")\n - yi (\"Yiddish\")\n - yo (\"Yoruba\")\n - zu (\"Zulu\")\n\nIf you are sure that the described cause is not responsible for this error and that a transcript should be retrievable, please create an issue at https://github.com/jdepoix/youtube-transcript-api/issues. Please add which version of youtube_transcript_api you are using and provide the information needed to replicate the error. Also make sure that there are no open issues which already describe your problem!"
    },
    {
        "topic": "Integrating backend with mobile apps",
        "url": "https://www.youtube.com/watch?v=gvkqT_Uoahw",
        "transcript": "react native write javascript and react\nto build apps for ios android and the\nweb from a single codebase according to\natwood's law any application that can be\nwritten in javascript will eventually be\nwritten in javascript the first way js\ndevelopers tried to build mobile apps\nwas by wrapping their native\napplications in a sandbox browser called\na webview using tools like apache\ncordova and adobe phonegap the\nphilosophy is right once run anywhere\nthis works but it can be hard to make a\nwebsite feel like a true native\nexperience react native takes a\ndifferent approach it feels just like\nreact dom for the web but instead of\nusing html and the dom as building\nblocks for the ui it uses the native\ncomponents that you would find on ios\nand android the philosophy is learn once\nright anywhere you can't just take your\nexisting react web app and upload it to\nthe app store but you can use the react\nskills you already have to build a\nnative app without ever having to touch\njava or objective c instead you import\nbuilding block components like button\nswitch scroll view and the most\nfundamental of which is view at runtime\nit will use the true native component on\nthe corresponding platform like uiview\nandroid.view or div on the web it's like\nbuilding three apps for the price of one\nbut in some cases you may want a\ndifferent visual experience based on the\nunderlying os the platform module allows\nyou to check which platform you're on\nand render different components\naccordingly when it comes to visuals\nthere's no css in react native instead\nevery core component takes a style prop\nthat can be customized with a style\nsheet constructed from javascript in\ndevelopment it supports fast refresh\nwhich means you can instantly see the\nchanges you make to your code on any\nplatform you may also want to tap into\nnative features like the device camera\npush notifications and geolocation these\nconcerns are handled by one of the most\nactive open source communities on github\nthere's open source packages for almost\neverything that can be installed with\nnpm just like any other javascript\nproject and there's frameworks like expo\nthat build on top of react native\nprimitives to provide all the tooling\nrequired to ship your app to production\nyou can use react native to build a\ncomplete mobile app or integrate it with\nexisting ios and android projects it's\nnot an all or nothing solution this has\nbeen react native in 100 seconds if you\nwant to see more short videos like this\nhit the like button and subscribe and\nlet me know if you want to see more\nreact native content in the comments\nthanks for watching and i will see you\nin the next one"
    },
    {
        "topic": "SQLite and Core Data for local data storage",
        "url": "https://www.youtube.com/watch?v=faSxK3hK2KI",
        "transcript": "you have heard about local storage you\nmight have also heard about index DB as\na storage thing in browsers but have you\nheard about something known as origin\nprivate file system this is one of the\nthings which I have very recently\ndiscovered I'm very surprised that I did\nnot know it after working years with\nlocal storage and a lot of time with\nindex TB also but apparently this is\nsomething which notion also uses so what\nnotion has done is that they compile\nsqlite with vasum and ship it to the\nbrowser and under the hood in order to\nstore the data of the sqlite where the\nsqlite file is stored they use something\nknown as origin private file system now\nin this video I want to get into depths\nof this blog post and this API also\ncover a little bit about it why do\nnotion not use local storage or index TB\nat all which we by the way like you know\nwe as developers consider as a very\nstable option for storing data and what\ndoes it mean for you as an end developer\nall right so 3 years ago we successfully\nsped up notion app for mac and windows\nby using a site database to cach data on\nthe client we also use the site caching\nin our native mobile application this\nyear we have been able to deliver the\nsame Improvement to the users who access\nnotion through their web browsers this\narticle is deep dive into how we used\nweb assembly implementation of sqlite to\nimprove Notions performance in the\nbrowser right so they're coming up with\na few performance numbers and in general\nlike what improvements happened after\nSQL a but I think the more interesting\nquestion here is that you know that they\nare using something like sqlite in\nbrowser users right so the code\nTechnologies over here is opfs and web\nworkers so in order to process data\nacross session the wasam sqlite library\nuses origin private file system or also\nknown as opfs a modern browser API that\nlets a site read from and write to files\non users device now let me tell you why\nthis is necessary so if you look at a\nwebsite in general what you will see is\nthat this is a website and if let's say\nif this website needs to purs some data\nthere are very limited options for this\nwebsite right you can't do you know you\ncan't just open a file system directly\neven though like opfs is exactly what it\nis but imagine you don't have opfs right\nso what do you have as an option let's\ndiscuss all the exhaustive options so\nthe first option you have over here is\nsomething known as local storage right\nwhich we all know and love and it has\nbeen like for years maybe like more than\na decade now in browsers which allow you\nto just set and get key value pairs\nright local storage. set something local\nstorage. getet that thing the next thing\nyou have is so known as session storage\nright so session storage also sort of\nworks similar to how local storage would\nwork but it's only persisted for a\nsession so if you close your browser and\nopen it again you will just lose the\ndata the third thing which is also there\nit's not exactly for storing data but\ncan be used that is for cookies right so\nyou can store some sort of data in\ncookies also which I mean the drawback\nhere is that if it becomes an HTTP only\ncookie your JavaScript can't access it\nand plus cookies are like sort of\nexpensive also because you are sending\nthem in every round trip to every HTTP\nrequest right the fourth API which\nrelatively is like we consider it as a\nlow-level API is the index TB right so\nindex TB API is an API which allows you\nto communicate and store massive amounts\nof data right so unlike local storage\nand session storage which carry like a 5\n10 MB limit per website this storage\ndoes not has any limits as such I mean\nof course it would have limits enforced\nby a browser and operating system system\nbut not so low like you can't store\nanything so you can download like you\nknow a few megabytes or few gigabytes of\ndata also in index TB keep them there\nall of that stuff you can do however\nthere's a new player in town according\nto me now this technology might be old\nbut to be very honest I was not aware\nabout it myself which is this opfs right\nopfs o origin private file system very\ncool name 10 on 10 for the name because\nthe name denotes like what it's going to\nbe it's a file system which is private\nto the origin right so it will operate\nlike a file system but origin private so\nyou already have like you know the\ncourse feeling a little bit over here in\nbuilt in the name itself so the opfs\noffers low-level bite by bite file\naccess which is private to the origin of\nthe page and it's not visible to the\nuser as a result it doesn't require the\nsame series of Security checks and\npermission grants and is therefore\nfaster than file system access API calls\nso you can see opfs is also subject to\nbrowser storage quota restrictions just\nlike any other origin partition storage\nmechanic M for example index TV right\nand what these quota restrictions are so\nyou can see that the data stored by\nother web Technologies like index TV\ncache API or file system API which is\nlike opfs is managed by a storage\nmanagement system that's specific to\neach browser right so on Firefox it's\n10% of the total dis size or 10 GB for\nChrome origin can store up to 60% of\ntotal dis size for example if you have a\n1 TB hard disk you can store up to 600\nGB I mean which is crazy amount of data\nright so you would not ever run out of\nit hopefully unless you are doing\nsomething weird in your web application\nbut anyway coming back to the blog post\nwhat these guys are doing now is that\nthey are storing a site database because\nsqlite is a single file right into the\nopfs and then they are using literally\nthey are writing SQL in browser to\ncommunicate with that and store that the\nvasam sqlite library can only use opfs\nfor its persistence layer in web workers\na web worker can be thought of as a code\nthat is fine so web workers also has\naccess to opfs right which is great so\nour shared worker powered approach our\nfinal architecture was based on a Noel\nsolution that Roy laid out in get up\ndiscussion he described an approach\nwhere only one tab can access sqlite at\na time while still permitting other tabs\nto execute sqlite queries so they have a\nshared worker powered approach okay so\nin a nutshell each tab has its own\ndedicated web worker that can write to\ncite however only one tab is permitted\nto use its actual web worker a shared\nworker is responsible for managing which\nis the active Tab and when the active\ntab closes the shared worker knows to\nselect the new active tab to detect\nclosed tabs we must open we open an\ninfinitely open web block on each Tab\nand if that web block closes the tab\nmust have closed I mean obviously I\ndon't understand the nuances and the\narchitecture of notion but this looks a\nlot like service worker right so you\nhave web worker sure but if this is a\nservice worker then you just have one\nworker at a given path right and then\nyou could potentially solve this problem\nof course in service worker you would\nget a problem when a new work is coming\nup so you'll have to solve that but this\nshared architecture thing solves when\nyou are using a service worker so prior\nto build an architecture described above\nwe tried to get vasam sqlite running in\na more straightforward way one dedicated\nweb worker per tab within each web\nworker writing to the sqlite so they\nwere not able to do this architecture\nwhere every web worker is able to write\nto every s you know to the same sqlite\nfile because it would have likely\ncorrupted the database which is which I\nmentioned right so the corruption issues\nwhen we turned on opfs Via sqlite 3 VFS\nto a small percentage of users we\nstarted seeing a severe Buck for some of\nthem the users will see wrong data on a\npage a comment attributed to the wrong\ncoworker for example or a link to a new\npage whose preview was completely\ndifferent page right so the data\ncorruption started happening in the\nlocal sqlite we hazed that the problem\nwas caused by concurrency issues\nmultiple tabs might be open and in each\ntab had a dedicated web worker that had\nan active connection I mean not this\nwould not be the real like reason of the\ncorruption but not to add on to this but\nseite also does not have check sums\nright so if your data is like truly\ncorrupted because of some sort of you\nknow bit flipping or something like that\nwhich happened by mistake then site also\ndoesn't recover from it but that's okay\nI mean that's like just an advanced\nthing so we started looking logging\ncorruption errors and then tried a few\nbanded approaches like adding web blocks\nonly having the focus InFocus tab right\nto the sqlite these tweaks lowered the\nrate of corruption but not enough that\nwe were confident that we could turn on\nthis feature on production traffic again\nso after like a couple of more obstacles\nthey figured out the shared worker\narchitecture and they figured out this\nis what works the best for us which is\nbasically this one where an active web\nworker is the only one that can query\nthe database and rest of the workers\nhave to talk to this worker in order to\nget some queries run right so your\nbackground tabs may be making some\nqueries but they are coming to the\nworker which is running in the active\nTab and that's making the SQL queries so\nonce they did that they figured out that\ntheir page load got slow why because\nusers has to download and process the\nvasam sqlite binary which blocked the\npage load progress preventing other page\nload operations from happening\nconcurrently since this library is a few\nhundred kilobytes the extra time was\nnoticeable so they made vasum sqlite\nload asynchronously and by the time it\nwas loading they did not fetch anything\nfrom sqlite and slow devices didn't\nbenefit from caching I mean because in\nslow devices what they figured out is\nthat the time they are using to read\nfrom site vasum to the opfs to\neverything and the API call it was sort\nof more or less the same right so what\nthey did is that they just promis raised\nto asynchronous requests they'll call\nthe seite API also and they'll call\ntheir rest API also or whatever they use\nagainst each other we simply\nreimplemented this logic in the code\npath for navigation clicks and I mean\nwhatever returns you the response faster\njust do that which is interesting right\nbecause on some low power devices your\nnetwork is faster than going through\nthis vas some abstraction layer to the\ndisk fetching it running the query and\ngetting the cash back but yeah this is\nan interesting blog post and most\nimportantly this taught me about this\nnew API which I did not know before\nwhich is the open opfs origin private\nfile system that's all for this video\nI'll leave all the links in the\ndescription all the links of blog post\nand the apis do check it out let me know\nwhat do you think about this blog post\nif you like this make sure you leave a\nlike And subscribe to the channel I will\nsee you in the next video really soon"
    },
    {
        "topic": "Cloud-based storage using Firebase or AWS DynamoDB",
        "url": "https://www.youtube.com/watch?v=JIbIYCM48to",
        "transcript": "Amazon web services launched in 2006\nwith a total of three products storage\nbuckets compute instances and a\nmessaging queue today it offers a\nmind-numbing 200 and something services\nand what's most confusing is that many\nof them appear to do almost the exact\nsame thing it's kind of like shopping at\na big grocery store where you have\ndifferent aisles of product categories\nfilled with things to buy that meet the\nneeds of virtually every developer on\nthe planet in today's video we'll walk\ndown these aisles to gain an\nunderstanding of over 50 different AWS\nproducts so first let's start with a few\nthat are above my pay grade that you may\nnot know exist if you're building robots\nyou can use robomaker to simulate and\ntest your robots at scale then once your\nrobots are in people's homes you can use\niot core to collect data from them\nupdate their software and manage them\nremotely if you happen to have a\nsatellite orbiting Earth you can tap\ninto Amazon's Global Network of antennas\nto connect data through its ground\nstation service and if you want to start\nexperimenting and researching the future\nof computing you can use bracket to\ninteract with a quantum computer but\nmost developers go to the cloud to solve\nmore practical problems and for that\nlet's head to the compute aisle one of\nthe original AWS products was elastic\ncompute Cloud it's one of the most\nfundamental building blocks on the\nplatform and allows you to create a\nvirtual computer in the cloud choose\nyour operating system memory and\ncomputing power then you can rent that\nspace in the cloud like you're renting\nan apartment that you pay for by the\nsecond a common use case is to use an\ninstance as a server for web application\nbut one problem is that as your app\ngrows you'll likely need to distribute\ntrack traffic across multiple instances\nin 2009 Amazon introduced elastic load\nbalancing which allowed developers to\ndistribute traffic to multiple instances\nautomatically in addition the cloudwatch\nservice can collect logs and metrics\nfrom each individual instance the data\ncollected from cloudwatch can then be\npassed off to autoscale in which you\ndefine policies that create new\ninstances as they become needed based on\nthe traffic and utilization of your\ncurrent infrastructure these tools were\nrevolutionary at the time but developers\nstill wanted an easier way to get things\ndone and that's where elastic beanock\ncomes in most developers in 2011 just\nwanted to deploy a Ruby on Rails app\nelastic beanock made that much easier by\nproviding an additional layer of\nabstraction on top of ec2 and other\nautoscaling features choose a template\ndeploy your code and let all the\nautoscaling stuff happen automatically\nthis is often called a platform as a\nservice but in some cases it's still too\ncomplicated if you don't care about the\nunderlying infrastructure whatsoever and\njust want to deploy a WordPress site\nlight sale is alternative option where\nyou can point and click at what you want\nto deploy and worry even less about the\nunderlying configuration in all these\ncases you are deploying a static server\nthat is always running in the cloud but\nmany Computing jobs are ephemeral which\nmeans they don't rely on any persistent\nState on the server so why bother\ndeploying a server for code like that in\n2014 Lambda came out which are functions\nas a service or serverless Computing\nwith Lambda you simply upload your code\nthen choose an event that decides when\nthat code should run traffic scaling and\nnetor networking are all things that\nhappen entirely in the background and\nunlike a dedicated server you only pay\nfor the exact number of request and\nComputing time that you use now if you\ndon't like writing your own code you can\nuse the serverless application\nrepository to find pre-built functions\nthat you can deploy with the click of a\nbutton but what if you're a huge\nEnterprise with a bunch of its own\nservers Outpost is a way to rent AWS\napis on your own infrastructure without\nneeding to throw your old servers in the\ngarbage in other cases you may want to\ninteract with AWS from remote or extreme\nenvironment like if you're a scientist\nin the Arctic snow devices are like\nlittle mini data centers that can work\nwithout internet in hostile environments\nso that gives us some fundamental ways\nto compute things but many apps today\nare standardized with Docker containers\nallowing them to run on multiple\ndifferent clouds or Computing\nenvironments with very little effort to\nrun a container you first need to create\na Docker image and store it somewhere\nelastic container registry allows you to\nupload an image allowing other tools\nlike elastic container service to pull\nit back down and run it ECS is an API\nfor starting stopping and allocating\nvirtual machines to your containers and\nallows you to connect them to other\nproducts like load balancers some\ncompanies may want more control over how\ntheir app scales in which case eks is a\ntool for running kubernetes but in other\ncases you may want your containers to\nbehave in a more automated way fargate\nis a tool that will make your containers\nbehave like serverless functions\nremoving the need to allocate ec2\ninstances for your containers but if\nyou're building an application and\nalready have it containerized the\neasiest way to deploy it to AWS is app\nRunner this is a new product in 2021\nwhere you simply point it to a container\nimage while it handles all the\norchestration and scaling behind the\nscenes but running an application is\nonly half the battle we also need to\nstore data in the cloud simple storage\nservice or S3 was the very first product\noffered by AWS it can store any type of\nfile or object like an image or video\nand it's based on the same\ninfrastructure as Amazon's e-commerce\nsite it's great for general purpose file\nstorage but if you don't access your\nfiles very often you can archive them in\nGlacier which has a higher latency but a\nmuch lower cost on the other end of the\nspectrum you may need storage that is\nextremely fast and can handle a lot of\nthroughput elastic block storage is\nideal for applications that have\nintensive data processing requirements\nbut requires more manual configuration\nby the developer now if you want\nsomething that's highly performant and\nalso fully managed elastic file system\nprovides all the bells and whistles but\nat a much higher cost in addition to raw\nfiles developers also need to store\nstructured data for their end users and\nthat brings us to the database aisle\nwhich has a lot of different products to\nchoose from the first ever database on\nAWS was simple DB a general purpose\nnosql database but it tends to be a\nlittle too simple for most people\neverybody knows you never go full R time\nit was followed up a few years later\nwith Dynamo DB which is a document\ndatabase that's very easy to scale\nhorizontally it's inexpensive and\nprovides fast read performance but it\nisn't very good at modeling relational\ndata if you're familiar with mongodb\nanother document database option is\ndocument DB it's a controversial option\nthat's technically not mongodb that has\na one toone mapping of the mongod DB API\nto get around restrictive open source\nlicensing speaking of which Amazon also\ndid a similar thing with elastic search\nwhich itself is a great option if you\nwant to build something like a fulltech\nsearch engine but the majority of\ndevelopers out there will opt for a\ntraditional relational SQL database\nAmazon relational database service RDS\nsupports a variety of different SQL\nflavors and can fully manage things like\nbackups patching and scale but Amazon\nalso offers its own proprietary flavor\nof SQL called Aurora it's compatible\nwith postgress or MySQL and can be\noperated with better performance at a\nlower cost in addition Aurora offers a\nnew serverless option that makes it even\neasier to scale and you only pay for the\nactual time that the database is in use\nrelational databases are a great general\npurpose option but they're not the only\noption Neptune is a graph database that\ncan achieve better performance on highly\nconnected data sets like a social graph\nor recommendation engine if your current\ndatabase is too slow you may want to\nbring in elastic cache which is a fully\nmanaged version of redis in inmemory\ndatabase that delivers data to your end\nusers with extremely low latency if you\nwork with time series data like the\nstock market for example you might\nbenefit from time stream a Time series\ndatabase with built-in functions for\ntime based queries and additional\nfeatures for analytics yet another\noption is the Quantum Ledger database\nwhich allows you to build an immutable\nset of cryptographically signed\ntransactions very similar to\ndecentralized blockchain technology now\nlet's shift gears and talk about\nanalytics to analyze data you first need\na place to store it and a popular option\nfor doing that is red shift which is a\ndata warehouse that tries to get you to\nshift away from Oracle warehouses are\noften used by big Enterprises to dump\nmultiple data sources from the business\nwhere they can be analyzed together when\nall your data is in one place it's\neasier to generate meing meanful\nanalytics and run machine learning on it\ndata in a warehouse is structured so it\ncan be queried but if you need a place\nto put a large amount of unstructured\ndata you can use AWS Lake formation\nwhich is a tool for creating data lakes\nor repositories that store a large\namount of unstructured data which can be\nused in addition to data warehouses to\nquery a larger variety of data sources\nif you want to analyze real-time data\nyou can use Kinesis to capture real-time\nstreams from your infrastructure then\nvisualize them in your favorite business\nand elligence tool or you can use a\nstream processing framework like Apache\nspark that runs on elastic map reduce\nwhich itself is a service that allows\nyou to operate on massive data sets\nefficiently with a parallel distributed\nalgorithm now if you don't want to use\nKinesis for streaming data a popular\nalternative is Apache kofka it's open\nsource and Amazon msk is a fully managed\nservice to get you started but for the\naverage developer all this data\nprocessing may be a little too\ncomplicated glue is a serverless product\nthat makes it much easier to extract\ntransform and load your data it can\nautomatically connect to other data\nsources on AWS like Aurora red shift and\nS3 and has a tool called glue studio so\nyou can create jobs without having to\nwrite any actual source code but one of\nthe biggest advantages of collecting\nmassive amounts of data is that you can\nuse it to help predict the future and\nAWS has a bunch of tools in the machine\nlearning aisle to make that process\neasier but first if you don't have any\nhighquality data of your own you can use\nthe data exchange to purchase And\nsubscribe rbe to data from third party\nsources once you have some data in the\ncloud you can use sag maker to connect\nto it and start building machine\nlearning models with tensor flow or P\ntorch it operates on multiple levels to\nmake machine learning easier and\nprovides a managed Jupiter notebook that\ncan connect to a GPU instance to train a\nmachine learning model then deploy it\nsomewhere useful that's cool but\nbuilding your own ml models from scratch\nis still extremely difficult if you need\nto do image analysis you may as well\njust use the recognition API it can\nclassify all kinds of objects and images\nand is likely way better than anything\nthat you would build on your own or if\nyou want to build a conversational bot\nyou might use Lex which runs on the same\ntechnology that powers Alexa devices or\nif you just want to have fun and learn\nhow machine Learning Works you might buy\na deep raser device which is an actual\nRas car that you can drive with your own\nmachine learning code now that's a\npretty amazing way to get people to use\nyour Cloud platform but let's change\ndirection and look at a few other\nessential tools that are used by a wide\nvariety of Developers for security we\nhave IM where you can can create rules\nand determine who has access to what on\nyour AWS account if you're building a\nweb or mobile app where users can log\ninto an account Cognito is a tool that\nenables them to log in with a variety of\ndifferent authentication methods and\nmanages the user sessions for you then\nonce you have a few users logged into\nyour app you may want to send them push\nnotifications SNS is a tool that can get\nthat job done or maybe you want to send\nemails to your users SES is the tool for\nthat now that you know about all these\ntools you're going to want an organized\nway to provision them cloud formation is\na way to create templates based on your\ninfrastructure in yaml or Json allowing\nyou to enable hundreds of different\nservices with the single click of a\nbutton from there you'll likely want to\ninteract with those services from a\nfront-end application like iOS Android\nor the web amplify provides sdks that\ncan connect to your infrastructure from\nJavaScript Frameworks and other\nfront-end applications now the final\nthing to remember is that all of this is\ngoing to cost you a ton of money which\ngoes directly to getting Jeff's rocket\nup so make sure to use AWS cost Explorer\nand budgets if you don't want to pay for\nthese big bul jeene Rockets that's the\nend of the video it took a ton of work\nso please like And subscribe to support\nthe channel or become a prom member at\nfireship iio to get access to more\nadvanced content about building apps in\nthe cloud thanks for watching and I will\nsee you in the next one"
    },
    {
        "topic": "Data synchronization techniques",
        "url": "https://www.youtube.com/watch?v=3Eaw1SSIqRg",
        "transcript": "Process synchronization...\nProcess synchronization is a very main topic of operating system\nIn Process synchronization,\nif multiple processes runs in our system\nthen there could be two modes,\none is serial mode and other is parallel mode\nSerial mode means processes\nwill get executed one by one...\nWhen one process got started,\nother process can't start until it won't get terminated\nMeans like an ATM, when customers uses ATM machines,\nthen they are using that one by one\nNobody else can enter until\none person's transaction does not end\nSo this way when we execute processes\nthen there is no problem in it\nbecause one running process\nwon't make any effect on the other\nBut if we'd talk about parallel execution\nOur system these days uses multi programmed environment\nThey use time sharing environment we can't give\nguarantee that there'll be one process at a time\nA lot of processes can run simultaneously at a time\nwhen this much processes runs at a time\nthen we get a very big problem\nthat there could be some processes which are\ncooperative and others could be independent\nMeans I'm categorizing the processes in two types,\nOne is the cooperative process\nand one is a....\nIndependent\nIndependent process... means my processes\ncould be of two types....\nOne is a...\nCooperative process and one is an Independent\nCooperative processes\nCooperative processes are those processes\nwhere execution of one affects other\nThen important point is why we call them cooperative\nand how execution of one affects other\nThe reason is that they shares\nThey shares something\nMeans there's something common between them\nNow what could be that common...\nCommon could be variable,\nmeans two processes are sharing\nsomething with each other i.e. variable\nMeans they are using common variable,\nthey can share the memory\nThey can share some memory or buffer\nMeans when two processes are running at a time\nMaybe they are sharing a same memory or buffer\nor third can be code...\nmeans there could be some code or coding\nthat's common between both\none more thing can be there i.e. resources\nIn resources like we are having CPU\nprinter... Scanner... We have various hardware\nSo means, if there's anything common between them\nwhether it's a variable, memory or code or resources among them\nWe call those types of processes as cooperative processes\nAnd here its very crucial point,\nthat if they'd share anything common\nthen execution of one can affect other\nOthers are independent processes, independent processes\nmeans execution of one is not putting any effect on other\nMeans there's nothing common, like\nif I\u2019m doing a transaction today on SBI's server\nI'm performing a transaction on SBI's online server\nand other transaction I'm doing on HDFC's server\nSo there's nothing common between them\nboth are getting executed on different servers\nso that's independent processes,\nso there's no benefit to study about them\nBecause they are getting executed differently\nso there's nothing common between them\nBut this... Cooperative processes\nThis is very important point here\nCooperative processes means like if in IRCTC,\nthousands of people can do transaction at a time\nEven in our Laptops, PCs & mobiles,\nthere are many processes at  a time\nwhich can share something common\nWe call those types of processes as cooperative processes\nNow our topic is process synchronization\nNow why there's need of process synchronization here\nIf we won't properly synchronize these cooperative processes\nthen they can create the problem\nit's not always mandatory that they will create\nBut yes, they can create the problem\nWe'll see one example there,\nit's just like a simple example like if I would give a guitar\nto someone who don't have any knowledge about music\nthen he'll create noise rather than music... Why?\nBecause all the strings in it won't get synchronized\nIf he'll play it in a synchronized way\nthen definitely it'll create music rather than noise\nAnd if cooperative processes won't get executed properly\nthen it'll create some problem here\nit'll take to some inconsistent or deadlock state\nthat it'd be very difficult to come out of it\nSo that's why it's very important to synchronize them\nNow before synchronizing,\nlet's see one problem\nthat where does\ncooperative processes creates problem\nWe are discussing through a simple example\nThere're two processes P1 and P2\nThey are running on same system\nIn P1, the code is like X, there's a variable X\nAnd X++\nShared = X\nAnd in T2, there is some local variable Y\nShared.... Y--\nSleep(1)... and shared = Y\nSo guys, I'm writing the code partially\nHere I\u2019ve two processes P1 and P2\nand here they are sharing a variable\nI gave that variable a name as shared variable\nLet's say initialized it with value 5,\nit's a shared variable we initialized in it with 5,\nthere's a local variable in P1 i.e. X of integer type\nP2 also have a local variable of integer type\nNow condition is that\nboth processes are running at a time\nMeans both processes are parallel\nwe are not talking about serial\nbecause when two process are serial\nMeans P2 can't get start until P1 is not completing\nSo no problem will get create in this\nBut when two processes are parallel\nthen what problem can arise?\nNow we are seeing here\nthat what is common in P1 and P2\nSO if you'd see properly in P1 and P2,\nthen one thing is common i.e. shared\nshared is what?... A variable\nSo I already told that cooperative processes\nthat shares something common\nThat could be memory, variable, code or some resources\nso we took in an example... variable\nThey both are sharing a single variable i.e. shared\nNow, for example... Let's say\nthat anyone can run first in P1 and P2\nBut we are talking about uni processor here\nwe have constraint, because\nwe are talking about the uni processor system\nMeans we have only one CPU,\nthis is the Constraint over there\nAnd generally in our laptops, mobiles\nOur CPU is the same in uni processor system\nNow out of p1 & p2 anyone can run first\nBoth will come parallel, but due to uni processor,\none will get CPU first\nLet's say P1 got the CPU first,\nthen it'll execute instruction no. 1\nSo what is instruction no. 1\nShared = X, means we are assigning value of shared in X\nWhat is the value of shared.... 5\nWe assigned 5 value in X\nNow X is containing the value 5\nNext instruction is X++... X++ means\nX's value will become 6 there\nLet's say X value here is 5...\nNow it became 6 after instruction 2\nThird instruction is Sleep\nIn previous videos we have discusses many times\nthat processes can be pre-empted\nProcesses can jump... Means CPU\ncan leave a process and start executing other\nSo these types of processes are called pre-emption\nMeans a running process will get pre-empt\nand CPU cam start executing other process\nTo implement this, we write sleep\nSleep means this process will get sleep.. sleep means pause\nIt's just simple meaning i.e. Pause\nMeans we paused a running process\nWhat is the meaning of sleep (1)... 1 second\nIt means we paused P process for 1 second\nThis is the way of writing the code...\nwe generally says in theory that high priority\nprocess came, then CPU got pre-empted\nLike we discuss in time quantum that CPU\ngot pre-emptive after 2-3 time quantum\nWe discuss a lot in theory always\nBut this is one way how we implement it in actual\nI tried to implement it that sleep (1)\nmeans that we paused running process\nBut can we pause CPU?... NO\nCPU is not in our hand, It's not in user's hand\nIt's in operating system's hands\nWe paused this process because I want to pre-empt this process\nTo pre-empt this I intentionally\nwrote this line here i.e. Sleep(1)\nNow when this process will get pause,\nCPU won't get pause, CPU never stays idle\nSo CPU will say, Okay, P1 you want\nto get pause for 1 second?... No problem\nBut I want some other process,\nSo is there any other process in parallel... Yes\nP2 will say that it's parallel\nand it'll shift from ready queue to running queue\nWhen it came in running queue\nThen in technical term we call it context switching\nMeans here context switching took place and...\nWe saved P1's values in PCB ( process control block)\nAnd we loaded P2\nWhen We loaded P2, then it'll also start from its\nfirst instruction i.e. Shared = y\nWhat is the value of shared.... Shared value is 5\nSo y got the value 5\nWhen we executed 2nd instruction y--\nWhat it becomes?\nIn local variable, Y's value is 4\nNow it comes with third... third instruction is Sleep (1)\nMeans we said in process 2 also that it'll get pre-empt\nBut how we actually do coding to make it pre-empt\nThis is a simple C language code... Sleep(1)\nMeans we said process 2 also to get pause for a second\nAgain same thing... Process will get pause\nBut will CPU get pause?...NO\nThe moment it came on sleep (1)\nCPU will again preempt\nbecause it'll say P2 to get pause\nbut CPU won;'t get pause\nIf it won't get pause, then CPU will search\nfor some other process that could be running\nYes... P1 is here.\nBecause P1's one second pause is completed\nThat it'll again come to P1\nand P1 will start from 4th instruction,\nbecause we've already seen the concept of PCB\nAll information is saved in process control block\nthat up to where did you executed it before\nSo we already executed up to third instruction\nthen address of fourth instruction will get note in program counter\nSo when we'll execute 4th instruction then\nwe load X's value in shared that was X=6 in local variable\nMeans now the value of shared variable becomes 6\nSo this process is done executing all its statements\nMeans this process got terminated\nAnd when a process got terminated,\nso we took all the resources back\nNow CPU will search if there's any other process\nIf there won't be any other process then CPU would become Idle\nBut there's already a P2 pending\nBecause P2 was on 1 second sleep...\n1 second is already completed\nNow P2 will again get the control\nNow we'll load in PCB again,\nthen this status will be written there that\nFirst 3 statement have been already executed\nSo PCB will say fourth instruction\nThen again address of 4th instruction will get load\nNow what is the value of y\nValue of Y in local variable is 4\nSo four value came in shred variable\nMeans shared value got updated again\nand final value of shared is 4\nBut what do you think?\nThis is right or wrong?\nThis is wrong... Because\nThere's a value 5... if we added 1 in 5\nand 1 subtracted 1 from it,\nthen what should be the answer... 5\nIf we'll add and subtract same value\nthen answer will be 5\nBut the answer here is 4\nWhy??... Because these two process which are parallel\nand which are cooperative,\nthey are sharing something that's why\nthey are cooperative, they're not synchronized\nIf they would be synchronized then\nmy answer would be 5, but if you would execute it\nWe executed P1 first and my final answer was 4\nyou can also start P2 first,\nif you'd start P2 first then in that case\nanswer would be 6\nBut 6 and 4 both are wrong\nAny of the two answers can come\nIf you'd execute P1 first\nthen answer would be 4 if you'd start P2 first\nand then run it and pre-empt it then answer would be 6\nso this problem is called Race condition\nMeans here 4 & 6 are racing that who'll win\nIf you'll execute it then maybe 4 will win\nin some of them or 6 will win in some other systems\nBut both are wrong ...\nbecause answer was supposed to be 5\nBut it won't come 5\nBecause these processes are not synchronized\nThis is why we need the synchronization\nIt's telling us here that what problem\ncan create without synchronization\nso there're a lot of methods to synchronize\nWe can use semaphore, peter son solution,\nlocking method also which we'll see in the future videos\nSo this is why we need the process synchronization\nwherever multiple processes will run at a time\nAnd cooperative processes,\nwe'll only talk about cooperative processes\nBecause only they can create problem\nif won't get synchronized\nSO if you liked this video\nthen please click the like button & share\nAnd if you have any query,\nthen you can ask in comment\nThank You so much!"
    },
    {
        "topic": "Unit testing and integration testing",
        "url": "https://www.youtube.com/watch?v=u6QfIXgjwGQ",
        "transcript": "software it's not like engineering\nsomething easy like a bridge where you\nstart with a blueprint\nbuild it to spec then forget about it\nsoftware is dynamic with a lot of moving\nparts and requirements that evolve over\ntime\ndevelopers build apps on top of a\nmountain of abstractions and nobody\nfully understands how every layer works\nthat's okay because we just need to make\nsure that our code matches the\nrequirements of the product test driven\ndevelopment is scientifically proven to\nreduce defects and improve the\nmaintainability of a code base but it\ndoes require some additional effort\none option is manual testing where a\nhuman being clicks on every button and\nfills out every form then assigns a\nbunch of jira tickets so they can be\nbacklogged by the developers\nbut that's not very efficient for a\nlarge scale product a better approach is\nto use automated testing tools that\nallow developers to write code for the\nsole purpose of testing the main\napplication code in a code base you'll\noften find files that end in\ntest or dot spec inside you'll first\nfind a line of code that describes the\nfeature or thing that's being tested\nthat's known as a test suite and it\ncontains one or more individual tests\nan individual test usually starts with\nit followed by a description\nof what is being tested the idea is to\ndescribe the behavior of the code in\nhuman readable terms\ninside the test the code will be\nexecuted then one or more\nexpectations or assertions are used to\ncheck that the code produces the\nexpected result if the expectation\nreturns false then the test fails\nif it's true it passes test runners like\njest or karma\ncan run all your tests automatically in\nthe background or on a continuous\nintegration server before you deploy\nnow there are many different automated\ntesting strategies that you should be\naware of\nat the most granular level we have unit\ntesting which is designed to test\nindividual functions or methods\nlike does this function return the\nproper value when given the arguments of\na\nand b then we have integration testing\nto determine how well different\ncomponents or modules work together like\nis the component\nable to use the database service to get\ndata from the server at the highest\nlevel we have end-to-end testing which\nusually happens in a mock browser or\ndevice\nand simulates actual user behaviors like\nclicking on buttons and filling out\nforms\nit's like having a robot to do all your\nmanual testing for you\nand that's not all there are many other\ntypes like performance and smoke testing\nwhich i'll explain\nin my upcoming test driven development\nbreakdown hit the like button if you\nwant to see more short videos like this\nthanks for watching and i will see you\nin the next one"
    },
    {
        "topic": "Debugging techniques for mobile apps",
        "url": "https://www.youtube.com/watch?v=ih6gWZDuNME",
        "transcript": "this app blocks the buggers from being\nattached it exits early if you try to\ninject any code it even finds a way to\ncrash your entire phone if you run it\nwith a Jailbreak on like how who even\ndoes that the sorts of things we do on\nthis channel like modding Tik Tok to\nonly show cat videos or fixing crashes\nin other people's apps all require the\nability to take an app and poke at it to\nsee how it works but it's not uncommon\nfor iOS apps to include additional\nprotections to keep prying eyes away\nlike jailbreak detection or code\nobfuscation though this app has a\nsurprising combination of them why does\na widget app need this much protection\nanyways well that turns out to be a\nwhole separate thing that requires its\nown video so remember to subscribe if\nyou want to catch that one next but for\ntoday let's focus on how to even get\npast these Protections in the first\nplace I want to start with getting the\ndebugger attach because that might help\nus with the other two so we're running\nthis on a jailbroken phone which means\nusually we can just SSH into the phone\nitself and then start a debug server\nattached to whatever app we want and\nthen we should be able to interact with\nthe app however we want print de bug\ninformation figure out what's being pass\nto different methods all that good stuff\nlike our good old friend recursive\ndescription to print out information\nabout everything currently on the screen\nthat's how it should work but if I try\nto do the same thing to this widget app\nwe get segmentation fault that the\nbugger doesn't actually attach and now\nthe whole phone soft reboots because of\none of the other protections we'll get\nto that first this failure to attach the\nthe bugger is thanks to a function\ncalled P trce now this is a private API\non iOS meaning you're not supposed to\ncall\nit but it is a public API on Mac OS\nwhich means we can actually pull up the\ndocumentation for it now pce is super\ncool it is the thing that powers most of\nthe debugging functionality that we know\nand love but in particular we're\ninterested in this operation PT deny\nattach it will prevent any future\ndebugging requests and if the app is\nalready being debugged it will exit out\nof it entirely now there are effectively\ntwo ways an IOS app can include this\nfunctionality and how we tackle it\ndepends on which way it's using the\nsimplest way is to just call the P Trace\nfunction like you'd expect this is\neasiest to show in a Mac OS app where\nagain it's actually a public API so if\nwe take this sample app which is\nliterally just the default console\ntemplate from xcode if I run this xcode\nwe'll build it attach it a bugger and\nthen we'll see this hello world message\nprinted out at the bottom but if I\nimport the P trce header and then I call\nP trce with PT deny attach and then\nthere are three more required parameters\nbut none of them are actually used in\nthe case of the I attached if I rerun\nwith just this function call added we'll\nsee instead that the program exits with\nan error code and we don't see Hello\nWorld printed out it saw that xcode\nattached a debugger and exit it early\nonly if we have a debugger attached\nthough if I go here and tell xcode to\nnot debug the executable and then rerun\nthen everything works fine we get our\nhello world again the function call is\nvery similar on iOS but again because\nit's a private API you have to go\nthrough the normal s and dance of\nfinding a reference to the library that\ndeclares the function and then finding a\npointer to the function at runtime which\nwe've seen before but the function call\nitself is the same and conceptually\neverything works similarly to the Mac\nversion where if we try to run this\nxcode will launch the app but because it\ntries to attach to the bugger the app\nexits immediately so that's how PT deny\nattach works now how do we work around\nit well there's one easy weakness to\nthis function which is that it only\nblocks a debugger after it's been called\nso if I put a break point anywhere\nbefore that call and then rerun we'll\nsee the the bugger attaches just fine\nand this gives us a lot of control to\nactually circumvent that P trce call\nlater there's a bunch of ways we could\ndo that but probably the easiest is to\njust set a breakpoint on P trce itself\nand then when we continue execution we\ncan see see the app is calling p trce\nand we can instead just say no you're\nnot and use thread return to back out to\nwhere we were before the call without\nactually invoking the function and now\nwe can resume execution and we've\nsuccessfully skipped the call the app is\nlaunched our debugger is attached cool\nso now let's go try this in our widget\napp I'm going to launch a the bug server\nagain but this time I'm not going to\npoint it to any currently running\nprocess instead over on my own machine\nI'm going to start lldb I'm going to\ntell it we're connecting to a remote iOS\ndevice we will connect to that device\nand then I'm going to use process\nattached to tell it which process to\nconnect to I'm going to pass in top\nwidget as the process name but I'm going\nto use the wait for flag meaning this\nprocess doesn't exist yet but we want to\nattach to it as soon as it launches and\nnow if we rebr up the home screen and\ntry to launch the widgets we see ldb\nspring to life and now it's successfully\nattached to the app before any of its\ncode is executed including the code that\ntries to kick out the debugger so now we\ncan set a breakpoint on P trce it's\ngoing to give us a warning saying that\nit couldn't find it yet but that may be\nfine the app may be pulling in the\nframework sometime after launch like\nwe're doing here so I'm just going to go\nahead and continue execution and we can\nsee that it does indeed find that P trce\nfunction and it adds it to our\nbreakpoint but that breakpoint is never\ntriggered instead we are kicked out of\nthe app just like before and then again\nseparately the whole thing soft reboots\nthe phone just for fun so I mentioned\nthere are two ways to integrate this\nfunctionality and this way actually has\nsome downsides one it's super easy to\nfind and skip this P Trace call just\nlike we saw in the simulator and two you\nhave to do all this suspicious looking\nruntime lookup stuff that makes it very\nclear that you're using a private API\nwhich you don't want to do when going\nthrough app review so we can actually\nfeed two birds with one scone here and\nskip this P trce function call alt\ntogether see if I rerun this and we step\nback into that P trce function we can\nsee that the actual implementation is\nsurprisingly short there's some air\nhandling at the top and bottom but the\ncritical part is this one SVC\ninstruction here that's a system call\nmeaning this function is delegating to\nthe kernel to do the actual heavy\nlifting which makes sense for something\nas low level as a debugging integration\nso what some developers will do instead\nof calling this P trce function is to\njust make this same system call\nthemselves using essentially the same\nassembly by the way you generally should\nnot write inline assembly in this way\nbut it makes the explanation easier so\nif you're not well vers in assembly\ndon't worry this one's actually easier\nthan it looks we have the same four\nparameters that we're passing in our\noriginal P Trace function call there's\nPT deny attach which is literally just\nthe integer value 31 followed by three\nzeros and we're passing these all in\nregisters x0 through X3 now we need to\ntell the colonel which system call we\nactually want to make iOS expects that\nto be passed along in register x16 and\nin this case we're just passing the\nvalue 26 that's the value corresponding\nto P trce which we can actually see in\nthe disassembled version of the real P\ntrce function we set register x16 to hex\n1 a which is 26 in decimal so this tells\nthe colel what system call we want to\nmake and then we actually make the\nsystem call itself the hex 80 here\ndoesn't really do anything we're just\nrequired to pass a value and iOS uses\nthat value by convention but that's the\nentire assembly so if we rerun we'll see\nthe same thing as before we will start\nthe app and then immediately exit all\nwithout ever calling that private P trce\nfunction now don't get me wrong this is\nalso not allowed by Apple it is not\nvalid to call a private API by just\nreplicating the Assembly of it yourself\nbut it is a little harder for them to\ndetect and a little harder for us to\nwork around there's now no common\nfunction like P Trace that we could set\na breakpoint on to detect and Skip we\ninstead have to figure out where in the\nbinary the system call happens and then\ndecide from from there how we want to\nbypass it so to do that we need to open\na decrypted copy of the app in a\ndisassembler and then figure out where\nin these millions of instructions that\nsystem call lies system calls can be\nkind of common in a normal app\ndisassembly so just looking through all\nof them is probably not going to help us\na ton luckily if we look back at those\ninstructions one of them sticks out like\na sore thumb which is setting register\nx16 to the value 26 that's a very\nspecific value being set to a very\nspecific register I wouldn't expect this\nto appear in app code very frequently so\nlooking for this instruction might be a\ngood way to narrow our search base down\nnow most this assemblers should give you\nan option to search through kind of this\nraw text disassembled output but that\ncan be pretty slow like you know it's\nbad when the search popup even warns you\nnot to do it plus it can be tripped up\nby small formatting differences like\nwhether numbers are displayed in heximal\nor decimal so it's an option but we\nmight have a better one which is to find\nthe exact bites corresponding to this\ninstruction and then search for those I\nlike armconverter.com for this it's a\nreally easy way to paste in an assembly\ninstruction and get the corresponding\nbytes out so hopefully these bites\nappear somewhere in the binary we should\nalso note that there was another way\nthat you could write this instruction\nwhich is to w16 instead of x16 that's\nthe same register one's just a 32-bit\nView and one's a 64-bit view so we\nshould look for both so we can search\nfor exactly those bytes in the\ndisassembler and it looks like for x16\nwe found nothing let's try for w16 and\nthis time we end up seeing four\ninstructions throughout the whole app\nthat's a lot more manageable so if we\nlook through these this first one\ndoesn't look too suspicious to me\nmeaning the assembly doesn't look like\nthe assembly that we expect from our\nxcode example the second one also\ndoesn't look too suspicious the third\none looks very suspicious that is\npractically the exact same assembly we\nhave in xcode here we're setting\nregister x0 to xx1 F that's 31 in\ndecimal setting the next three to zero\nwe set register w16 or x16 to 1 a that's\n26 and we make our system call so\nperfect this is the part of the app that\nis preventing us from attaching our\ndebugger and turns out the fourth\noccurrence is just a different branch in\nthis same function further down so it's\nvery clear where we need to patch out so\nwhat I'm going to do is attach a\ndebugger to this widget app again with\nthe exact same setup as before where we\njust tell it to wait for the widget app\nto be launched and then it comes alive\nas soon as we do and and this time I\nwant to set a breakpoint on the\naddresses where this system call is\nbeing made and I can do that using\nbreakpoint set- a for address and I'm\ngoing to come over here and scroll over\nto see the address of this instruction\nand we can just paste that in here now\nthis alone isn't sufficient because our\ndisassembler doesn't know anything about\nwhere this binary is actually loaded\ninto memory but lb can handle that for\nus using- s meaning treat this address\nas relative to that particular binary\nand I'm going to create that breakpoint\nand then I'm going to do the same for\nthe other system call down below where\nI'm literally just going to swap out\nthis address and submit and now\nhopefully just a moment or two later our\nbreakpoint is hit and we can actually\nsee the exact same instructions as we\nhave in this first occurrence of the\nsystem call right up here so now we're\npause right before the system call what\nI'm going to do is take the address of\nthe instruction right after it and I'm\ngoing to use the jump command to just\nskip to that address you can see in our\nprevious output there's an arrow on the\nleft hand side saying we're about to\nexecute the SVC instruction now that\nwe've jumped forward if I run the\ndisassemble command and scroll up you\ncan see that that Arrow says we're now\nright after that system call and so now\nif I continue execution we're in right\nup until that happens and we hit the\nsecond protection and do the soft reboot\nbut you'll notice something very cool\nhere lb is actually still attached by\nfixing the bugger we now have the\nability to get some insights into the\nwhole soft reboot thing I said at the\nstart of this video that the app was\ndoing the reboot thing on purpose now\nlet me prove it we can see here in the\nbugger that the process was sent a kill\nsignal if we run BT to see the current\nstack Trace we can see what it was doing\nwhen it was killed and specifically it's\nrunning a function to capture the screen\ncontents which is interesting we can\nalso find the last address where we are\ngoing through our own app code right\nhere now the first thing we'll want to\ndo is look at this function in a\ndisassembler but again there's a\ndisconnect here where this is the\naddress relative to wherever this\nprocess was loaded into memory which our\ndisassembler knows nothing about but we\ncan use image lookup d a for address and\npaste in that address and that output\nwill include the address in the binary\nitself so we can take this address and\njump there in our disassembler and we\ncan immediately see some references to\ncapturing the current screen content so\nwe know we're in the right place if I\nbring up the decompilation of this\nfunction we can see that we have an\ninfinite loop with no way to break out\nof it and in that infinite Loop we call\nUI screen main screen and then on that\nwe call snapshot view after screen\nUpdates this is a public API and a\nfairly common one it just creates a\nsnapshot of a view but it's the\nsurrounding implementation that's so\ninteresting here this is a very memory\nintensive method but we don't do\nanything with the result we're just\ntaking snapshots in an infinite Loop\nsometimes the decompilation can get\nthings wrong but if we look at the graph\nview of this function we see the exact\nsame thing there's an infinite loop as\nshown by this one Arrow here and all we\ndo within that Loop is Snapshot view\nafter updates the result is never\nreferenced there's no other methods\ncalled we have no way to break out of\nthe loop and again I need to emphasize\nhow crazy this is using too much memory\ncan of course get your app killed but it\nseems like somebody found a method that\nif you call it too quickly will soft\nreboot the whole phone and then they\nchose to take that information and write\na function to call it in an infinite\nLoop and just torpedo the phone of\nwhoever is running this code like that's\njust delightful let's see if we can\nfigure out why this is being called in\nlb this was the only line of the stack\nTrace that was from the app itself the\nline before that is just from the\ncombined framework but in the\ndisassembler we might be able to learn\nmore so I'm going to go to the very\nstart of this function and I'm going to\nlook up all the places that reference it\nthis can be places that call the\nfunction directly or places that pass\nthis function address as a call back\nwhich is most likely if we're seeing it\ninvoked by the combined framework and\nlooking at this first reference if we\nbring up the decompilation we can see\nthat we call NS notification center.\npublisher and then we're subscribing to\nupdates from that publisher back in the\ndisassembly if we scroll up a little bit\nmore we can actually find the name for\nthat notification is com. app.tw dotw RR\ntww is probably top widgets here the\nname of the app I don't know what RR\nmeans yet but we can interpret this as\nus subscribing to Notifications named\nc.a.t. wrrr and whenever we see that\nnotification come in we enter that\nfunction to take an infinite Loop of\nview snapshots and torpedo of the phone\nso now the question is where's this\nnotification fired and if we double\nclick into it we should be able to see\nall the places within the binary that\nreference this string this first one is\nwhere we just were the second one\ndoesn't look too interesting the third\none does look to be a place where this\nnotification is actually fired based on\nthis post notification name call and if\nwe zoom out and try to figure out what\nconditions we're actually firing this in\nwe can see that it's based on a check\nfor an NS user defaults value called tw.\nrisk. cheome maybe risk is what one of\nthose RS stood for the RR could be risk\nresult but either way I think it's clear\nat this point what's happening the app\nis doing some sort of risk check on our\nphone we do not pass the check and then\nit decides to crash the phone as a\nresult we could keep following this\nchain up or we could try to find other\nways to poke around at it like there's a\nlot of functions in this app that have\nJailbreak in the name that are obvious\nplaces to start but we don't actually\nneed to cuz we know where the final\nresult of this whole check handled it's\nin that infinite Loop function and\nthat's enough if I start an lb session\nagain now just like before I'm going to\nset a breakpoint on that P Trace system\ncall but I'm also going to set a second\nbreakpoint at the start of this function\nI'm just going to take this address here\nand set it the same way we did for our\nlast one now I'm going to continue\nexecution we should hit breakpoint one\nfirst that is the system called for p\ntray I'm going to go ahead and jump\nforward again to skip it but this time\nwe hit breakpoint 2 as well that is the\nstart of the infinite Loop function\nmeaning the app has decided that it\nshould torpedo our phone and just like\nbefore I'm going to use thread return to\nskip the execution of that method\nentirely and then we can hit continue\nand there we go we are properly into the\napp we can pause execution we can do all\nour normal things to poke around in the\napp set break points on method calls\nwhatever we want pH again I cannot\nstress enough how weird it is for an app\nto try to take down your phone just for\ndebugging it I think that's hilarious\nnow I mentioned one more issue at the\nstart of all this which is that when we\ntry to inject new code into this app it\nalso crashes I'll often do that when I\nhave a the buger attached when I need\nsome more complex utils to help me dive\ninto an app like if I quickly want to\nlog the accessibility information of all\nthe buttons on screen or something you\ncould do that just from ldb but it would\nbe very painful it's easier to just\nwrite that in a framework and then\ninject it into the app but you might\nalso want to do that if you don't have a\njailbroken phone at all you can inject\ntools like Freeda or Flex to get some\ninitial exploration of an app without\nactually needing a jailbreak say if we\nwant to take this app and inject Flex\ninto it so here's our new copy of the\napp with flex injected and if we try to\nlaunch it immediate crash in fact it\ncrashes so quickly that it doesn't quite\nreach full screen yet so is this one\nmore protection checking what Frameworks\nare loaded at runtime and crashing if\nanything unexpected appears luckily no\nsome apps do that but we have a much\nsimpler explanation here let's look at\nwhat method's actually crashing we could\ndo that super easily with LLB same as\nbefore attach to the app and then see\nwhat the stack Trace is when we crash\nbut if you were injecting code into this\napp because you didn't have a jailbreak\nmeaning you don't have lb either then we\ncan get the same information looking at\na crash log from the device you could\npull this from xode or if your phone's\nto Old which this one is you can get\nthem from library logs crash report or\nmobile device and here we can see a\nrecent Crash from the top widget process\nso I'm going to go ahead and open this\nin Sublime so we can see a couple things\nhere we can see that there was an\nexception of type exe breakpoint we can\nsee that it was thread zero that caused\nthat exception and here we can see the\nactual stack tray of that crash so the\nvery top of the stack was this relative\naddress within image index one and if we\nlook after all this thread information\nwe should be able to confirm that index0\nis dyld index one is our actual top\nwidget app so that means we have the\nrelative address within the top widget\nbinary that was causing the crash I'm\ngoing to go ahead and convert that to a\nhexadecimal number and then back in our\ndisassembler we should be able to look\nup that address and we can see that it\ncorresponds to a break instruction so\nthis lines up with what we saw with the\nexe breakpoint exception type and this\nis the instruction we'd expect if the\napps code intentionally wanted us to\ncrash here now if we go to the\ndecompilation of this function we should\nbe able to pretty quickly see what the\nissue is and it's this called the\ncontainer URL for Security application\ngroup identifier this is a public\nperfectly normal method that returns a\nfolder that multiple apps or extensions\nin a single group can access together\nusually apps are completely sandboxed\nfrom each other they basically have\ntheir own little mini file systems that\nthey can write to but putting them in a\nshared group means that they can access\nshared resources the problem is that\ngroups are defined as part of the code\nsigning process and we just threw away\nthe existing signature by injecting code\nand resigning the app meaning we threw\naway whatever groups the app was already\na part of so when we call a function\nlike this that was passing a group\nidentifier it's going to pass something\nlike group. top widgets which after\nresigning this app is no longer part of\nso this method which is supposed to\nreturn a URL pointing to the local file\nsystem is probably returning nil and\nmaybe we are Force unwrapping that and\ncrashing the whole app as a result so\nthis is actually a pretty common problem\nand even though it's acting like a\ndefense here it's probably not on\npurpose this is a widget app and it\nmakes sense that it would need to be in\na group with its widget app extension\nthat actually candles displaying widgets\non the home screen by far the easiest\nway to work around this kind of issue is\nto not resign the app a jailbroken phone\nmakes this significantly easier you can\ninject Frameworks into an app using a\njailbreak tweak without ever having to\nresign it or you can even run code that\nhas invalid signatures you can add\nwhatever apps to whatever groups you\nwant jailbreaking makes a lot of code\nsign issues just go away so that's what\nI did when I was looking into this app\nthe first time I created a jailbreak\ntweak that injected the utilities I\nwanted and then I was able to reference\nthose from the debugger instead in a\npinch though if you were injecting a\ndebugging framework because you don't\nhave have a jailbroken device you can\nstill sometimes work around things like\nthis even while resigning the app the\napp is crashing because it's expecting a\nURL to be returned here and it's not\ngetting one back what we can do is\ncreate a framework that Swizzles that\nmethod to make sure that a URL is always\nreturned in this case we're setting up\nso that anytime that container URL for\nSecurity application group identifier\nmethod is called God that's a mouthful\nwe are instead going to call our\nreplacement method down here which just\nreturns some temporary directory it's\nworth noting this is not an equivalent\nreplacement for what the app is actually\ntrying to do this method is being called\nbecause the app wants a shared folder\nthat both it and its app extensions can\naccess and we're lying to it and saying\nhere you go here's your shared folder\neven though that is definitely not a\nshared folder but depending on what\nyou're trying to do that might actually\nbe fine I've actually found little\npatches like this will often break the\napp extensions themselves but I usually\ndon't care about them and the app still\nworks fine especially if my goal is to\njust poke around at how the app does\nsomething and I just need the basic\nfunctionality to work you can maybe do\nsomething more advanced here like create\nyour own app Group and replace the\nidentifier being pass to this method and\ndo that in all the app extensions and\nany other place that's referencing these\ngroup IDs either way if we build this\nFrame and now we add it to the list of\nFrameworks that we're injecting into the\napp now we have the new version of the\napp installed and we need to bypass all\nthe existing protections again so one\nmore time we'll go ahead and launch set\nour two break points continue execution\njump forward thread return and there we\ngo we are properly in the app this time\nwith flex injected so we have all these\nawesome debugging tools that being said\nsome parts of the app are broken thanks\nto the resigning process so we could go\nfigure out where those are but at some\npoint just injecting code us in a\njailbreak so you don't have to resign\nprobably is worth your while either way\nwe are now in the app we have a debugger\nattached we can inject code and we have\nbypassed the jailbreak detection what\nwere we here for again oh yeah that's\nfor next time until then thanks so much\nfor watching if you find and bypass any\nof these protections or add them to your\nown app because you just learned about\nthem for the first time please let me\nknow this is my second time recording\nthis because I forgot to record my\nscreen the first time so I'm going to go\nget some food thank you so much for\nwatching I will see you next time"
    }
]